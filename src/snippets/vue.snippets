# Import Component with vue-class-property
snippet vcc-imp
	import Component from "vue-class-component";
	
# Import Vue and Component with vue-property-decorator
snippet vpd-imp
	import { Component, Vue } from "vue-property-decorator";
	
# Class-style API initial data
snippet vcs-data
	${1:name}: ${2:type} = ${3:value};
	
# Class-style API annotate refs type
snippet vcs-refs
	\$refs!: {
		${1:nameComponent}: ${2:Component},
	};
	
# Class-style API computed
snippet vcs-computed
	get ${1:nameComputed} () {
		return ${2:value};
	};
	
e},
		};
	},
	
# Vue Props
snippet vprops
	props: {
		${1:propName}: ${2:type},
	},
	
# Vue Props required
snippet vprops-req
	props: {
		${1:propName}: {
			type: ${2:Number},
			required: true,
		},
	},
	
# Interface for extend Vue
snippet vinterface
	interface ${1:nameInterface} {
		${2:key}: ${3:value},
	},
	
# Vue Method
snippet vmethod
	methods: {
		${1:name}(${2:arg}): ${2:typedReturn} {
			${0}
		},
	},
	
# Vue Computed value (must always be typed)
snippet vcomputed
	computed: {
		${1:name}(): ${2:type} {
			return this.${3:data};
		},
	},
	
# Vue watcher
snippet vwatcher
	watch: {
		${1:data}(${2:newValue}, ${3:oldValue}) {
			${0}
		},
	},
	
# Declaration Refs by VueConstructor
snippet vrefs
	interface ${1:Refs} {
		\$refs: {
			${2:name}: HTMLInputElement
		}
	}
	
	export default (Vue as VueConstructor<Vue & ${1:Refs}>).extend({
	
# Vue filter
snippet vfilter
	filters: {
		${1:fnName}(${2:value}) {
			return ${2:value}${0};
		}
	}
	
# Vue render (needs return type)
snippet vrender
	render (createElement): VNode {
		return createElement("${1:tag}", this.${2:computed})
	},
	
ops: {
				${2:nameProp}: ${3:type}
			}
		})
	
		@Component({})
		export default class ${1:App} extends ${1:App}Props {
			${0}
		};
	</script>
	
	<style scoped>
	
	</style>
	
# Base for Vue.js File with TypeScript using the Composition API plugin for Vue 2
snippet vcompbase
	<template>
	
	</template>
	
	<script lang="ts">
		import Vue from "vue";
		import { defineComponent } from "@vue/composition-api";
	
		export default defineComponent({
			${0}
		});
	</script>
	
	<style scoped>
	
	</style>
	
