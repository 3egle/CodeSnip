# LockType from the _thread module
snippet LockType
	LockType
	
# TIMEOUT_MAX from the _thread module
snippet TIMEOUT_MAX
	TIMEOUT_MAX
	
# acquire() from the _thread module
snippet acquire
	acquire(${1:waitflag=1}, ${2:timeout=-1})
	
# allocate_lock() from the _thread module
snippet allocate_lock
	allocate_lock(${1:})
	
# error() from the _thread module
snippet error
	error()
	
# exit() from the _thread module
snippet exit
	exit(${1:})
	
# get_ident() from the _thread module
snippet get_ident
	get_ident(${1:})
	
# interrupt_main() from the _thread module
snippet interrupt_main
	interrupt_main(${1:})
	
# locked() from the _thread module
snippet locked
	locked(${1:})
	
# release() from the _thread module
snippet release
	release(${1:})
	
# stack_size() from the _thread module
snippet stack_size
	stack_size(${1:[size]})
	
# start_new_thread() from the _thread module
snippet start_new_thread
	start_new_thread(${1:function,})
	
# ABC from the abc module
snippet ABC
	ABC
	
# ABCMeta from the abc module
snippet ABCMeta
	ABCMeta
	
# abstractclassmethod() from the abc module
snippet abstractclassmethod
	abstractclassmethod()
	
# abstractmethod() from the abc module
snippet abstractmethod
	abstractmethod()
	
# abstractproperty() from the abc module
snippet abstractproperty
	abstractproperty(${1:fget=None}, ${2:fset=None}, ${3:fdel=None}, ${4:doc=None})
	
# abstractstaticmethod() from the abc module
snippet abstractstaticmethod
	abstractstaticmethod()
	
# get_cache_token() from the abc module
snippet get_cache_token
	get_cache_token(${1:})
	
# aifc() from the aifc module
snippet aifc
	aifc(${1:})
	
# aiff() from the aifc module
snippet aiff
	aiff(${1:})
	
# close() from the aifc module
snippet close
	close(${1:})
	
# getcompname() from the aifc module
snippet getcompname
	getcompname(${1:})
	
# getcomptype() from the aifc module
snippet getcomptype
	getcomptype(${1:})
	
# getframerate() from the aifc module
snippet getframerate
	getframerate(${1:})
	
# getmark() from the aifc module
snippet getmark
	getmark(${1:id})
	
# getmarkers() from the aifc module
snippet getmarkers
	getmarkers(${1:})
	
# getnchannels() from the aifc module
snippet getnchannels
	getnchannels(${1:})
	
# getnframes() from the aifc module
snippet getnframes
	getnframes(${1:})
	
# getparams() from the aifc module
snippet getparams
	getparams(${1:})
	
# getsampwidth() from the aifc module
snippet getsampwidth
	getsampwidth(${1:})
	
# open() from the aifc module
snippet open
	open(${1:file}, ${2:mode=None})
	
# readframes() from the aifc module
snippet readframes
	readframes(${1:nframes})
	
# rewind() from the aifc module
snippet rewind
	rewind(${1:})
	
# setcomptype() from the aifc module
snippet setcomptype
	setcomptype(${1:type}, ${2:name})
	
# setframerate() from the aifc module
snippet setframerate
	setframerate(${1:rate})
	
# setmark() from the aifc module
snippet setmark
	setmark(${1:id}, ${2:pos}, ${3:name})
	
# setnchannels() from the aifc module
snippet setnchannels
	setnchannels(${1:nchannels})
	
# setnframes() from the aifc module
snippet setnframes
	setnframes(${1:nframes})
	
# setparams() from the aifc module
snippet setparams
	setparams(${1:nchannels}, ${2:sampwidth}, ${3:framerate}, ${4:comptype}, ${5:compname})
	
# setpos() from the aifc module
snippet setpos
	setpos(${1:pos})
	
# setsampwidth() from the aifc module
snippet setsampwidth
	setsampwidth(${1:width})
	
# tell() from the aifc module
snippet tell
	tell(${1:})
	
# writeframes() from the aifc module
snippet writeframes
	writeframes(${1:data})
	
# writeframesraw() from the aifc module
snippet writeframesraw
	writeframesraw(${1:data})
	
# Action from the argparse module
snippet Action
	Action(${1:option_strings}, ${2:dest}, ${3:nargs=None}, ${4:const=None}, ${5:default=None}, ${6:type=None}, ${7:choices=None}, ${8:required=False}, ${9:help=None}, ${10:metavar=None})
	
# ArgumentDefaultsHelpFormatter from the argparse module
snippet ArgumentDefaultsHelpFormatter
	ArgumentDefaultsHelpFormatter
	
# ArgumentParser from the argparse module
snippet ArgumentParser
	ArgumentParser(${1:prog=None}, ${2:usage=None}, ${3:description=None}, ${4:epilog=None}, ${5:parents=[]}, ${6:formatter_class=argparse.HelpFormatter}, ${7:prefix_chars='-'}, ${8:fromfile_prefix_chars=None}, ${9:argument_default=None}, ${10:conflict_handler='error'}, ${11:add_help=True}, ${12:allow_abbrev=True})
	
# FileType from the argparse module
snippet FileType
	FileType(${1:mode='r'}, ${2:bufsize=-1}, ${3:encoding=None}, ${4:errors=None})
	
# MetavarTypeHelpFormatter from the argparse module
snippet MetavarTypeHelpFormatter
	MetavarTypeHelpFormatter
	
# Namespace from the argparse module
snippet Namespace
	Namespace
	
# RawDescriptionHelpFormatter from the argparse module
snippet RawDescriptionHelpFormatter
	RawDescriptionHelpFormatter
	
# RawTextHelpFormatter from the argparse module
snippet RawTextHelpFormatter
	RawTextHelpFormatter
	
# add_argument() from the argparse module
snippet add_argument
	add_argument(${1:name or flags...[}, ${2:action][}, ${3:nargs][}, ${4:const][}, ${5:default][}, ${6:type][}, ${7:choices][}, ${8:required][}, ${9:help][}, ${10:metavar][}, ${11:dest]})
	
# add_argument_group() from the argparse module
snippet add_argument_group
	add_argument_group(${1:title=None}, ${2:description=None})
	
# add_mutually_exclusive_group() from the argparse module
snippet add_mutually_exclusive_group
	add_mutually_exclusive_group(${1:required=False})
	
# add_subparsers() from the argparse module
snippet add_subparsers
	add_subparsers(${1:[title][}, ${2:description][}, ${3:prog][}, ${4:parser_class][}, ${5:action][}, ${6:option_string][}, ${7:dest][}, ${8:help][}, ${9:metavar]})
	
# convert_arg_line_to_args() from the argparse module
snippet convert_arg_line_to_args
	convert_arg_line_to_args(${1:arg_line})
	
# error() from the argparse module
snippet error
	error(${1:message})
	
# exit() from the argparse module
snippet exit
	exit(${1:status=0}, ${2:message=None})
	
# format_help() from the argparse module
snippet format_help
	format_help(${1:})
	
# format_usage() from the argparse module
snippet format_usage
	format_usage(${1:})
	
# get_default() from the argparse module
snippet get_default
	get_default(${1:dest})
	
# parse_args() from the argparse module
snippet parse_args
	parse_args(${1:args=None}, ${2:namespace=None})
	
# parse_known_args() from the argparse module
snippet parse_known_args
	parse_known_args(${1:args=None}, ${2:namespace=None})
	
# print_help() from the argparse module
snippet print_help
	print_help(${1:file=None})
	
# print_usage() from the argparse module
snippet print_usage
	print_usage(${1:file=None})
	
# set_defaults() from the argparse module
snippet set_defaults
	set_defaults(${1:**kwargs})
	
# append() from the array module
snippet append
	append(${1:x})
	
# array() from the array module
snippet array
	array(${1:typecode[}, ${2:initializer]})
	
# buffer_info() from the array module
snippet buffer_info
	buffer_info(${1:})
	
# byteswap() from the array module
snippet byteswap
	byteswap(${1:})
	
# count() from the array module
snippet count
	count(${1:x})
	
# extend() from the array module
snippet extend
	extend(${1:iterable})
	
# frombytes() from the array module
snippet frombytes
	frombytes(${1:s})
	
# fromfile() from the array module
snippet fromfile
	fromfile(${1:f}, ${2:n})
	
# fromlist() from the array module
snippet fromlist
	fromlist(${1:list})
	
# fromstring() from the array module
snippet fromstring
	fromstring(${1:})
	
# fromunicode() from the array module
snippet fromunicode
	fromunicode(${1:s})
	
# index() from the array module
snippet index
	index(${1:x})
	
# insert() from the array module
snippet insert
	insert(${1:i}, ${2:x})
	
# itemsize() from the array module
snippet itemsize
	itemsize()
	
# pop() from the array module
snippet pop
	pop(${1:[i]})
	
# remove() from the array module
snippet remove
	remove(${1:x})
	
# reverse() from the array module
snippet reverse
	reverse(${1:})
	
# tobytes() from the array module
snippet tobytes
	tobytes(${1:})
	
# tofile() from the array module
snippet tofile
	tofile(${1:f})
	
# tolist() from the array module
snippet tolist
	tolist(${1:})
	
# tostring() from the array module
snippet tostring
	tostring(${1:})
	
# tounicode() from the array module
snippet tounicode
	tounicode(${1:})
	
# typecode() from the array module
snippet typecode
	typecode()
	
# typecodes() from the array module
snippet typecodes
	typecodes()
	
# AST from the ast module
snippet AST
	AST
	
# NodeTransformer from the ast module
snippet NodeTransformer
	NodeTransformer
	
# NodeVisitor from the ast module
snippet NodeVisitor
	NodeVisitor
	
# copy_location() from the ast module
snippet copy_location
	copy_location(${1:new_node}, ${2:old_node})
	
# dump() from the ast module
snippet dump
	dump(${1:node}, ${2:annotate_fields=True}, ${3:include_attributes=False})
	
# fix_missing_locations() from the ast module
snippet fix_missing_locations
	fix_missing_locations(${1:node})
	
# get_docstring() from the ast module
snippet get_docstring
	get_docstring(${1:node}, ${2:clean=True})
	
# increment_lineno() from the ast module
snippet increment_lineno
	increment_lineno(${1:node}, ${2:n=1})
	
# iter_child_nodes() from the ast module
snippet iter_child_nodes
	iter_child_nodes(${1:node})
	
# iter_fields() from the ast module
snippet iter_fields
	iter_fields(${1:node})
	
# literal_eval() from the ast module
snippet literal_eval
	literal_eval(${1:node_or_string})
	
# parse() from the ast module
snippet parse
	parse(${1:source}, ${2:filename=''}, ${3:mode='exec'})
	
# walk() from the ast module
snippet walk
	walk(${1:node})
	
# async_chat() from the asynchat module
snippet async_chat
	async_chat()
	
# close_when_done() from the asynchat module
snippet close_when_done
	close_when_done(${1:})
	
# collect_incoming_data() from the asynchat module
snippet collect_incoming_data
	collect_incoming_data(${1:data})
	
# discard_buffers() from the asynchat module
snippet discard_buffers
	discard_buffers(${1:})
	
# found_terminator() from the asynchat module
snippet found_terminator
	found_terminator(${1:})
	
# get_terminator() from the asynchat module
snippet get_terminator
	get_terminator(${1:})
	
# push() from the asynchat module
snippet push
	push(${1:data})
	
# push_with_producer() from the asynchat module
snippet push_with_producer
	push_with_producer(${1:producer})
	
# set_terminator() from the asynchat module
snippet set_terminator
	set_terminator(${1:term})
	
# dispatcher() from the asyncore module
snippet dispatcher
	dispatcher()
	
# dispatcher_with_send() from the asyncore module
snippet dispatcher_with_send
	dispatcher_with_send()
	
# file_dispatcher() from the asyncore module
snippet file_dispatcher
	file_dispatcher()
	
# file_wrapper() from the asyncore module
snippet file_wrapper
	file_wrapper()
	
# loop() from the asyncore module
snippet loop
	loop(${1:[timeout[,})
	
# register() from the atexit module
snippet register
	register(${1:func}, ${2:*args}, ${3:**kargs})
	
# unregister() from the atexit module
snippet unregister
	unregister(${1:func})
	
# add() from the audioop module
snippet add
	add(${1:fragment1}, ${2:fragment2}, ${3:width})
	
# adpcm2lin() from the audioop module
snippet adpcm2lin
	adpcm2lin(${1:adpcmfragment}, ${2:width}, ${3:state})
	
# alaw2lin() from the audioop module
snippet alaw2lin
	alaw2lin(${1:fragment}, ${2:width})
	
# avg() from the audioop module
snippet avg
	avg(${1:fragment}, ${2:width})
	
# avgpp() from the audioop module
snippet avgpp
	avgpp(${1:fragment}, ${2:width})
	
# bias() from the audioop module
snippet bias
	bias(${1:fragment}, ${2:width}, ${3:bias})
	
# byteswap() from the audioop module
snippet byteswap
	byteswap(${1:fragment}, ${2:width})
	
# cross() from the audioop module
snippet cross
	cross(${1:fragment}, ${2:width})
	
# error() from the audioop module
snippet error
	error()
	
# findfactor() from the audioop module
snippet findfactor
	findfactor(${1:fragment}, ${2:reference})
	
# findfit() from the audioop module
snippet findfit
	findfit(${1:fragment}, ${2:reference})
	
# findmax() from the audioop module
snippet findmax
	findmax(${1:fragment}, ${2:length})
	
# getsample() from the audioop module
snippet getsample
	getsample(${1:fragment}, ${2:width}, ${3:index})
	
# lin2adpcm() from the audioop module
snippet lin2adpcm
	lin2adpcm(${1:fragment}, ${2:width}, ${3:state})
	
# lin2alaw() from the audioop module
snippet lin2alaw
	lin2alaw(${1:fragment}, ${2:width})
	
# lin2lin() from the audioop module
snippet lin2lin
	lin2lin(${1:fragment}, ${2:width}, ${3:newwidth})
	
# lin2ulaw() from the audioop module
snippet lin2ulaw
	lin2ulaw(${1:fragment}, ${2:width})
	
# max() from the audioop module
snippet max
	max(${1:fragment}, ${2:width})
	
# maxpp() from the audioop module
snippet maxpp
	maxpp(${1:fragment}, ${2:width})
	
# minmax() from the audioop module
snippet minmax
	minmax(${1:fragment}, ${2:width})
	
# mul() from the audioop module
snippet mul
	mul(${1:fragment}, ${2:width}, ${3:factor})
	
# ratecv() from the audioop module
snippet ratecv
	ratecv(${1:fragment}, ${2:width}, ${3:nchannels}, ${4:inrate}, ${5:outrate}, ${6:state[}, ${7:weightA[}, ${8:weightB]]})
	
# reverse() from the audioop module
snippet reverse
	reverse(${1:fragment}, ${2:width})
	
# rms() from the audioop module
snippet rms
	rms(${1:fragment}, ${2:width})
	
# tomono() from the audioop module
snippet tomono
	tomono(${1:fragment}, ${2:width}, ${3:lfactor}, ${4:rfactor})
	
# tostereo() from the audioop module
snippet tostereo
	tostereo(${1:fragment}, ${2:width}, ${3:lfactor}, ${4:rfactor})
	
# ulaw2lin() from the audioop module
snippet ulaw2lin
	ulaw2lin(${1:fragment,})
	
# a85decode() from the base64 module
snippet a85decode
	a85decode(${1:b}, ${2:*}, ${3:foldspaces=False}, ${4:adobe=False}, ${5:ignorechars=b'  v'})
	
# a85encode() from the base64 module
snippet a85encode
	a85encode(${1:b}, ${2:*}, ${3:foldspaces=False}, ${4:wrapcol=0}, ${5:pad=False}, ${6:adobe=False})
	
# b16decode() from the base64 module
snippet b16decode
	b16decode(${1:s}, ${2:casefold=False})
	
# b16encode() from the base64 module
snippet b16encode
	b16encode(${1:s})
	
# b32decode() from the base64 module
snippet b32decode
	b32decode(${1:s}, ${2:casefold=False}, ${3:map01=None})
	
# b32encode() from the base64 module
snippet b32encode
	b32encode(${1:s})
	
# b64decode() from the base64 module
snippet b64decode
	b64decode(${1:s}, ${2:altchars=None}, ${3:validate=False})
	
# b64encode() from the base64 module
snippet b64encode
	b64encode(${1:s}, ${2:altchars=None})
	
# b85decode() from the base64 module
snippet b85decode
	b85decode(${1:b})
	
# b85encode() from the base64 module
snippet b85encode
	b85encode(${1:b}, ${2:pad=False})
	
# decode() from the base64 module
snippet decode
	decode(${1:input}, ${2:output})
	
# decodebytes() from the base64 module
snippet decodebytes
	decodebytes(${1:s})
	
# decodestring() from the base64 module
snippet decodestring
	decodestring(${1:s})
	
# encode() from the base64 module
snippet encode
	encode(${1:input}, ${2:output})
	
# encodebytes() from the base64 module
snippet encodebytes
	encodebytes(${1:s})
	
# encodestring() from the base64 module
snippet encodestring
	encodestring(${1:s})
	
# standard_b64decode() from the base64 module
snippet standard_b64decode
	standard_b64decode(${1:s})
	
# standard_b64encode() from the base64 module
snippet standard_b64encode
	standard_b64encode(${1:s})
	
# urlsafe_b64decode() from the base64 module
snippet urlsafe_b64decode
	urlsafe_b64decode(${1:s})
	
# urlsafe_b64encode() from the base64 module
snippet urlsafe_b64encode
	urlsafe_b64encode(${1:s})
	
# Bdb from the bdb module
snippet Bdb
	Bdb(${1:skip=None})
	
# BdbQuit from the bdb module
snippet BdbQuit
	BdbQuit
	
# Breakpoint from the bdb module
snippet Breakpoint
	Breakpoint(${1:self}, ${2:file}, ${3:line}, ${4:temporary=0}, ${5:cond=None}, ${6:funcname=None})
	
# checkfuncname() from the bdb module
snippet checkfuncname
	checkfuncname(${1:b}, ${2:frame})
	
# effective() from the bdb module
snippet effective
	effective(${1:file}, ${2:line}, ${3:frame})
	
# set_trace() from the bdb module
snippet set_trace
	set_trace(${1:})
	
# Error from the binascii module
snippet Error
	Error
	
# Incomplete from the binascii module
snippet Incomplete
	Incomplete
	
# a2b_base64() from the binascii module
snippet a2b_base64
	a2b_base64(${1:string})
	
# a2b_hex() from the binascii module
snippet a2b_hex
	a2b_hex(${1:hexstr})
	
# a2b_hqx() from the binascii module
snippet a2b_hqx
	a2b_hqx(${1:string})
	
# a2b_qp() from the binascii module
snippet a2b_qp
	a2b_qp(${1:data}, ${2:header=False})
	
# a2b_uu() from the binascii module
snippet a2b_uu
	a2b_uu(${1:string})
	
# b2a_base64() from the binascii module
snippet b2a_base64
	b2a_base64(${1:data})
	
# b2a_hex() from the binascii module
snippet b2a_hex
	b2a_hex(${1:data})
	
# b2a_hqx() from the binascii module
snippet b2a_hqx
	b2a_hqx(${1:data})
	
# b2a_qp() from the binascii module
snippet b2a_qp
	b2a_qp(${1:data}, ${2:quotetabs=False}, ${3:istext=True}, ${4:header=False})
	
# b2a_uu() from the binascii module
snippet b2a_uu
	b2a_uu(${1:data})
	
# crc32() from the binascii module
snippet crc32
	crc32(${1:data[}, ${2:value]})
	
# crc_hqx() from the binascii module
snippet crc_hqx
	crc_hqx(${1:data}, ${2:value})
	
# hexlify() from the binascii module
snippet hexlify
	hexlify(${1:data})
	
# rlecode_hqx() from the binascii module
snippet rlecode_hqx
	rlecode_hqx(${1:data})
	
# rledecode_hqx() from the binascii module
snippet rledecode_hqx
	rledecode_hqx(${1:data})
	
# unhexlify() from the binascii module
snippet unhexlify
	unhexlify(${1:hexstr})
	
# Error from the binhex module
snippet Error
	Error
	
# binhex() from the binhex module
snippet binhex
	binhex(${1:input}, ${2:output})
	
# hexbin() from the binhex module
snippet hexbin
	hexbin(${1:input,})
	
# bisect() from the bisect module
snippet bisect
	bisect(${1:a}, ${2:x}, ${3:lo=0}, ${4:hi=len}, ${5:a})
	
# bisect_left() from the bisect module
snippet bisect_left
	bisect_left(${1:a}, ${2:x}, ${3:lo=0}, ${4:hi=len}, ${5:a})
	
# bisect_right() from the bisect module
snippet bisect_right
	bisect_right(${1:a}, ${2:x}, ${3:lo=0}, ${4:hi=len}, ${5:a})
	
# insort() from the bisect module
snippet insort
	insort(${1:a}, ${2:x}, ${3:lo=0}, ${4:hi=len}, ${5:a})
	
# insort_left() from the bisect module
snippet insort_left
	insort_left(${1:a}, ${2:x}, ${3:lo=0}, ${4:hi=len}, ${5:a})
	
# insort_right() from the bisect module
snippet insort_right
	insort_right(${1:a,})
	
# BZ2Compressor from the bz2 module
snippet BZ2Compressor
	BZ2Compressor(${1:compresslevel=9})
	
# BZ2Decompressor from the bz2 module
snippet BZ2Decompressor
	BZ2Decompressor
	
# BZ2File from the bz2 module
snippet BZ2File
	BZ2File(${1:filename}, ${2:mode='r'}, ${3:buffering=None}, ${4:compresslevel=9})
	
# compress() from the bz2 module
snippet compress
	compress(${1:data}, ${2:compresslevel=9})
	
# decompress() from the bz2 module
snippet decompress
	decompress(${1:data})
	
# open() from the bz2 module
snippet open
	open(${1:filename,})
	
# Calendar from the calendar module
snippet Calendar
	Calendar(${1:firstweekday=0})
	
# HTMLCalendar from the calendar module
snippet HTMLCalendar
	HTMLCalendar(${1:firstweekday=0})
	
# LocaleHTMLCalendar from the calendar module
snippet LocaleHTMLCalendar
	LocaleHTMLCalendar(${1:firstweekday=0}, ${2:locale=None})
	
# LocaleTextCalendar from the calendar module
snippet LocaleTextCalendar
	LocaleTextCalendar(${1:firstweekday=0}, ${2:locale=None})
	
# TextCalendar from the calendar module
snippet TextCalendar
	TextCalendar(${1:firstweekday=0})
	
# calendar() from the calendar module
snippet calendar
	calendar(${1:year}, ${2:w=2}, ${3:l=1}, ${4:c=6}, ${5:m=3})
	
# day_abbr() from the calendar module
snippet day_abbr
	day_abbr()
	
# day_name() from the calendar module
snippet day_name
	day_name()
	
# firstweekday() from the calendar module
snippet firstweekday
	firstweekday(${1:})
	
# isleap() from the calendar module
snippet isleap
	isleap(${1:year})
	
# leapdays() from the calendar module
snippet leapdays
	leapdays(${1:y1}, ${2:y2})
	
# month() from the calendar module
snippet month
	month(${1:theyear}, ${2:themonth}, ${3:w=0}, ${4:l=0})
	
# month_abbr() from the calendar module
snippet month_abbr
	month_abbr()
	
# month_name() from the calendar module
snippet month_name
	month_name()
	
# monthcalendar() from the calendar module
snippet monthcalendar
	monthcalendar(${1:year}, ${2:month})
	
# monthrange() from the calendar module
snippet monthrange
	monthrange(${1:year}, ${2:month})
	
# prcal() from the calendar module
snippet prcal
	prcal(${1:year}, ${2:w=0}, ${3:l=0}, ${4:c=6}, ${5:m=3})
	
# prmonth() from the calendar module
snippet prmonth
	prmonth(${1:theyear}, ${2:themonth}, ${3:w=0}, ${4:l=0})
	
# setfirstweekday() from the calendar module
snippet setfirstweekday
	setfirstweekday(${1:weekday})
	
# timegm() from the calendar module
snippet timegm
	timegm(${1:tuple})
	
# weekday() from the calendar module
snippet weekday
	weekday(${1:year}, ${2:month}, ${3:day})
	
# weekheader() from the calendar module
snippet weekheader
	weekheader(${1:n})
	
# escape() from the cgi module
snippet escape
	escape(${1:s}, ${2:quote=False})
	
# getfirst() from the cgi module
snippet getfirst
	getfirst(${1:name}, ${2:default=None})
	
# getlist() from the cgi module
snippet getlist
	getlist(${1:name})
	
# parse() from the cgi module
snippet parse
	parse(${1:fp=None}, ${2:environ=os.environ}, ${3:keep_blank_values=False}, ${4:strict_parsing=False})
	
# parse_header() from the cgi module
snippet parse_header
	parse_header(${1:string})
	
# parse_multipart() from the cgi module
snippet parse_multipart
	parse_multipart(${1:fp}, ${2:pdict})
	
# parse_qs() from the cgi module
snippet parse_qs
	parse_qs(${1:qs}, ${2:keep_blank_values=False}, ${3:strict_parsing=False})
	
# parse_qsl() from the cgi module
snippet parse_qsl
	parse_qsl(${1:qs}, ${2:keep_blank_values=False}, ${3:strict_parsing=False})
	
# print_directory() from the cgi module
snippet print_directory
	print_directory(${1:})
	
# print_environ() from the cgi module
snippet print_environ
	print_environ(${1:})
	
# print_environ_usage() from the cgi module
snippet print_environ_usage
	print_environ_usage(${1:})
	
# print_form() from the cgi module
snippet print_form
	print_form(${1:form})
	
# test() from the cgi module
snippet test
	test(${1:})
	
# enable() from the cgitb module
snippet enable
	enable(${1:display=1}, ${2:logdir=None}, ${3:context=5}, ${4:format="html"})
	
# handler() from the cgitb module
snippet handler
	handler(${1:info=None})
	
# Chunk from the chunk module
snippet Chunk
	Chunk(${1:file,})
	
# acos() from the cmath module
snippet acos
	acos(${1:x})
	
# acosh() from the cmath module
snippet acosh
	acosh(${1:x})
	
# asin() from the cmath module
snippet asin
	asin(${1:x})
	
# asinh() from the cmath module
snippet asinh
	asinh(${1:x})
	
# atan() from the cmath module
snippet atan
	atan(${1:x})
	
# atanh() from the cmath module
snippet atanh
	atanh(${1:x})
	
# cos() from the cmath module
snippet cos
	cos(${1:x})
	
# cosh() from the cmath module
snippet cosh
	cosh(${1:x})
	
# e() from the cmath module
snippet e
	e()
	
# exp() from the cmath module
snippet exp
	exp(${1:x})
	
# isclose() from the cmath module
snippet isclose
	isclose(${1:a}, ${2:b}, ${3:*}, ${4:rel_tol=1e-09}, ${5:abs_tol=0.0})
	
# isfinite() from the cmath module
snippet isfinite
	isfinite(${1:x})
	
# isinf() from the cmath module
snippet isinf
	isinf(${1:x})
	
# isnan() from the cmath module
snippet isnan
	isnan(${1:x})
	
# log10() from the cmath module
snippet log10
	log10(${1:x})
	
# log() from the cmath module
snippet log
	log(${1:x[}, ${2:base]})
	
# phase() from the cmath module
snippet phase
	phase(${1:x})
	
# pi() from the cmath module
snippet pi
	pi()
	
# polar() from the cmath module
snippet polar
	polar(${1:x})
	
# rect() from the cmath module
snippet rect
	rect(${1:r}, ${2:phi})
	
# sin() from the cmath module
snippet sin
	sin(${1:x})
	
# sinh() from the cmath module
snippet sinh
	sinh(${1:x})
	
# sqrt() from the cmath module
snippet sqrt
	sqrt(${1:x})
	
# tan() from the cmath module
snippet tan
	tan(${1:x})
	
# tanh() from the cmath module
snippet tanh
	tanh(${1:x})
	
# Cmd from the cmd module
snippet Cmd
	Cmd(${1:completekey='tab'}, ${2:stdin=None}, ${3:stdout=None})
	
# cmdloop() from the cmd module
snippet cmdloop
	cmdloop(${1:intro=None})
	
# cmdqueue() from the cmd module
snippet cmdqueue
	cmdqueue()
	
# completedefault() from the cmd module
snippet completedefault
	completedefault(${1:text}, ${2:line}, ${3:begidx}, ${4:endidx})
	
# default() from the cmd module
snippet default
	default(${1:line})
	
# doc_header() from the cmd module
snippet doc_header
	doc_header()
	
# emptyline() from the cmd module
snippet emptyline
	emptyline(${1:})
	
# identchars() from the cmd module
snippet identchars
	identchars()
	
# intro() from the cmd module
snippet intro
	intro()
	
# lastcmd() from the cmd module
snippet lastcmd
	lastcmd()
	
# misc_header() from the cmd module
snippet misc_header
	misc_header()
	
# onecmd() from the cmd module
snippet onecmd
	onecmd(${1:str})
	
# postcmd() from the cmd module
snippet postcmd
	postcmd(${1:stop}, ${2:line})
	
# postloop() from the cmd module
snippet postloop
	postloop(${1:})
	
# precmd() from the cmd module
snippet precmd
	precmd(${1:line})
	
# preloop() from the cmd module
snippet preloop
	preloop(${1:})
	
# prompt() from the cmd module
snippet prompt
	prompt()
	
# ruler() from the cmd module
snippet ruler
	ruler()
	
# undoc_header() from the cmd module
snippet undoc_header
	undoc_header()
	
# use_rawinput() from the cmd module
snippet use_rawinput
	use_rawinput()
	
# InteractiveConsole from the code module
snippet InteractiveConsole
	InteractiveConsole(${1:locals=None}, ${2:filename=""})
	
# InteractiveInterpreter from the code module
snippet InteractiveInterpreter
	InteractiveInterpreter(${1:locals=None})
	
# compile_command() from the code module
snippet compile_command
	compile_command(${1:source}, ${2:filename=""}, ${3:symbol="single"})
	
# interact() from the code module
snippet interact
	interact(${1:banner=None})
	
# push() from the code module
snippet push
	push(${1:line})
	
# raw_input() from the code module
snippet raw_input
	raw_input(${1:prompt=""})
	
# resetbuffer() from the code module
snippet resetbuffer
	resetbuffer(${1:})
	
# runcode() from the code module
snippet runcode
	runcode(${1:code})
	
# runsource() from the code module
snippet runsource
	runsource(${1:source}, ${2:filename=""}, ${3:symbol="single"})
	
# showsyntaxerror() from the code module
snippet showsyntaxerror
	showsyntaxerror(${1:filename=None})
	
# showtraceback() from the code module
snippet showtraceback
	showtraceback(${1:})
	
# write() from the code module
snippet write
	write(${1:data})
	
# BOM from the codecs module
snippet BOM
	BOM
	
# BOM_BE from the codecs module
snippet BOM_BE
	BOM_BE
	
# BOM_LE from the codecs module
snippet BOM_LE
	BOM_LE
	
# BOM_UTF16 from the codecs module
snippet BOM_UTF16
	BOM_UTF16
	
# BOM_UTF16_BE from the codecs module
snippet BOM_UTF16_BE
	BOM_UTF16_BE
	
# BOM_UTF16_LE from the codecs module
snippet BOM_UTF16_LE
	BOM_UTF16_LE
	
# BOM_UTF32 from the codecs module
snippet BOM_UTF32
	BOM_UTF32
	
# BOM_UTF32_BE from the codecs module
snippet BOM_UTF32_BE
	BOM_UTF32_BE
	
# BOM_UTF32_LE from the codecs module
snippet BOM_UTF32_LE
	BOM_UTF32_LE
	
# BOM_UTF8 from the codecs module
snippet BOM_UTF8
	BOM_UTF8
	
# CodecInfo from the codecs module
snippet CodecInfo
	CodecInfo(${1:encode}, ${2:decode}, ${3:streamreader=None}, ${4:streamwriter=None}, ${5:incrementalencoder=None}, ${6:incrementaldecoder=None}, ${7:name=None})
	
# EncodedFile from the codecs module
snippet EncodedFile
	EncodedFile(${1:file}, ${2:data_encoding}, ${3:file_encoding=None}, ${4:errors='strict'})
	
# IncrementalDecoder from the codecs module
snippet IncrementalDecoder
	IncrementalDecoder(${1:errors='strict'})
	
# IncrementalEncoder from the codecs module
snippet IncrementalEncoder
	IncrementalEncoder(${1:errors='strict'})
	
# StreamReader from the codecs module
snippet StreamReader
	StreamReader(${1:stream}, ${2:errors='strict'})
	
# StreamReaderWriter from the codecs module
snippet StreamReaderWriter
	StreamReaderWriter(${1:stream}, ${2:Reader}, ${3:Writer}, ${4:errors})
	
# StreamRecoder from the codecs module
snippet StreamRecoder
	StreamRecoder(${1:stream}, ${2:encode}, ${3:decode}, ${4:Reader}, ${5:Writer}, ${6:errors})
	
# StreamWriter from the codecs module
snippet StreamWriter
	StreamWriter(${1:stream}, ${2:errors='strict'})
	
# ToASCII from the codecs module
snippet ToASCII
	ToASCII(${1:label})
	
# ToUnicode from the codecs module
snippet ToUnicode
	ToUnicode(${1:label})
	
# backslashreplace_errors() from the codecs module
snippet backslashreplace_errors
	backslashreplace_errors(${1:exception})
	
# decode() from the codecs module
snippet decode
	decode(${1:obj}, ${2:encoding='utf-8'}, ${3:errors='strict'})
	
# encode() from the codecs module
snippet encode
	encode(${1:obj}, ${2:encoding='utf-8'}, ${3:errors='strict'})
	
# getdecoder() from the codecs module
snippet getdecoder
	getdecoder(${1:encoding})
	
# getencoder() from the codecs module
snippet getencoder
	getencoder(${1:encoding})
	
# getincrementaldecoder() from the codecs module
snippet getincrementaldecoder
	getincrementaldecoder(${1:encoding})
	
# getincrementalencoder() from the codecs module
snippet getincrementalencoder
	getincrementalencoder(${1:encoding})
	
# getreader() from the codecs module
snippet getreader
	getreader(${1:encoding})
	
# getstate() from the codecs module
snippet getstate
	getstate(${1:})
	
# getwriter() from the codecs module
snippet getwriter
	getwriter(${1:encoding})
	
# ignore_errors() from the codecs module
snippet ignore_errors
	ignore_errors(${1:exception})
	
# iterdecode() from the codecs module
snippet iterdecode
	iterdecode(${1:iterator}, ${2:encoding}, ${3:errors='strict'}, ${4:**kwargs})
	
# iterencode() from the codecs module
snippet iterencode
	iterencode(${1:iterator}, ${2:encoding}, ${3:errors='strict'}, ${4:**kwargs})
	
# lookup() from the codecs module
snippet lookup
	lookup(${1:encoding})
	
# lookup_error() from the codecs module
snippet lookup_error
	lookup_error(${1:name})
	
# nameprep() from the codecs module
snippet nameprep
	nameprep(${1:label})
	
# namereplace_errors() from the codecs module
snippet namereplace_errors
	namereplace_errors(${1:exception})
	
# open() from the codecs module
snippet open
	open(${1:filename}, ${2:mode='r'}, ${3:encoding=None}, ${4:errors='strict'}, ${5:buffering=1})
	
# register() from the codecs module
snippet register
	register(${1:search_function})
	
# register_error() from the codecs module
snippet register_error
	register_error(${1:name}, ${2:error_handler})
	
# replace_errors() from the codecs module
snippet replace_errors
	replace_errors(${1:exception})
	
# setstate() from the codecs module
snippet setstate
	setstate(${1:state})
	
# strict_errors() from the codecs module
snippet strict_errors
	strict_errors(${1:exception})
	
# xmlcharrefreplace_errors() from the codecs module
snippet xmlcharrefreplace_errors
	xmlcharrefreplace_errors(${1:exception})
	
# CommandCompiler from the codeop module
snippet CommandCompiler
	CommandCompiler
	
# Compile from the codeop module
snippet Compile
	Compile
	
# compile_command() from the codeop module
snippet compile_command
	compile_command(${1:source,})
	
# ChainMap from the collections module
snippet ChainMap
	ChainMap(${1:*maps})
	
# Counter from the collections module
snippet Counter
	Counter(${1:[iterable-or-mapping]})
	
# OrderedDict from the collections module
snippet OrderedDict
	OrderedDict(${1:[items]})
	
# UserDict from the collections module
snippet UserDict
	UserDict(${1:[initialdata]})
	
# UserList from the collections module
snippet UserList
	UserList(${1:[list]})
	
# UserString from the collections module
snippet UserString
	UserString(${1:[sequence]})
	
# _asdict() from the collections module
snippet _asdict
	_asdict(${1:})
	
# _fields() from the collections module
snippet _fields
	_fields()
	
# _make() from the collections module
snippet _make
	_make(${1:iterable})
	
# _replace() from the collections module
snippet _replace
	_replace(${1:kwargs})
	
# _source() from the collections module
snippet _source
	_source()
	
# defaultdict() from the collections module
snippet defaultdict
	defaultdict(${1:[default_factory[}, ${2:...]]})
	
# deque() from the collections module
snippet deque
	deque(${1:[iterable[}, ${2:maxlen]]})
	
# namedtuple() from the collections module
snippet namedtuple
	namedtuple(${1:typename,})
	
# AsyncIterable from the collections.abc module
snippet AsyncIterable
	AsyncIterable
	
# AsyncIterator from the collections.abc module
snippet AsyncIterator
	AsyncIterator
	
# Awaitable from the collections.abc module
snippet Awaitable
	Awaitable
	
# Callable from the collections.abc module
snippet Callable
	Callable
	
# Container from the collections.abc module
snippet Container
	Container
	
# Coroutine from the collections.abc module
snippet Coroutine
	Coroutine
	
# Generator from the collections.abc module
snippet Generator
	Generator
	
# Hashable from the collections.abc module
snippet Hashable
	Hashable
	
# ItemsView from the collections.abc module
snippet ItemsView
	ItemsView
	
# Iterable from the collections.abc module
snippet Iterable
	Iterable
	
# Iterator from the collections.abc module
snippet Iterator
	Iterator
	
# KeysView from the collections.abc module
snippet KeysView
	KeysView
	
# Mapping from the collections.abc module
snippet Mapping
	Mapping
	
# MappingView from the collections.abc module
snippet MappingView
	MappingView
	
# MutableMapping from the collections.abc module
snippet MutableMapping
	MutableMapping
	
# MutableSequence from the collections.abc module
snippet MutableSequence
	MutableSequence
	
# MutableSet from the collections.abc module
snippet MutableSet
	MutableSet
	
# Sequence from the collections.abc module
snippet Sequence
	Sequence
	
# Set from the collections.abc module
snippet Set
	Set
	
# Sized from the collections.abc module
snippet Sized
	Sized
	
# ValuesView from the collections.abc module
snippet ValuesView
	ValuesView
	
# hls_to_rgb() from the colorsys module
snippet hls_to_rgb
	hls_to_rgb(${1:h}, ${2:l}, ${3:s})
	
# hsv_to_rgb() from the colorsys module
snippet hsv_to_rgb
	hsv_to_rgb(${1:h}, ${2:s}, ${3:v})
	
# rgb_to_hls() from the colorsys module
snippet rgb_to_hls
	rgb_to_hls(${1:r}, ${2:g}, ${3:b})
	
# rgb_to_hsv() from the colorsys module
snippet rgb_to_hsv
	rgb_to_hsv(${1:r}, ${2:g}, ${3:b})
	
# rgb_to_yiq() from the colorsys module
snippet rgb_to_yiq
	rgb_to_yiq(${1:r}, ${2:g}, ${3:b})
	
# yiq_to_rgb() from the colorsys module
snippet yiq_to_rgb
	yiq_to_rgb(${1:y,})
	
# compile_dir() from the compileall module
snippet compile_dir
	compile_dir(${1:dir}, ${2:maxlevels=10}, ${3:ddir=None}, ${4:force=False}, ${5:rx=None}, ${6:quiet=0}, ${7:legacy=False}, ${8:optimize=-1}, ${9:workers=1})
	
# compile_file() from the compileall module
snippet compile_file
	compile_file(${1:fullname}, ${2:ddir=None}, ${3:force=False}, ${4:rx=None}, ${5:quiet=0}, ${6:legacy=False}, ${7:optimize=-1})
	
# compile_path() from the compileall module
snippet compile_path
	compile_path(${1:skip_curdir=True,})
	
# BrokenProcessPool from the concurrent.futures module
snippet BrokenProcessPool
	BrokenProcessPool
	
# CancelledError from the concurrent.futures module
snippet CancelledError
	CancelledError
	
# Executor from the concurrent.futures module
snippet Executor
	Executor
	
# Future from the concurrent.futures module
snippet Future
	Future
	
# ProcessPoolExecutor from the concurrent.futures module
snippet ProcessPoolExecutor
	ProcessPoolExecutor(${1:max_workers=None})
	
# ThreadPoolExecutor from the concurrent.futures module
snippet ThreadPoolExecutor
	ThreadPoolExecutor(${1:max_workers=None})
	
# TimeoutError from the concurrent.futures module
snippet TimeoutError
	TimeoutError
	
# as_completed() from the concurrent.futures module
snippet as_completed
	as_completed(${1:fs}, ${2:timeout=None})
	
# wait() from the concurrent.futures module
snippet wait
	wait(${1:fs,})
	
# BOOLEAN_STATES from the configparser module
snippet BOOLEAN_STATES
	BOOLEAN_STATES
	
# BasicInterpolation from the configparser module
snippet BasicInterpolation
	BasicInterpolation
	
# ConfigParser from the configparser module
snippet ConfigParser
	ConfigParser(${1:defaults=None}, ${2:dict_type=collections.OrderedDict}, ${3:allow_no_value=False}, ${4:delimiters=}, ${5:'='}, ${6:':'})
	
# DuplicateOptionError from the configparser module
snippet DuplicateOptionError
	DuplicateOptionError
	
# DuplicateSectionError from the configparser module
snippet DuplicateSectionError
	DuplicateSectionError
	
# Error from the configparser module
snippet Error
	Error
	
# ExtendedInterpolation from the configparser module
snippet ExtendedInterpolation
	ExtendedInterpolation
	
# InterpolationDepthError from the configparser module
snippet InterpolationDepthError
	InterpolationDepthError
	
# InterpolationError from the configparser module
snippet InterpolationError
	InterpolationError
	
# InterpolationMissingOptionError from the configparser module
snippet InterpolationMissingOptionError
	InterpolationMissingOptionError
	
# InterpolationSyntaxError from the configparser module
snippet InterpolationSyntaxError
	InterpolationSyntaxError
	
# MAX_INTERPOLATION_DEPTH from the configparser module
snippet MAX_INTERPOLATION_DEPTH
	MAX_INTERPOLATION_DEPTH
	
# MissingSectionHeaderError from the configparser module
snippet MissingSectionHeaderError
	MissingSectionHeaderError
	
# NoOptionError from the configparser module
snippet NoOptionError
	NoOptionError
	
# NoSectionError from the configparser module
snippet NoSectionError
	NoSectionError
	
# ParsingError from the configparser module
snippet ParsingError
	ParsingError
	
# RawConfigParser from the configparser module
snippet RawConfigParser
	RawConfigParser(${1:defaults=None}, ${2:dict_type=collections.OrderedDict}, ${3:allow_no_value=False}, ${4:*}, ${5:delimiters=}, ${6:'='}, ${7:':'})
	
# SECTCRE from the configparser module
snippet SECTCRE
	SECTCRE
	
# optionxform() from the configparser module
snippet optionxform
	optionxform(${1:option})
	
# ContextDecorator from the contextlib module
snippet ContextDecorator
	ContextDecorator
	
# ExitStack from the contextlib module
snippet ExitStack
	ExitStack
	
# closing() from the contextlib module
snippet closing
	closing(${1:thing})
	
# contextmanager() from the contextlib module
snippet contextmanager
	contextmanager()
	
# redirect_stderr() from the contextlib module
snippet redirect_stderr
	redirect_stderr(${1:new_target})
	
# redirect_stdout() from the contextlib module
snippet redirect_stdout
	redirect_stdout(${1:new_target})
	
# suppress() from the contextlib module
snippet suppress
	suppress(${1:*exceptions})
	
# copy() from the copy module
snippet copy
	copy(${1:x})
	
# deepcopy() from the copy module
snippet deepcopy
	deepcopy(${1:x})
	
# error() from the copy module
snippet error
	error()
	
# constructor() from the copyreg module
snippet constructor
	constructor(${1:object})
	
# pickle() from the copyreg module
snippet pickle
	pickle(${1:type,})
	
# constructor() from the cProfile module
snippet constructor
	constructor(${1:object})
	
# pickle() from the cProfile module
snippet pickle
	pickle(${1:type,})
	
# METHOD_CRYPT from the crypt module
snippet METHOD_CRYPT
	METHOD_CRYPT
	
# METHOD_MD5 from the crypt module
snippet METHOD_MD5
	METHOD_MD5
	
# METHOD_SHA256 from the crypt module
snippet METHOD_SHA256
	METHOD_SHA256
	
# METHOD_SHA512 from the crypt module
snippet METHOD_SHA512
	METHOD_SHA512
	
# crypt() from the crypt module
snippet crypt
	crypt(${1:word}, ${2:salt=None})
	
# methods() from the crypt module
snippet methods
	methods()
	
# mksalt() from the crypt module
snippet mksalt
	mksalt(${1:method=None})
	
# Dialect from the csv module
snippet Dialect
	Dialect
	
# DictReader from the csv module
snippet DictReader
	DictReader(${1:csvfile}, ${2:fieldnames=None}, ${3:restkey=None}, ${4:restval=None}, ${5:dialect='excel'}, ${6:*args}, ${7:**kwds})
	
# DictWriter from the csv module
snippet DictWriter
	DictWriter(${1:csvfile}, ${2:fieldnames}, ${3:restval=''}, ${4:extrasaction='raise'}, ${5:dialect='excel'}, ${6:*args}, ${7:**kwds})
	
# Error from the csv module
snippet Error
	Error
	
# QUOTE_ALL from the csv module
snippet QUOTE_ALL
	QUOTE_ALL
	
# QUOTE_MINIMAL from the csv module
snippet QUOTE_MINIMAL
	QUOTE_MINIMAL
	
# QUOTE_NONE from the csv module
snippet QUOTE_NONE
	QUOTE_NONE
	
# QUOTE_NONNUMERIC from the csv module
snippet QUOTE_NONNUMERIC
	QUOTE_NONNUMERIC
	
# Sniffer from the csv module
snippet Sniffer
	Sniffer
	
# __next__() from the csv module
snippet __next__
	__next__(${1:})
	
# delimiter() from the csv module
snippet delimiter
	delimiter()
	
# dialect() from the csv module
snippet dialect
	dialect()
	
# doublequote() from the csv module
snippet doublequote
	doublequote()
	
# escapechar() from the csv module
snippet escapechar
	escapechar()
	
# excel() from the csv module
snippet excel
	excel()
	
# excel_tab() from the csv module
snippet excel_tab
	excel_tab()
	
# field_size_limit() from the csv module
snippet field_size_limit
	field_size_limit(${1:[new_limit]})
	
# fieldnames() from the csv module
snippet fieldnames
	fieldnames()
	
# get_dialect() from the csv module
snippet get_dialect
	get_dialect(${1:name})
	
# line_num() from the csv module
snippet line_num
	line_num()
	
# lineterminator() from the csv module
snippet lineterminator
	lineterminator()
	
# list_dialects() from the csv module
snippet list_dialects
	list_dialects(${1:})
	
# quotechar() from the csv module
snippet quotechar
	quotechar()
	
# quoting() from the csv module
snippet quoting
	quoting()
	
# reader() from the csv module
snippet reader
	reader(${1:csvfile}, ${2:dialect='excel'}, ${3:**fmtparams})
	
# register_dialect() from the csv module
snippet register_dialect
	register_dialect(${1:name[}, ${2:dialect[}, ${3:**fmtparams]]})
	
# skipinitialspace() from the csv module
snippet skipinitialspace
	skipinitialspace()
	
# strict() from the csv module
snippet strict
	strict()
	
# unix_dialect() from the csv module
snippet unix_dialect
	unix_dialect()
	
# unregister_dialect() from the csv module
snippet unregister_dialect
	unregister_dialect(${1:name})
	
# writeheader() from the csv module
snippet writeheader
	writeheader(${1:})
	
# writer() from the csv module
snippet writer
	writer(${1:csvfile}, ${2:dialect='excel'}, ${3:**fmtparams})
	
# writerow() from the csv module
snippet writerow
	writerow(${1:row})
	
# writerows() from the csv module
snippet writerows
	writerows(${1:rows})
	
# ArgumentError from the ctypes module
snippet ArgumentError
	ArgumentError
	
# Array from the ctypes module
snippet Array
	Array(${1:*args})
	
# BigEndianStructure from the ctypes module
snippet BigEndianStructure
	BigEndianStructure(${1:*args}, ${2:**kw})
	
# CDLL from the ctypes module
snippet CDLL
	CDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None}, ${4:use_errno=False}, ${5:use_last_error=False})
	
# CFUNCTYPE from the ctypes module
snippet CFUNCTYPE
	CFUNCTYPE(${1:restype}, ${2:*argtypes}, ${3:use_errno=False}, ${4:use_last_error=False})
	
# DllCanUnloadNow from the ctypes module
snippet DllCanUnloadNow
	DllCanUnloadNow(${1:})
	
# DllGetClassObject from the ctypes module
snippet DllGetClassObject
	DllGetClassObject(${1:})
	
# FormatError from the ctypes module
snippet FormatError
	FormatError(${1:[code]})
	
# GetLastError from the ctypes module
snippet GetLastError
	GetLastError(${1:})
	
# HRESULT from the ctypes module
snippet HRESULT
	HRESULT
	
# LibraryLoader from the ctypes module
snippet LibraryLoader
	LibraryLoader(${1:dlltype})
	
# LittleEndianStructure from the ctypes module
snippet LittleEndianStructure
	LittleEndianStructure(${1:*args}, ${2:**kw})
	
# OleDLL from the ctypes module
snippet OleDLL
	OleDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None}, ${4:use_errno=False}, ${5:use_last_error=False})
	
# POINTER from the ctypes module
snippet POINTER
	POINTER(${1:type})
	
# PYFUNCTYPE from the ctypes module
snippet PYFUNCTYPE
	PYFUNCTYPE(${1:restype}, ${2:*argtypes})
	
# PyDLL from the ctypes module
snippet PyDLL
	PyDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None})
	
# RTLD_GLOBAL Flag to use as mode parameter.  On platforms where this flag is not available from the ctypes module
snippet RTLD_GLOBAL
	RTLD_GLOBAL
	
# Structure from the ctypes module
snippet Structure
	Structure(${1:*args}, ${2:**kw})
	
# Union from the ctypes module
snippet Union
	Union(${1:*args}, ${2:**kw})
	
# WINFUNCTYPE from the ctypes module
snippet WINFUNCTYPE
	WINFUNCTYPE(${1:restype}, ${2:*argtypes}, ${3:use_errno=False}, ${4:use_last_error=False})
	
# WinDLL from the ctypes module
snippet WinDLL
	WinDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None}, ${4:use_errno=False}, ${5:use_last_error=False})
	
# WinError from the ctypes module
snippet WinError
	WinError(${1:code=None}, ${2:descr=None})
	
# _CData() from the ctypes module
snippet _CData
	_CData()
	
# _FuncPtr() from the ctypes module
snippet _FuncPtr
	_FuncPtr()
	
# _Pointer() from the ctypes module
snippet _Pointer
	_Pointer()
	
# _SimpleCData() from the ctypes module
snippet _SimpleCData
	_SimpleCData()
	
# _name() from the ctypes module
snippet _name
	_name()
	
# addressof() from the ctypes module
snippet addressof
	addressof(${1:obj})
	
# alignment() from the ctypes module
snippet alignment
	alignment(${1:obj_or_type})
	
# byref() from the ctypes module
snippet byref
	byref(${1:obj[}, ${2:offset]})
	
# c_bool() from the ctypes module
snippet c_bool
	c_bool()
	
# c_byte() from the ctypes module
snippet c_byte
	c_byte()
	
# c_char() from the ctypes module
snippet c_char
	c_char()
	
# c_char_p() from the ctypes module
snippet c_char_p
	c_char_p()
	
# c_double() from the ctypes module
snippet c_double
	c_double()
	
# c_float() from the ctypes module
snippet c_float
	c_float()
	
# c_int16() from the ctypes module
snippet c_int16
	c_int16()
	
# c_int32() from the ctypes module
snippet c_int32
	c_int32()
	
# c_int64() from the ctypes module
snippet c_int64
	c_int64()
	
# c_int8() from the ctypes module
snippet c_int8
	c_int8()
	
# c_int() from the ctypes module
snippet c_int
	c_int()
	
# c_long() from the ctypes module
snippet c_long
	c_long()
	
# c_longdouble() from the ctypes module
snippet c_longdouble
	c_longdouble()
	
# c_longlong() from the ctypes module
snippet c_longlong
	c_longlong()
	
# c_short() from the ctypes module
snippet c_short
	c_short()
	
# c_size_t() from the ctypes module
snippet c_size_t
	c_size_t()
	
# c_ssize_t() from the ctypes module
snippet c_ssize_t
	c_ssize_t()
	
# c_ubyte() from the ctypes module
snippet c_ubyte
	c_ubyte()
	
# c_uint16() from the ctypes module
snippet c_uint16
	c_uint16()
	
# c_uint32() from the ctypes module
snippet c_uint32
	c_uint32()
	
# c_uint64() from the ctypes module
snippet c_uint64
	c_uint64()
	
# c_uint8() from the ctypes module
snippet c_uint8
	c_uint8()
	
# c_uint() from the ctypes module
snippet c_uint
	c_uint()
	
# c_ulong() from the ctypes module
snippet c_ulong
	c_ulong()
	
# c_ulonglong() from the ctypes module
snippet c_ulonglong
	c_ulonglong()
	
# c_ushort() from the ctypes module
snippet c_ushort
	c_ushort()
	
# c_void_p() from the ctypes module
snippet c_void_p
	c_void_p()
	
# c_wchar() from the ctypes module
snippet c_wchar
	c_wchar()
	
# c_wchar_p() from the ctypes module
snippet c_wchar_p
	c_wchar_p()
	
# cast() from the ctypes module
snippet cast
	cast(${1:obj}, ${2:type})
	
# cdll Creates () from the ctypes module
snippet cdll Creates 
	cdll Creates ()
	
# create_string_buffer() from the ctypes module
snippet create_string_buffer
	create_string_buffer(${1:init_or_size}, ${2:size=None})
	
# create_unicode_buffer() from the ctypes module
snippet create_unicode_buffer
	create_unicode_buffer(${1:init_or_size}, ${2:size=None})
	
# find_library() from the ctypes module
snippet find_library
	find_library(${1:name})
	
# find_msvcrt() from the ctypes module
snippet find_msvcrt
	find_msvcrt(${1:})
	
# get_errno() from the ctypes module
snippet get_errno
	get_errno(${1:})
	
# get_last_error() from the ctypes module
snippet get_last_error
	get_last_error(${1:})
	
# memmove() from the ctypes module
snippet memmove
	memmove(${1:dst}, ${2:src}, ${3:count})
	
# memset() from the ctypes module
snippet memset
	memset(${1:dst}, ${2:c}, ${3:count})
	
# oledll Windows only: Creates () from the ctypes module
snippet oledll Windows only; Creates 
	oledll Windows only: Creates ()
	
# pointer() from the ctypes module
snippet pointer
	pointer(${1:obj})
	
# py_object() from the ctypes module
snippet py_object
	py_object()
	
# pydll Creates () from the ctypes module
snippet pydll Creates 
	pydll Creates ()
	
# pythonapi An instance of () from the ctypes module
snippet pythonapi An instance of 
	pythonapi An instance of ()
	
# resize() from the ctypes module
snippet resize
	resize(${1:obj}, ${2:size})
	
# set_errno() from the ctypes module
snippet set_errno
	set_errno(${1:value})
	
# set_last_error() from the ctypes module
snippet set_last_error
	set_last_error(${1:value})
	
# sizeof() from the ctypes module
snippet sizeof
	sizeof(${1:obj_or_type})
	
# string_at() from the ctypes module
snippet string_at
	string_at(${1:address}, ${2:size=-1})
	
# windll Windows only: Creates () from the ctypes module
snippet windll Windows only; Creates 
	windll Windows only: Creates ()
	
# wstring_at() from the ctypes module
snippet wstring_at
	wstring_at(${1:address,})
	
# ERR from the curses module
snippet ERR
	ERR
	
# OK from the curses module
snippet OK
	OK
	
# Textbox from the curses module
snippet Textbox
	Textbox(${1:win})
	
# addch() from the curses module
snippet addch
	addch(${1:y}, ${2:x}, ${3:ch[}, ${4:attr]})
	
# addnstr() from the curses module
snippet addnstr
	addnstr(${1:y}, ${2:x}, ${3:str}, ${4:n[}, ${5:attr]})
	
# addstr() from the curses module
snippet addstr
	addstr(${1:y}, ${2:x}, ${3:str[}, ${4:attr]})
	
# attron() from the curses module
snippet attron
	attron(${1:attr})
	
# attrset() from the curses module
snippet attrset
	attrset(${1:attr})
	
# baudrate() from the curses module
snippet baudrate
	baudrate(${1:})
	
# beep() from the curses module
snippet beep
	beep(${1:})
	
# bkgd() from the curses module
snippet bkgd
	bkgd(${1:ch[}, ${2:attr]})
	
# bkgdset() from the curses module
snippet bkgdset
	bkgdset(${1:ch[}, ${2:attr]})
	
# border() from the curses module
snippet border
	border(${1:[ls[}, ${2:rs[}, ${3:ts[}, ${4:bs[}, ${5:tl[}, ${6:tr[}, ${7:bl[}, ${8:br]]]]]]]]})
	
# box() from the curses module
snippet box
	box(${1:[vertch}, ${2:horch]})
	
# can_change_color() from the curses module
snippet can_change_color
	can_change_color(${1:})
	
# cbreak() from the curses module
snippet cbreak
	cbreak(${1:})
	
# chgat() from the curses module
snippet chgat
	chgat(${1:num}, ${2:attr})
	
# clear() from the curses module
snippet clear
	clear(${1:})
	
# clearok() from the curses module
snippet clearok
	clearok(${1:yes})
	
# clrtobot() from the curses module
snippet clrtobot
	clrtobot(${1:})
	
# clrtoeol() from the curses module
snippet clrtoeol
	clrtoeol(${1:})
	
# color_content() from the curses module
snippet color_content
	color_content(${1:color_number})
	
# color_pair() from the curses module
snippet color_pair
	color_pair(${1:color_number})
	
# curs_set() from the curses module
snippet curs_set
	curs_set(${1:visibility})
	
# cursyncup() from the curses module
snippet cursyncup
	cursyncup(${1:})
	
# def_prog_mode() from the curses module
snippet def_prog_mode
	def_prog_mode(${1:})
	
# def_shell_mode() from the curses module
snippet def_shell_mode
	def_shell_mode(${1:})
	
# delay_output() from the curses module
snippet delay_output
	delay_output(${1:ms})
	
# delch() from the curses module
snippet delch
	delch(${1:[y}, ${2:x]})
	
# deleteln() from the curses module
snippet deleteln
	deleteln(${1:})
	
# derwin() from the curses module
snippet derwin
	derwin(${1:nlines}, ${2:ncols}, ${3:begin_y}, ${4:begin_x})
	
# doupdate() from the curses module
snippet doupdate
	doupdate(${1:})
	
# echo() from the curses module
snippet echo
	echo(${1:})
	
# echochar() from the curses module
snippet echochar
	echochar(${1:ch[}, ${2:attr]})
	
# enclose() from the curses module
snippet enclose
	enclose(${1:y}, ${2:x})
	
# encoding() from the curses module
snippet encoding
	encoding()
	
# endwin() from the curses module
snippet endwin
	endwin(${1:})
	
# erase() from the curses module
snippet erase
	erase(${1:})
	
# erasechar() from the curses module
snippet erasechar
	erasechar(${1:})
	
# error() from the curses module
snippet error
	error()
	
# filter() from the curses module
snippet filter
	filter(${1:})
	
# flash() from the curses module
snippet flash
	flash(${1:})
	
# flushinp() from the curses module
snippet flushinp
	flushinp(${1:})
	
# get_wch() from the curses module
snippet get_wch
	get_wch(${1:[y}, ${2:x]})
	
# getbegyx() from the curses module
snippet getbegyx
	getbegyx(${1:})
	
# getbkgd() from the curses module
snippet getbkgd
	getbkgd(${1:})
	
# getch() from the curses module
snippet getch
	getch(${1:[y}, ${2:x]})
	
# getkey() from the curses module
snippet getkey
	getkey(${1:[y}, ${2:x]})
	
# getmaxyx() from the curses module
snippet getmaxyx
	getmaxyx(${1:})
	
# getmouse() from the curses module
snippet getmouse
	getmouse(${1:})
	
# getparyx() from the curses module
snippet getparyx
	getparyx(${1:})
	
# getstr() from the curses module
snippet getstr
	getstr(${1:[y}, ${2:x]})
	
# getsyx() from the curses module
snippet getsyx
	getsyx(${1:})
	
# getwin() from the curses module
snippet getwin
	getwin(${1:file})
	
# getyx() from the curses module
snippet getyx
	getyx(${1:})
	
# halfdelay() from the curses module
snippet halfdelay
	halfdelay(${1:tenths})
	
# has_colors() from the curses module
snippet has_colors
	has_colors(${1:})
	
# has_ic() from the curses module
snippet has_ic
	has_ic(${1:})
	
# has_il() from the curses module
snippet has_il
	has_il(${1:})
	
# has_key() from the curses module
snippet has_key
	has_key(${1:ch})
	
# hline() from the curses module
snippet hline
	hline(${1:y}, ${2:x}, ${3:ch}, ${4:n})
	
# idlok() from the curses module
snippet idlok
	idlok(${1:yes})
	
# immedok() from the curses module
snippet immedok
	immedok(${1:flag})
	
# inch() from the curses module
snippet inch
	inch(${1:[y}, ${2:x]})
	
# init_color() from the curses module
snippet init_color
	init_color(${1:color_number}, ${2:r}, ${3:g}, ${4:b})
	
# init_pair() from the curses module
snippet init_pair
	init_pair(${1:pair_number}, ${2:fg}, ${3:bg})
	
# initscr() from the curses module
snippet initscr
	initscr(${1:})
	
# insch() from the curses module
snippet insch
	insch(${1:y}, ${2:x}, ${3:ch[}, ${4:attr]})
	
# insertln() from the curses module
snippet insertln
	insertln(${1:})
	
# insnstr() from the curses module
snippet insnstr
	insnstr(${1:y}, ${2:x}, ${3:str}, ${4:n[}, ${5:attr]})
	
# insstr() from the curses module
snippet insstr
	insstr(${1:y}, ${2:x}, ${3:str[}, ${4:attr]})
	
# instr() from the curses module
snippet instr
	instr(${1:y}, ${2:x[}, ${3:n]})
	
# is_linetouched() from the curses module
snippet is_linetouched
	is_linetouched(${1:line})
	
# is_term_resized() from the curses module
snippet is_term_resized
	is_term_resized(${1:nlines}, ${2:ncols})
	
# is_wintouched() from the curses module
snippet is_wintouched
	is_wintouched(${1:})
	
# isendwin() from the curses module
snippet isendwin
	isendwin(${1:})
	
# keyname() from the curses module
snippet keyname
	keyname(${1:k})
	
# keypad() from the curses module
snippet keypad
	keypad(${1:yes})
	
# killchar() from the curses module
snippet killchar
	killchar(${1:})
	
# leaveok() from the curses module
snippet leaveok
	leaveok(${1:yes})
	
# longname() from the curses module
snippet longname
	longname(${1:})
	
# meta() from the curses module
snippet meta
	meta(${1:yes})
	
# mouseinterval() from the curses module
snippet mouseinterval
	mouseinterval(${1:interval})
	
# mousemask() from the curses module
snippet mousemask
	mousemask(${1:mousemask})
	
# move() from the curses module
snippet move
	move(${1:new_y}, ${2:new_x})
	
# mvderwin() from the curses module
snippet mvderwin
	mvderwin(${1:y}, ${2:x})
	
# mvwin() from the curses module
snippet mvwin
	mvwin(${1:new_y}, ${2:new_x})
	
# napms() from the curses module
snippet napms
	napms(${1:ms})
	
# newpad() from the curses module
snippet newpad
	newpad(${1:nlines}, ${2:ncols})
	
# newwin() from the curses module
snippet newwin
	newwin(${1:nlines}, ${2:ncols})
	
# nocbreak() from the curses module
snippet nocbreak
	nocbreak(${1:})
	
# nodelay() from the curses module
snippet nodelay
	nodelay(${1:yes})
	
# noecho() from the curses module
snippet noecho
	noecho(${1:})
	
# nonl() from the curses module
snippet nonl
	nonl(${1:})
	
# noqiflush() from the curses module
snippet noqiflush
	noqiflush(${1:})
	
# noraw() from the curses module
snippet noraw
	noraw(${1:})
	
# notimeout() from the curses module
snippet notimeout
	notimeout(${1:yes})
	
# noutrefresh() from the curses module
snippet noutrefresh
	noutrefresh(${1:})
	
# overlay() from the curses module
snippet overlay
	overlay(${1:destwin[}, ${2:sminrow}, ${3:smincol}, ${4:dminrow}, ${5:dmincol}, ${6:dmaxrow}, ${7:dmaxcol]})
	
# overwrite() from the curses module
snippet overwrite
	overwrite(${1:destwin[}, ${2:sminrow}, ${3:smincol}, ${4:dminrow}, ${5:dmincol}, ${6:dmaxrow}, ${7:dmaxcol]})
	
# pair_content() from the curses module
snippet pair_content
	pair_content(${1:pair_number})
	
# pair_number() from the curses module
snippet pair_number
	pair_number(${1:attr})
	
# putp() from the curses module
snippet putp
	putp(${1:string})
	
# putwin() from the curses module
snippet putwin
	putwin(${1:file})
	
# qiflush() from the curses module
snippet qiflush
	qiflush(${1:[flag]})
	
# raw() from the curses module
snippet raw
	raw(${1:})
	
# rectangle() from the curses module
snippet rectangle
	rectangle(${1:win}, ${2:uly}, ${3:ulx}, ${4:lry}, ${5:lrx})
	
# redrawln() from the curses module
snippet redrawln
	redrawln(${1:beg}, ${2:num})
	
# redrawwin() from the curses module
snippet redrawwin
	redrawwin(${1:})
	
# refresh() from the curses module
snippet refresh
	refresh(${1:[pminrow}, ${2:pmincol}, ${3:sminrow}, ${4:smincol}, ${5:smaxrow}, ${6:smaxcol]})
	
# reset_prog_mode() from the curses module
snippet reset_prog_mode
	reset_prog_mode(${1:})
	
# reset_shell_mode() from the curses module
snippet reset_shell_mode
	reset_shell_mode(${1:})
	
# resetty() from the curses module
snippet resetty
	resetty(${1:})
	
# resize() from the curses module
snippet resize
	resize(${1:nlines}, ${2:ncols})
	
# resize_term() from the curses module
snippet resize_term
	resize_term(${1:nlines}, ${2:ncols})
	
# resizeterm() from the curses module
snippet resizeterm
	resizeterm(${1:nlines}, ${2:ncols})
	
# savetty() from the curses module
snippet savetty
	savetty(${1:})
	
# scroll() from the curses module
snippet scroll
	scroll(${1:[lines=1]})
	
# scrollok() from the curses module
snippet scrollok
	scrollok(${1:flag})
	
# setscrreg() from the curses module
snippet setscrreg
	setscrreg(${1:top}, ${2:bottom})
	
# setsyx() from the curses module
snippet setsyx
	setsyx(${1:y}, ${2:x})
	
# setupterm() from the curses module
snippet setupterm
	setupterm(${1:[termstr}, ${2:fd]})
	
# standend() from the curses module
snippet standend
	standend(${1:})
	
# standout() from the curses module
snippet standout
	standout(${1:})
	
# start_color() from the curses module
snippet start_color
	start_color(${1:})
	
# subpad() from the curses module
snippet subpad
	subpad(${1:nlines}, ${2:ncols}, ${3:begin_y}, ${4:begin_x})
	
# subwin() from the curses module
snippet subwin
	subwin(${1:nlines}, ${2:ncols}, ${3:begin_y}, ${4:begin_x})
	
# syncok() from the curses module
snippet syncok
	syncok(${1:flag})
	
# syncup() from the curses module
snippet syncup
	syncup(${1:})
	
# termattrs() from the curses module
snippet termattrs
	termattrs(${1:})
	
# termname() from the curses module
snippet termname
	termname(${1:})
	
# tigetflag() from the curses module
snippet tigetflag
	tigetflag(${1:capname})
	
# tigetnum() from the curses module
snippet tigetnum
	tigetnum(${1:capname})
	
# tigetstr() from the curses module
snippet tigetstr
	tigetstr(${1:capname})
	
# timeout() from the curses module
snippet timeout
	timeout(${1:delay})
	
# touchline() from the curses module
snippet touchline
	touchline(${1:start}, ${2:count[}, ${3:changed]})
	
# touchwin() from the curses module
snippet touchwin
	touchwin(${1:})
	
# tparm() from the curses module
snippet tparm
	tparm(${1:str[}, ${2:...]})
	
# typeahead() from the curses module
snippet typeahead
	typeahead(${1:fd})
	
# unctrl() from the curses module
snippet unctrl
	unctrl(${1:ch})
	
# unget_wch() from the curses module
snippet unget_wch
	unget_wch(${1:ch})
	
# ungetch() from the curses module
snippet ungetch
	ungetch(${1:ch})
	
# ungetmouse() from the curses module
snippet ungetmouse
	ungetmouse(${1:id}, ${2:x}, ${3:y}, ${4:z}, ${5:bstate})
	
# untouchwin() from the curses module
snippet untouchwin
	untouchwin(${1:})
	
# update_lines_cols() from the curses module
snippet update_lines_cols
	update_lines_cols(${1:})
	
# use_default_colors() from the curses module
snippet use_default_colors
	use_default_colors(${1:})
	
# use_env() from the curses module
snippet use_env
	use_env(${1:flag})
	
# version() from the curses module
snippet version
	version()
	
# vline() from the curses module
snippet vline
	vline(${1:y}, ${2:x}, ${3:ch}, ${4:n})
	
# wrapper() from the curses module
snippet wrapper
	wrapper(${1:func,})
	
# alt() from the curses.ascii module
snippet alt
	alt(${1:c})
	
# ascii() from the curses.ascii module
snippet ascii
	ascii(${1:c})
	
# controlnames() from the curses.ascii module
snippet controlnames
	controlnames()
	
# ctrl() from the curses.ascii module
snippet ctrl
	ctrl(${1:c})
	
# isalnum() from the curses.ascii module
snippet isalnum
	isalnum(${1:c})
	
# isalpha() from the curses.ascii module
snippet isalpha
	isalpha(${1:c})
	
# isascii() from the curses.ascii module
snippet isascii
	isascii(${1:c})
	
# isblank() from the curses.ascii module
snippet isblank
	isblank(${1:c})
	
# iscntrl() from the curses.ascii module
snippet iscntrl
	iscntrl(${1:c})
	
# isctrl() from the curses.ascii module
snippet isctrl
	isctrl(${1:c})
	
# isdigit() from the curses.ascii module
snippet isdigit
	isdigit(${1:c})
	
# isgraph() from the curses.ascii module
snippet isgraph
	isgraph(${1:c})
	
# islower() from the curses.ascii module
snippet islower
	islower(${1:c})
	
# ismeta() from the curses.ascii module
snippet ismeta
	ismeta(${1:c})
	
# isprint() from the curses.ascii module
snippet isprint
	isprint(${1:c})
	
# ispunct() from the curses.ascii module
snippet ispunct
	ispunct(${1:c})
	
# isspace() from the curses.ascii module
snippet isspace
	isspace(${1:c})
	
# isupper() from the curses.ascii module
snippet isupper
	isupper(${1:c})
	
# isxdigit() from the curses.ascii module
snippet isxdigit
	isxdigit(${1:c})
	
# unctrl() from the curses.ascii module
snippet unctrl
	unctrl(${1:c})
	
# above() from the curses.panel module
snippet above
	above(${1:})
	
# below() from the curses.panel module
snippet below
	below(${1:})
	
# bottom() from the curses.panel module
snippet bottom
	bottom(${1:})
	
# bottom_panel() from the curses.panel module
snippet bottom_panel
	bottom_panel(${1:})
	
# hidden() from the curses.panel module
snippet hidden
	hidden(${1:})
	
# hide() from the curses.panel module
snippet hide
	hide(${1:})
	
# move() from the curses.panel module
snippet move
	move(${1:y}, ${2:x})
	
# new_panel() from the curses.panel module
snippet new_panel
	new_panel(${1:win})
	
# replace() from the curses.panel module
snippet replace
	replace(${1:win})
	
# set_userptr() from the curses.panel module
snippet set_userptr
	set_userptr(${1:obj})
	
# show() from the curses.panel module
snippet show
	show(${1:})
	
# top() from the curses.panel module
snippet top
	top(${1:})
	
# top_panel() from the curses.panel module
snippet top_panel
	top_panel(${1:})
	
# update_panels() from the curses.panel module
snippet update_panels
	update_panels(${1:})
	
# userptr() from the curses.panel module
snippet userptr
	userptr(${1:})
	
# window() from the curses.panel module
snippet window
	window(${1:})
	
# above() from the curses.textpad module
snippet above
	above(${1:})
	
# below() from the curses.textpad module
snippet below
	below(${1:})
	
# bottom() from the curses.textpad module
snippet bottom
	bottom(${1:})
	
# bottom_panel() from the curses.textpad module
snippet bottom_panel
	bottom_panel(${1:})
	
# hidden() from the curses.textpad module
snippet hidden
	hidden(${1:})
	
# hide() from the curses.textpad module
snippet hide
	hide(${1:})
	
# move() from the curses.textpad module
snippet move
	move(${1:y}, ${2:x})
	
# new_panel() from the curses.textpad module
snippet new_panel
	new_panel(${1:win})
	
# replace() from the curses.textpad module
snippet replace
	replace(${1:win})
	
# set_userptr() from the curses.textpad module
snippet set_userptr
	set_userptr(${1:obj})
	
# show() from the curses.textpad module
snippet show
	show(${1:})
	
# top() from the curses.textpad module
snippet top
	top(${1:})
	
# top_panel() from the curses.textpad module
snippet top_panel
	top_panel(${1:})
	
# update_panels() from the curses.textpad module
snippet update_panels
	update_panels(${1:})
	
# userptr() from the curses.textpad module
snippet userptr
	userptr(${1:})
	
# window() from the curses.textpad module
snippet window
	window(${1:})
	
# MAXYEAR from the datetime module
snippet MAXYEAR
	MAXYEAR
	
# MINYEAR from the datetime module
snippet MINYEAR
	MINYEAR
	
# __format__() from the datetime module
snippet __format__
	__format__(${1:format})
	
# __str__() from the datetime module
snippet __str__
	__str__(${1:})
	
# astimezone() from the datetime module
snippet astimezone
	astimezone(${1:tz=None})
	
# combine() from the datetime module
snippet combine
	combine(${1:date}, ${2:time})
	
# ctime() from the datetime module
snippet ctime
	ctime(${1:})
	
# date An idealized naive date() from the datetime module
snippet date An idealized naive date
	date An idealized naive date(${1:assuming the current Gregorian calendar always was}, ${2:and always will be}, ${3:in effect. Attributes: })
	
# date() from the datetime module
snippet date
	date(${1:})
	
# datetime() from the datetime module
snippet datetime
	datetime(${1:year}, ${2:month}, ${3:day}, ${4:hour=0}, ${5:minute=0}, ${6:second=0}, ${7:microsecond=0}, ${8:tzinfo=None})
	
# day() from the datetime module
snippet day
	day()
	
# dst() from the datetime module
snippet dst
	dst(${1:})
	
# fromordinal() from the datetime module
snippet fromordinal
	fromordinal(${1:ordinal})
	
# fromtimestamp() from the datetime module
snippet fromtimestamp
	fromtimestamp(${1:timestamp})
	
# fromutc() from the datetime module
snippet fromutc
	fromutc(${1:dt})
	
# hour() from the datetime module
snippet hour
	hour()
	
# isocalendar() from the datetime module
snippet isocalendar
	isocalendar(${1:})
	
# isoformat() from the datetime module
snippet isoformat
	isoformat(${1:})
	
# isoweekday() from the datetime module
snippet isoweekday
	isoweekday(${1:})
	
# max() from the datetime module
snippet max
	max()
	
# microsecond() from the datetime module
snippet microsecond
	microsecond()
	
# min() from the datetime module
snippet min
	min()
	
# minute() from the datetime module
snippet minute
	minute()
	
# month() from the datetime module
snippet month
	month()
	
# now() from the datetime module
snippet now
	now(${1:tz=None})
	
# replace() from the datetime module
snippet replace
	replace(${1:[year[}, ${2:month[}, ${3:day[}, ${4:hour[}, ${5:minute[}, ${6:second[}, ${7:microsecond[}, ${8:tzinfo]]]]]]]]})
	
# resolution() from the datetime module
snippet resolution
	resolution()
	
# second() from the datetime module
snippet second
	second()
	
# strftime() from the datetime module
snippet strftime
	strftime(${1:format})
	
# strptime() from the datetime module
snippet strptime
	strptime(${1:date_string}, ${2:format})
	
# time An idealized time() from the datetime module
snippet time An idealized time
	time An idealized time(${1:independent of any particular day}, ${2:assuming that every day has exactly 24*60*60 seconds }, ${3:there is no notion of "leap seconds" here})
	
# time() from the datetime module
snippet time
	time(${1:})
	
# timedelta A duration expressing the difference between two () from the datetime module
snippet timedelta A duration expressing the difference between two 
	timedelta A duration expressing the difference between two ()
	
# timedelta() from the datetime module
snippet timedelta
	timedelta(${1:days=0}, ${2:seconds=0}, ${3:microseconds=0}, ${4:milliseconds=0}, ${5:minutes=0}, ${6:hours=0}, ${7:weeks=0})
	
# timestamp() from the datetime module
snippet timestamp
	timestamp(${1:})
	
# timetuple() from the datetime module
snippet timetuple
	timetuple(${1:})
	
# timetz() from the datetime module
snippet timetz
	timetz(${1:})
	
# timezone() from the datetime module
snippet timezone
	timezone(${1:offset[}, ${2:name]})
	
# today() from the datetime module
snippet today
	today(${1:})
	
# toordinal() from the datetime module
snippet toordinal
	toordinal(${1:})
	
# total_seconds() from the datetime module
snippet total_seconds
	total_seconds(${1:})
	
# tzinfo() from the datetime module
snippet tzinfo
	tzinfo()
	
# tzname() from the datetime module
snippet tzname
	tzname(${1:})
	
# utc() from the datetime module
snippet utc
	utc()
	
# utcfromtimestamp() from the datetime module
snippet utcfromtimestamp
	utcfromtimestamp(${1:timestamp})
	
# utcnow() from the datetime module
snippet utcnow
	utcnow(${1:})
	
# utcoffset() from the datetime module
snippet utcoffset
	utcoffset(${1:})
	
# utctimetuple() from the datetime module
snippet utctimetuple
	utctimetuple(${1:})
	
# weekday() from the datetime module
snippet weekday
	weekday(${1:})
	
# year() from the datetime module
snippet year
	year()
	
# close() from the dbm module
snippet close
	close(${1:})
	
# error() from the dbm module
snippet error
	error()
	
# firstkey() from the dbm module
snippet firstkey
	firstkey(${1:})
	
# library() from the dbm module
snippet library
	library()
	
# nextkey() from the dbm module
snippet nextkey
	nextkey(${1:key})
	
# open() from the dbm module
snippet open
	open(${1:filename[}, ${2:flag[}, ${3:mode]]})
	
# reorganize() from the dbm module
snippet reorganize
	reorganize(${1:})
	
# sync() from the dbm module
snippet sync
	sync(${1:})
	
# whichdb() from the dbm module
snippet whichdb
	whichdb(${1:filename})
	
# close() from the dbm.dumb module
snippet close
	close(${1:})
	
# error() from the dbm.dumb module
snippet error
	error()
	
# firstkey() from the dbm.dumb module
snippet firstkey
	firstkey(${1:})
	
# library() from the dbm.dumb module
snippet library
	library()
	
# nextkey() from the dbm.dumb module
snippet nextkey
	nextkey(${1:key})
	
# open() from the dbm.dumb module
snippet open
	open(${1:filename[}, ${2:flag[}, ${3:mode]]})
	
# reorganize() from the dbm.dumb module
snippet reorganize
	reorganize(${1:})
	
# sync() from the dbm.dumb module
snippet sync
	sync(${1:})
	
# whichdb() from the dbm.dumb module
snippet whichdb
	whichdb(${1:filename})
	
# close() from the dbm.gnu module
snippet close
	close(${1:})
	
# error() from the dbm.gnu module
snippet error
	error()
	
# firstkey() from the dbm.gnu module
snippet firstkey
	firstkey(${1:})
	
# library() from the dbm.gnu module
snippet library
	library()
	
# nextkey() from the dbm.gnu module
snippet nextkey
	nextkey(${1:key})
	
# open() from the dbm.gnu module
snippet open
	open(${1:filename[}, ${2:flag[}, ${3:mode]]})
	
# reorganize() from the dbm.gnu module
snippet reorganize
	reorganize(${1:})
	
# sync() from the dbm.gnu module
snippet sync
	sync(${1:})
	
# whichdb() from the dbm.gnu module
snippet whichdb
	whichdb(${1:filename})
	
# close() from the dbm.ndbm module
snippet close
	close(${1:})
	
# error() from the dbm.ndbm module
snippet error
	error()
	
# firstkey() from the dbm.ndbm module
snippet firstkey
	firstkey(${1:})
	
# library() from the dbm.ndbm module
snippet library
	library()
	
# nextkey() from the dbm.ndbm module
snippet nextkey
	nextkey(${1:key})
	
# open() from the dbm.ndbm module
snippet open
	open(${1:filename[}, ${2:flag[}, ${3:mode]]})
	
# reorganize() from the dbm.ndbm module
snippet reorganize
	reorganize(${1:})
	
# sync() from the dbm.ndbm module
snippet sync
	sync(${1:})
	
# whichdb() from the dbm.ndbm module
snippet whichdb
	whichdb(${1:filename})
	
# BasicContext from the decimal module
snippet BasicContext
	BasicContext
	
# Clamped from the decimal module
snippet Clamped
	Clamped
	
# Context from the decimal module
snippet Context
	Context(${1:prec=None}, ${2:rounding=None}, ${3:Emin=None}, ${4:Emax=None}, ${5:capitals=None}, ${6:clamp=None}, ${7:flags=None}, ${8:traps=None})
	
# Decimal from the decimal module
snippet Decimal
	Decimal(${1:value="0"}, ${2:context=None})
	
# DecimalException from the decimal module
snippet DecimalException
	DecimalException
	
# DefaultContext from the decimal module
snippet DefaultContext
	DefaultContext
	
# DivisionByZero from the decimal module
snippet DivisionByZero
	DivisionByZero
	
# ExtendedContext from the decimal module
snippet ExtendedContext
	ExtendedContext
	
# FloatOperation from the decimal module
snippet FloatOperation
	FloatOperation
	
# HAVE_THREADS from the decimal module
snippet HAVE_THREADS
	HAVE_THREADS
	
# Inexact from the decimal module
snippet Inexact
	Inexact
	
# InvalidOperation from the decimal module
snippet InvalidOperation
	InvalidOperation
	
# MAX_EMAX from the decimal module
snippet MAX_EMAX
	MAX_EMAX
	
# MAX_PREC from the decimal module
snippet MAX_PREC
	MAX_PREC
	
# MIN_EMIN from the decimal module
snippet MIN_EMIN
	MIN_EMIN
	
# MIN_ETINY from the decimal module
snippet MIN_ETINY
	MIN_ETINY
	
# Overflow from the decimal module
snippet Overflow
	Overflow
	
# ROUND_05UP from the decimal module
snippet ROUND_05UP
	ROUND_05UP
	
# ROUND_CEILING from the decimal module
snippet ROUND_CEILING
	ROUND_CEILING
	
# ROUND_DOWN from the decimal module
snippet ROUND_DOWN
	ROUND_DOWN
	
# ROUND_FLOOR from the decimal module
snippet ROUND_FLOOR
	ROUND_FLOOR
	
# ROUND_HALF_DOWN from the decimal module
snippet ROUND_HALF_DOWN
	ROUND_HALF_DOWN
	
# ROUND_HALF_EVEN from the decimal module
snippet ROUND_HALF_EVEN
	ROUND_HALF_EVEN
	
# ROUND_HALF_UP from the decimal module
snippet ROUND_HALF_UP
	ROUND_HALF_UP
	
# ROUND_UP from the decimal module
snippet ROUND_UP
	ROUND_UP
	
# Rounded from the decimal module
snippet Rounded
	Rounded
	
# Subnormal from the decimal module
snippet Subnormal
	Subnormal
	
# Underflow from the decimal module
snippet Underflow
	Underflow
	
# getcontext() from the decimal module
snippet getcontext
	getcontext(${1:})
	
# localcontext() from the decimal module
snippet localcontext
	localcontext(${1:ctx=None})
	
# setcontext() from the decimal module
snippet setcontext
	setcontext(${1:c})
	
# Differ from the difflib module
snippet Differ
	Differ(${1:linejunk=None}, ${2:charjunk=None})
	
# HtmlDiff from the difflib module
snippet HtmlDiff
	HtmlDiff
	
# IS_CHARACTER_JUNK from the difflib module
snippet IS_CHARACTER_JUNK
	IS_CHARACTER_JUNK(${1:ch})
	
# IS_LINE_JUNK from the difflib module
snippet IS_LINE_JUNK
	IS_LINE_JUNK(${1:line})
	
# SequenceMatcher from the difflib module
snippet SequenceMatcher
	SequenceMatcher(${1:isjunk=None}, ${2:a=''}, ${3:b=''}, ${4:autojunk=True})
	
# context_diff() from the difflib module
snippet context_diff
	context_diff(${1:a}, ${2:b}, ${3:fromfile=''}, ${4:tofile=''}, ${5:fromfiledate=''}, ${6:tofiledate=''}, ${7:n=3}, ${8:lineterm=' '})
	
# diff_bytes() from the difflib module
snippet diff_bytes
	diff_bytes(${1:dfunc}, ${2:a}, ${3:b}, ${4:fromfile=b''}, ${5:tofile=b''}, ${6:fromfiledate=b''}, ${7:tofiledate=b''}, ${8:n=3}, ${9:lineterm=b' '})
	
# get_close_matches() from the difflib module
snippet get_close_matches
	get_close_matches(${1:word}, ${2:possibilities}, ${3:n=3}, ${4:cutoff=0.6})
	
# ndiff() from the difflib module
snippet ndiff
	ndiff(${1:a}, ${2:b}, ${3:linejunk=None}, ${4:charjunk=IS_CHARACTER_JUNK})
	
# restore() from the difflib module
snippet restore
	restore(${1:sequence}, ${2:which})
	
# unified_diff() from the difflib module
snippet unified_diff
	unified_diff(${1:a,})
	
# Bytecode from the dis module
snippet Bytecode
	Bytecode(${1:x}, ${2:*}, ${3:first_line=None}, ${4:current_offset=None})
	
# Instruction from the dis module
snippet Instruction
	Instruction
	
# cmp_op() from the dis module
snippet cmp_op
	cmp_op()
	
# code_info() from the dis module
snippet code_info
	code_info(${1:x})
	
# dis() from the dis module
snippet dis
	dis(${1:x=None}, ${2:*}, ${3:file=None})
	
# disassemble() from the dis module
snippet disassemble
	disassemble(${1:code}, ${2:lasti=-1}, ${3:*}, ${4:file=None})
	
# disco() from the dis module
snippet disco
	disco(${1:code}, ${2:lasti=-1}, ${3:*}, ${4:file=None})
	
# distb() from the dis module
snippet distb
	distb(${1:tb=None}, ${2:*}, ${3:file=None})
	
# findlabels() from the dis module
snippet findlabels
	findlabels(${1:code})
	
# findlinestarts() from the dis module
snippet findlinestarts
	findlinestarts(${1:code})
	
# get_instructions() from the dis module
snippet get_instructions
	get_instructions(${1:x}, ${2:*}, ${3:first_line=None})
	
# hascompare() from the dis module
snippet hascompare
	hascompare()
	
# hasconst() from the dis module
snippet hasconst
	hasconst()
	
# hasfree() from the dis module
snippet hasfree
	hasfree()
	
# hasjabs() from the dis module
snippet hasjabs
	hasjabs()
	
# hasjrel() from the dis module
snippet hasjrel
	hasjrel()
	
# haslocal() from the dis module
snippet haslocal
	haslocal()
	
# hasname() from the dis module
snippet hasname
	hasname()
	
# opmap() from the dis module
snippet opmap
	opmap()
	
# opname() from the dis module
snippet opname
	opname()
	
# show_code() from the dis module
snippet show_code
	show_code(${1:x}, ${2:*}, ${3:file=None})
	
# stack_effect() from the dis module
snippet stack_effect
	stack_effect(${1:opcode[,})
	
# COMPARISON_FLAGS from the doctest module
snippet COMPARISON_FLAGS
	COMPARISON_FLAGS
	
# DONT_ACCEPT_BLANKLINE from the doctest module
snippet DONT_ACCEPT_BLANKLINE
	DONT_ACCEPT_BLANKLINE
	
# DONT_ACCEPT_TRUE_FOR_1 from the doctest module
snippet DONT_ACCEPT_TRUE_FOR_1
	DONT_ACCEPT_TRUE_FOR_1
	
# DebugRunner from the doctest module
snippet DebugRunner
	DebugRunner(${1:checker=None}, ${2:verbose=None}, ${3:optionflags=0})
	
# DocFileSuite from the doctest module
snippet DocFileSuite
	DocFileSuite(${1:*paths}, ${2:module_relative=True}, ${3:package=None}, ${4:setUp=None}, ${5:tearDown=None}, ${6:globs=None}, ${7:optionflags=0}, ${8:parser=DocTestParser}, ${9:})
	
# DocTest from the doctest module
snippet DocTest
	DocTest(${1:examples}, ${2:globs}, ${3:name}, ${4:filename}, ${5:lineno}, ${6:docstring})
	
# DocTestFailure from the doctest module
snippet DocTestFailure
	DocTestFailure(${1:test}, ${2:example}, ${3:got})
	
# DocTestFinder from the doctest module
snippet DocTestFinder
	DocTestFinder(${1:verbose=False}, ${2:parser=DocTestParser}, ${3:})
	
# DocTestParser from the doctest module
snippet DocTestParser
	DocTestParser
	
# DocTestRunner from the doctest module
snippet DocTestRunner
	DocTestRunner(${1:checker=None}, ${2:verbose=None}, ${3:optionflags=0})
	
# DocTestSuite from the doctest module
snippet DocTestSuite
	DocTestSuite(${1:module=None}, ${2:globs=None}, ${3:extraglobs=None}, ${4:test_finder=None}, ${5:setUp=None}, ${6:tearDown=None}, ${7:checker=None})
	
# ELLIPSIS from the doctest module
snippet ELLIPSIS
	ELLIPSIS
	
# Example from the doctest module
snippet Example
	Example(${1:source}, ${2:want}, ${3:exc_msg=None}, ${4:lineno=0}, ${5:indent=0}, ${6:options=None})
	
# FAIL_FAST from the doctest module
snippet FAIL_FAST
	FAIL_FAST
	
# IGNORE_EXCEPTION_DETAIL from the doctest module
snippet IGNORE_EXCEPTION_DETAIL
	IGNORE_EXCEPTION_DETAIL
	
# NORMALIZE_WHITESPACE from the doctest module
snippet NORMALIZE_WHITESPACE
	NORMALIZE_WHITESPACE
	
# OutputChecker from the doctest module
snippet OutputChecker
	OutputChecker
	
# REPORTING_FLAGS from the doctest module
snippet REPORTING_FLAGS
	REPORTING_FLAGS
	
# REPORT_CDIFF from the doctest module
snippet REPORT_CDIFF
	REPORT_CDIFF
	
# REPORT_NDIFF from the doctest module
snippet REPORT_NDIFF
	REPORT_NDIFF
	
# REPORT_ONLY_FIRST_FAILURE from the doctest module
snippet REPORT_ONLY_FIRST_FAILURE
	REPORT_ONLY_FIRST_FAILURE
	
# REPORT_UDIFF from the doctest module
snippet REPORT_UDIFF
	REPORT_UDIFF
	
# SKIP from the doctest module
snippet SKIP
	SKIP
	
# UnexpectedException from the doctest module
snippet UnexpectedException
	UnexpectedException(${1:test}, ${2:example}, ${3:exc_info})
	
# debug() from the doctest module
snippet debug
	debug(${1:module}, ${2:name}, ${3:pm=False})
	
# debug_src() from the doctest module
snippet debug_src
	debug_src(${1:src}, ${2:pm=False}, ${3:globs=None})
	
# example() from the doctest module
snippet example
	example()
	
# exc_info() from the doctest module
snippet exc_info
	exc_info()
	
# got() from the doctest module
snippet got
	got()
	
# register_optionflag() from the doctest module
snippet register_optionflag
	register_optionflag(${1:name})
	
# run_docstring_examples() from the doctest module
snippet run_docstring_examples
	run_docstring_examples(${1:f}, ${2:globs}, ${3:verbose=False}, ${4:name="NoName"}, ${5:compileflags=None}, ${6:optionflags=0})
	
# script_from_examples() from the doctest module
snippet script_from_examples
	script_from_examples(${1:s})
	
# set_unittest_reportflags() from the doctest module
snippet set_unittest_reportflags
	set_unittest_reportflags(${1:flags})
	
# test() from the doctest module
snippet test
	test()
	
# testfile() from the doctest module
snippet testfile
	testfile(${1:filename}, ${2:module_relative=True}, ${3:name=None}, ${4:package=None}, ${5:globs=None}, ${6:verbose=None}, ${7:report=True}, ${8:optionflags=0}, ${9:extraglobs=None}, ${10:raise_on_error=False}, ${11:parser=DocTestParser}, ${12:})
	
# testmod() from the doctest module
snippet testmod
	testmod(${1:m=None}, ${2:name=None}, ${3:globs=None}, ${4:verbose=None}, ${5:report=True}, ${6:optionflags=0}, ${7:extraglobs=None}, ${8:raise_on_error=False}, ${9:exclude_empty=False})
	
# testsource() from the doctest module
snippet testsource
	testsource(${1:module,})
	
# Charset from the email.charset module
snippet Charset
	Charset(${1:input_charset=DEFAULT_CHARSET})
	
# add_alias() from the email.charset module
snippet add_alias
	add_alias(${1:alias}, ${2:canonical})
	
# add_charset() from the email.charset module
snippet add_charset
	add_charset(${1:charset}, ${2:header_enc=None}, ${3:body_enc=None}, ${4:output_charset=None})
	
# add_codec() from the email.charset module
snippet add_codec
	add_codec(${1:charset,})
	
# ContentManager from the email.contentmanager module
snippet ContentManager
	ContentManager
	
# EmailMessage from the email.contentmanager module
snippet EmailMessage
	EmailMessage(${1:policy=default})
	
# MIMEPart from the email.contentmanager module
snippet MIMEPart
	MIMEPart(${1:policy=default})
	
# get_content() from the email.contentmanager module
snippet get_content
	get_content(${1:msg}, ${2:errors='replace'})
	
# raw_data_manager() from the email.contentmanager module
snippet raw_data_manager
	raw_data_manager()
	
# set_content() from the email.contentmanager module
snippet set_content
	set_content(${1:msg,})
	
# encode_7or8bit() from the email.encoders module
snippet encode_7or8bit
	encode_7or8bit(${1:msg})
	
# encode_base64() from the email.encoders module
snippet encode_base64
	encode_base64(${1:msg})
	
# encode_noop() from the email.encoders module
snippet encode_noop
	encode_noop(${1:msg})
	
# encode_quopri() from the email.encoders module
snippet encode_quopri
	encode_quopri(${1:msg})
	
# BoundaryError from the email.errors module
snippet BoundaryError
	BoundaryError
	
# HeaderParseError from the email.errors module
snippet HeaderParseError
	HeaderParseError
	
# MessageError from the email.errors module
snippet MessageError
	MessageError
	
# MessageParseError from the email.errors module
snippet MessageParseError
	MessageParseError
	
# MultipartConversionError from the email.errors module
snippet MultipartConversionError
	MultipartConversionError
	
# BytesGenerator from the email.generator module
snippet BytesGenerator
	BytesGenerator(${1:outfp}, ${2:mangle_from_=True}, ${3:maxheaderlen=78}, ${4:*}, ${5:policy=None})
	
# DecodedGenerator from the email.generator module
snippet DecodedGenerator
	DecodedGenerator(${1:outfp}, ${2:mangle_from_=True}, ${3:maxheaderlen=78}, ${4:fmt=None})
	
# Generator from the email.generator module
snippet Generator
	Generator(${1:outfp,})
	
# Header from the email.header module
snippet Header
	Header(${1:s=None}, ${2:charset=None}, ${3:maxlinelen=None}, ${4:header_name=None}, ${5:continuation_ws=' '}, ${6:errors='strict'})
	
# decode_header() from the email.header module
snippet decode_header
	decode_header(${1:header})
	
# make_header() from the email.header module
snippet make_header
	make_header(${1:decoded_seq,})
	
# Address from the email.headerregistry module
snippet Address
	Address(${1:display_name=''}, ${2:username=''}, ${3:domain=''}, ${4:addr_spec=None})
	
# AddressHeader from the email.headerregistry module
snippet AddressHeader
	AddressHeader
	
# BaseHeader from the email.headerregistry module
snippet BaseHeader
	BaseHeader(${1:name}, ${2:value})
	
# ContentDispositionHeader from the email.headerregistry module
snippet ContentDispositionHeader
	ContentDispositionHeader
	
# ContentTransferEncoding from the email.headerregistry module
snippet ContentTransferEncoding
	ContentTransferEncoding
	
# ContentTypeHeader from the email.headerregistry module
snippet ContentTypeHeader
	ContentTypeHeader
	
# DateHeader from the email.headerregistry module
snippet DateHeader
	DateHeader
	
# Group from the email.headerregistry module
snippet Group
	Group(${1:display_name=None}, ${2:addresses=None})
	
# HeaderRegistry from the email.headerregistry module
snippet HeaderRegistry
	HeaderRegistry(${1:base_class=BaseHeader}, ${2:default_class=UnstructuredHeader}, ${3:use_default_map=True})
	
# MIMEVersionHeader from the email.headerregistry module
snippet MIMEVersionHeader
	MIMEVersionHeader
	
# ParameterizedMIMEHeader from the email.headerregistry module
snippet ParameterizedMIMEHeader
	ParameterizedMIMEHeader
	
# SingleAddressHeader from the email.headerregistry module
snippet SingleAddressHeader
	SingleAddressHeader
	
# UnstructuredHeader from the email.headerregistry module
snippet UnstructuredHeader
	UnstructuredHeader
	
# _structure() from the email.iterators module
snippet _structure
	_structure(${1:msg}, ${2:fp=None}, ${3:level=0}, ${4:include_default=False})
	
# body_line_iterator() from the email.iterators module
snippet body_line_iterator
	body_line_iterator(${1:msg}, ${2:decode=False})
	
# typed_subpart_iterator() from the email.iterators module
snippet typed_subpart_iterator
	typed_subpart_iterator(${1:msg,})
	
# Message from the email.message module
snippet Message
	Message(${1:policy=compat32})
	
# MIMEApplication from the email.mime module
snippet MIMEApplication
	MIMEApplication(${1:_data}, ${2:_subtype='octet-stream'}, ${3:_encoder=email.encoders.encode_base64}, ${4:**_params})
	
# MIMEAudio from the email.mime module
snippet MIMEAudio
	MIMEAudio(${1:_audiodata}, ${2:_subtype=None}, ${3:_encoder=email.encoders.encode_base64}, ${4:**_params})
	
# MIMEBase from the email.mime module
snippet MIMEBase
	MIMEBase(${1:_maintype}, ${2:_subtype}, ${3:**_params})
	
# MIMEImage from the email.mime module
snippet MIMEImage
	MIMEImage(${1:_imagedata}, ${2:_subtype=None}, ${3:_encoder=email.encoders.encode_base64}, ${4:**_params})
	
# MIMEMessage from the email.mime module
snippet MIMEMessage
	MIMEMessage(${1:_msg}, ${2:_subtype='rfc822'})
	
# MIMEMultipart from the email.mime module
snippet MIMEMultipart
	MIMEMultipart(${1:_subtype='mixed'}, ${2:boundary=None}, ${3:_subparts=None}, ${4:**_params})
	
# MIMENonMultipart from the email.mime module
snippet MIMENonMultipart
	MIMENonMultipart
	
# MIMEText from the email.mime module
snippet MIMEText
	MIMEText(${1:_text,})
	
# BytesFeedParser from the email.parser module
snippet BytesFeedParser
	BytesFeedParser(${1:_factory=email.message.Message})
	
# BytesParser from the email.parser module
snippet BytesParser
	BytesParser(${1:_class=email.message.Message}, ${2:*}, ${3:policy=policy.compat32})
	
# FeedParser from the email.parser module
snippet FeedParser
	FeedParser(${1:_factory=email.message.Message}, ${2:*}, ${3:policy=policy.compat32})
	
# Parser from the email.parser module
snippet Parser
	Parser(${1:_class=email.message.Message}, ${2:*}, ${3:policy=policy.compat32})
	
# message_from_binary_file() from the email.parser module
snippet message_from_binary_file
	message_from_binary_file(${1:fp}, ${2:_class=email.message.Message}, ${3:*}, ${4:policy=policy.compat32})
	
# message_from_bytes() from the email.parser module
snippet message_from_bytes
	message_from_bytes(${1:s}, ${2:_class=email.message.Message}, ${3:*}, ${4:policy=policy.compat32})
	
# message_from_file() from the email.parser module
snippet message_from_file
	message_from_file(${1:fp}, ${2:_class=email.message.Message}, ${3:*}, ${4:policy=policy.compat32})
	
# message_from_string() from the email.parser module
snippet message_from_string
	message_from_string(${1:s,})
	
# Compat32 from the email.policy module
snippet Compat32
	Compat32(${1:**kw})
	
# EmailPolicy from the email.policy module
snippet EmailPolicy
	EmailPolicy(${1:**kw})
	
# HTTP from the email.policy module
snippet HTTP
	HTTP
	
# Policy from the email.policy module
snippet Policy
	Policy(${1:**kw})
	
# SMTP from the email.policy module
snippet SMTP
	SMTP
	
# SMTPUTF8 from the email.policy module
snippet SMTPUTF8
	SMTPUTF8
	
# compat32() from the email.policy module
snippet compat32
	compat32()
	
# default() from the email.policy module
snippet default
	default()
	
# strict() from the email.policy module
snippet strict
	strict()
	
# Compat32 from the email.utils module
snippet Compat32
	Compat32(${1:**kw})
	
# EmailPolicy from the email.utils module
snippet EmailPolicy
	EmailPolicy(${1:**kw})
	
# HTTP from the email.utils module
snippet HTTP
	HTTP
	
# Policy from the email.utils module
snippet Policy
	Policy(${1:**kw})
	
# SMTP from the email.utils module
snippet SMTP
	SMTP
	
# SMTPUTF8 from the email.utils module
snippet SMTPUTF8
	SMTPUTF8
	
# compat32() from the email.utils module
snippet compat32
	compat32()
	
# default() from the email.utils module
snippet default
	default()
	
# strict() from the email.utils module
snippet strict
	strict()
	
# Compat32 from the encodings.idna module
snippet Compat32
	Compat32(${1:**kw})
	
# EmailPolicy from the encodings.idna module
snippet EmailPolicy
	EmailPolicy(${1:**kw})
	
# HTTP from the encodings.idna module
snippet HTTP
	HTTP
	
# Policy from the encodings.idna module
snippet Policy
	Policy(${1:**kw})
	
# SMTP from the encodings.idna module
snippet SMTP
	SMTP
	
# SMTPUTF8 from the encodings.idna module
snippet SMTPUTF8
	SMTPUTF8
	
# compat32() from the encodings.idna module
snippet compat32
	compat32()
	
# default() from the encodings.idna module
snippet default
	default()
	
# strict() from the encodings.idna module
snippet strict
	strict()
	
# Compat32 from the encodings.mbcs module
snippet Compat32
	Compat32(${1:**kw})
	
# EmailPolicy from the encodings.mbcs module
snippet EmailPolicy
	EmailPolicy(${1:**kw})
	
# HTTP from the encodings.mbcs module
snippet HTTP
	HTTP
	
# Policy from the encodings.mbcs module
snippet Policy
	Policy(${1:**kw})
	
# SMTP from the encodings.mbcs module
snippet SMTP
	SMTP
	
# SMTPUTF8 from the encodings.mbcs module
snippet SMTPUTF8
	SMTPUTF8
	
# compat32() from the encodings.mbcs module
snippet compat32
	compat32()
	
# default() from the encodings.mbcs module
snippet default
	default()
	
# strict() from the encodings.mbcs module
snippet strict
	strict()
	
# Compat32 from the encodings.utf_8_sig module
snippet Compat32
	Compat32(${1:**kw})
	
# EmailPolicy from the encodings.utf_8_sig module
snippet EmailPolicy
	EmailPolicy(${1:**kw})
	
# HTTP from the encodings.utf_8_sig module
snippet HTTP
	HTTP
	
# Policy from the encodings.utf_8_sig module
snippet Policy
	Policy(${1:**kw})
	
# SMTP from the encodings.utf_8_sig module
snippet SMTP
	SMTP
	
# SMTPUTF8 from the encodings.utf_8_sig module
snippet SMTPUTF8
	SMTPUTF8
	
# compat32() from the encodings.utf_8_sig module
snippet compat32
	compat32()
	
# default() from the encodings.utf_8_sig module
snippet default
	default()
	
# strict() from the encodings.utf_8_sig module
snippet strict
	strict()
	
# bootstrap() from the ensurepip module
snippet bootstrap
	bootstrap(${1:root=None}, ${2:upgrade=False}, ${3:user=False}, ${4:altinstall=False}, ${5:default_pip=False}, ${6:verbosity=0})
	
# version() from the ensurepip module
snippet version
	version(${1:})
	
# Enum from the enum module
snippet Enum
	Enum
	
# IntEnum from the enum module
snippet IntEnum
	IntEnum
	
# unique   A () from the enum module
snippet unique   A 
	unique   A ()
	
# unique() from the enum module
snippet unique
	unique(${1:})
	
# E2BIG from the errno module
snippet E2BIG
	E2BIG
	
# EACCES from the errno module
snippet EACCES
	EACCES
	
# EADDRINUSE from the errno module
snippet EADDRINUSE
	EADDRINUSE
	
# EADDRNOTAVAIL from the errno module
snippet EADDRNOTAVAIL
	EADDRNOTAVAIL
	
# EADV from the errno module
snippet EADV
	EADV
	
# EAFNOSUPPORT from the errno module
snippet EAFNOSUPPORT
	EAFNOSUPPORT
	
# EAGAIN from the errno module
snippet EAGAIN
	EAGAIN
	
# EALREADY from the errno module
snippet EALREADY
	EALREADY
	
# EBADE from the errno module
snippet EBADE
	EBADE
	
# EBADF from the errno module
snippet EBADF
	EBADF
	
# EBADFD from the errno module
snippet EBADFD
	EBADFD
	
# EBADMSG from the errno module
snippet EBADMSG
	EBADMSG
	
# EBADR from the errno module
snippet EBADR
	EBADR
	
# EBADRQC from the errno module
snippet EBADRQC
	EBADRQC
	
# EBADSLT from the errno module
snippet EBADSLT
	EBADSLT
	
# EBFONT from the errno module
snippet EBFONT
	EBFONT
	
# EBUSY from the errno module
snippet EBUSY
	EBUSY
	
# ECHILD from the errno module
snippet ECHILD
	ECHILD
	
# ECHRNG from the errno module
snippet ECHRNG
	ECHRNG
	
# ECOMM from the errno module
snippet ECOMM
	ECOMM
	
# ECONNABORTED from the errno module
snippet ECONNABORTED
	ECONNABORTED
	
# ECONNREFUSED from the errno module
snippet ECONNREFUSED
	ECONNREFUSED
	
# ECONNRESET from the errno module
snippet ECONNRESET
	ECONNRESET
	
# EDEADLK from the errno module
snippet EDEADLK
	EDEADLK
	
# EDEADLOCK from the errno module
snippet EDEADLOCK
	EDEADLOCK
	
# EDESTADDRREQ from the errno module
snippet EDESTADDRREQ
	EDESTADDRREQ
	
# EDOM from the errno module
snippet EDOM
	EDOM
	
# EDOTDOT from the errno module
snippet EDOTDOT
	EDOTDOT
	
# EDQUOT from the errno module
snippet EDQUOT
	EDQUOT
	
# EEXIST from the errno module
snippet EEXIST
	EEXIST
	
# EFAULT from the errno module
snippet EFAULT
	EFAULT
	
# EFBIG from the errno module
snippet EFBIG
	EFBIG
	
# EHOSTDOWN from the errno module
snippet EHOSTDOWN
	EHOSTDOWN
	
# EHOSTUNREACH from the errno module
snippet EHOSTUNREACH
	EHOSTUNREACH
	
# EIDRM from the errno module
snippet EIDRM
	EIDRM
	
# EILSEQ from the errno module
snippet EILSEQ
	EILSEQ
	
# EINPROGRESS from the errno module
snippet EINPROGRESS
	EINPROGRESS
	
# EINTR from the errno module
snippet EINTR
	EINTR
	
# EINVAL from the errno module
snippet EINVAL
	EINVAL
	
# EIO from the errno module
snippet EIO
	EIO
	
# EISCONN from the errno module
snippet EISCONN
	EISCONN
	
# EISDIR from the errno module
snippet EISDIR
	EISDIR
	
# EISNAM from the errno module
snippet EISNAM
	EISNAM
	
# EL2HLT from the errno module
snippet EL2HLT
	EL2HLT
	
# EL2NSYNC from the errno module
snippet EL2NSYNC
	EL2NSYNC
	
# EL3HLT from the errno module
snippet EL3HLT
	EL3HLT
	
# EL3RST from the errno module
snippet EL3RST
	EL3RST
	
# ELIBACC from the errno module
snippet ELIBACC
	ELIBACC
	
# ELIBBAD from the errno module
snippet ELIBBAD
	ELIBBAD
	
# ELIBEXEC from the errno module
snippet ELIBEXEC
	ELIBEXEC
	
# ELIBMAX from the errno module
snippet ELIBMAX
	ELIBMAX
	
# ELIBSCN from the errno module
snippet ELIBSCN
	ELIBSCN
	
# ELNRNG from the errno module
snippet ELNRNG
	ELNRNG
	
# ELOOP from the errno module
snippet ELOOP
	ELOOP
	
# EMFILE from the errno module
snippet EMFILE
	EMFILE
	
# EMLINK from the errno module
snippet EMLINK
	EMLINK
	
# EMSGSIZE from the errno module
snippet EMSGSIZE
	EMSGSIZE
	
# EMULTIHOP from the errno module
snippet EMULTIHOP
	EMULTIHOP
	
# ENAMETOOLONG from the errno module
snippet ENAMETOOLONG
	ENAMETOOLONG
	
# ENAVAIL from the errno module
snippet ENAVAIL
	ENAVAIL
	
# ENETDOWN from the errno module
snippet ENETDOWN
	ENETDOWN
	
# ENETRESET from the errno module
snippet ENETRESET
	ENETRESET
	
# ENETUNREACH from the errno module
snippet ENETUNREACH
	ENETUNREACH
	
# ENFILE from the errno module
snippet ENFILE
	ENFILE
	
# ENOANO from the errno module
snippet ENOANO
	ENOANO
	
# ENOBUFS from the errno module
snippet ENOBUFS
	ENOBUFS
	
# ENOCSI from the errno module
snippet ENOCSI
	ENOCSI
	
# ENODATA from the errno module
snippet ENODATA
	ENODATA
	
# ENODEV from the errno module
snippet ENODEV
	ENODEV
	
# ENOENT from the errno module
snippet ENOENT
	ENOENT
	
# ENOEXEC from the errno module
snippet ENOEXEC
	ENOEXEC
	
# ENOLCK from the errno module
snippet ENOLCK
	ENOLCK
	
# ENOLINK from the errno module
snippet ENOLINK
	ENOLINK
	
# ENOMEM from the errno module
snippet ENOMEM
	ENOMEM
	
# ENOMSG from the errno module
snippet ENOMSG
	ENOMSG
	
# ENONET from the errno module
snippet ENONET
	ENONET
	
# ENOPKG from the errno module
snippet ENOPKG
	ENOPKG
	
# ENOPROTOOPT from the errno module
snippet ENOPROTOOPT
	ENOPROTOOPT
	
# ENOSPC from the errno module
snippet ENOSPC
	ENOSPC
	
# ENOSR from the errno module
snippet ENOSR
	ENOSR
	
# ENOSTR from the errno module
snippet ENOSTR
	ENOSTR
	
# ENOSYS from the errno module
snippet ENOSYS
	ENOSYS
	
# ENOTBLK from the errno module
snippet ENOTBLK
	ENOTBLK
	
# ENOTCONN from the errno module
snippet ENOTCONN
	ENOTCONN
	
# ENOTDIR from the errno module
snippet ENOTDIR
	ENOTDIR
	
# ENOTEMPTY from the errno module
snippet ENOTEMPTY
	ENOTEMPTY
	
# ENOTNAM from the errno module
snippet ENOTNAM
	ENOTNAM
	
# ENOTSOCK from the errno module
snippet ENOTSOCK
	ENOTSOCK
	
# ENOTTY from the errno module
snippet ENOTTY
	ENOTTY
	
# ENOTUNIQ from the errno module
snippet ENOTUNIQ
	ENOTUNIQ
	
# ENXIO from the errno module
snippet ENXIO
	ENXIO
	
# EOPNOTSUPP from the errno module
snippet EOPNOTSUPP
	EOPNOTSUPP
	
# EOVERFLOW from the errno module
snippet EOVERFLOW
	EOVERFLOW
	
# EPERM from the errno module
snippet EPERM
	EPERM
	
# EPFNOSUPPORT from the errno module
snippet EPFNOSUPPORT
	EPFNOSUPPORT
	
# EPIPE from the errno module
snippet EPIPE
	EPIPE
	
# EPROTO from the errno module
snippet EPROTO
	EPROTO
	
# EPROTONOSUPPORT from the errno module
snippet EPROTONOSUPPORT
	EPROTONOSUPPORT
	
# EPROTOTYPE from the errno module
snippet EPROTOTYPE
	EPROTOTYPE
	
# ERANGE from the errno module
snippet ERANGE
	ERANGE
	
# EREMCHG from the errno module
snippet EREMCHG
	EREMCHG
	
# EREMOTE from the errno module
snippet EREMOTE
	EREMOTE
	
# EREMOTEIO from the errno module
snippet EREMOTEIO
	EREMOTEIO
	
# ERESTART from the errno module
snippet ERESTART
	ERESTART
	
# EROFS from the errno module
snippet EROFS
	EROFS
	
# ESHUTDOWN from the errno module
snippet ESHUTDOWN
	ESHUTDOWN
	
# ESOCKTNOSUPPORT from the errno module
snippet ESOCKTNOSUPPORT
	ESOCKTNOSUPPORT
	
# ESPIPE from the errno module
snippet ESPIPE
	ESPIPE
	
# ESRCH from the errno module
snippet ESRCH
	ESRCH
	
# ESRMNT from the errno module
snippet ESRMNT
	ESRMNT
	
# ESTALE from the errno module
snippet ESTALE
	ESTALE
	
# ESTRPIPE from the errno module
snippet ESTRPIPE
	ESTRPIPE
	
# ETIME from the errno module
snippet ETIME
	ETIME
	
# ETIMEDOUT from the errno module
snippet ETIMEDOUT
	ETIMEDOUT
	
# ETOOMANYREFS from the errno module
snippet ETOOMANYREFS
	ETOOMANYREFS
	
# ETXTBSY from the errno module
snippet ETXTBSY
	ETXTBSY
	
# EUCLEAN from the errno module
snippet EUCLEAN
	EUCLEAN
	
# EUNATCH from the errno module
snippet EUNATCH
	EUNATCH
	
# EUSERS from the errno module
snippet EUSERS
	EUSERS
	
# EWOULDBLOCK from the errno module
snippet EWOULDBLOCK
	EWOULDBLOCK
	
# EXDEV from the errno module
snippet EXDEV
	EXDEV
	
# EXFULL from the errno module
snippet EXFULL
	EXFULL
	
# errorcode() from the errno module
snippet errorcode
	errorcode()
	
# cancel_dump_traceback_later() from the faulthandler module
snippet cancel_dump_traceback_later
	cancel_dump_traceback_later(${1:})
	
# disable() from the faulthandler module
snippet disable
	disable(${1:})
	
# dump_traceback() from the faulthandler module
snippet dump_traceback
	dump_traceback(${1:file=sys.stderr}, ${2:all_threads=True})
	
# dump_traceback_later() from the faulthandler module
snippet dump_traceback_later
	dump_traceback_later(${1:timeout}, ${2:repeat=False}, ${3:file=sys.stderr}, ${4:exit=False})
	
# enable() from the faulthandler module
snippet enable
	enable(${1:file=sys.stderr}, ${2:all_threads=True})
	
# is_enabled() from the faulthandler module
snippet is_enabled
	is_enabled(${1:})
	
# register() from the faulthandler module
snippet register
	register(${1:signum}, ${2:file=sys.stderr}, ${3:all_threads=True}, ${4:chain=False})
	
# unregister() from the faulthandler module
snippet unregister
	unregister(${1:signum})
	
# fcntl() from the fcntl module
snippet fcntl
	fcntl(${1:fd}, ${2:cmd}, ${3:arg=0})
	
# flock() from the fcntl module
snippet flock
	flock(${1:fd}, ${2:operation})
	
# ioctl() from the fcntl module
snippet ioctl
	ioctl(${1:fd}, ${2:request}, ${3:arg=0}, ${4:mutate_flag=True})
	
# lockf() from the fcntl module
snippet lockf
	lockf(${1:fd,})
	
# DEFAULT_IGNORES from the filecmp module
snippet DEFAULT_IGNORES
	DEFAULT_IGNORES
	
# clear_cache() from the filecmp module
snippet clear_cache
	clear_cache(${1:})
	
# cmp() from the filecmp module
snippet cmp
	cmp(${1:f1}, ${2:f2}, ${3:shallow=True})
	
# cmpfiles() from the filecmp module
snippet cmpfiles
	cmpfiles(${1:dir1}, ${2:dir2}, ${3:common}, ${4:shallow=True})
	
# dircmp() from the filecmp module
snippet dircmp
	dircmp(${1:a,})
	
# FileInput from the fileinput module
snippet FileInput
	FileInput(${1:files=None}, ${2:inplace=False}, ${3:backup=''}, ${4:bufsize=0}, ${5:mode='r'}, ${6:openhook=None})
	
# close() from the fileinput module
snippet close
	close(${1:})
	
# filelineno() from the fileinput module
snippet filelineno
	filelineno(${1:})
	
# filename() from the fileinput module
snippet filename
	filename(${1:})
	
# fileno() from the fileinput module
snippet fileno
	fileno(${1:})
	
# hook_compressed() from the fileinput module
snippet hook_compressed
	hook_compressed(${1:filename}, ${2:mode})
	
# hook_encoded() from the fileinput module
snippet hook_encoded
	hook_encoded(${1:encoding})
	
# input() from the fileinput module
snippet input
	input(${1:files=None}, ${2:inplace=False}, ${3:backup=''}, ${4:bufsize=0}, ${5:mode='r'}, ${6:openhook=None})
	
# isfirstline() from the fileinput module
snippet isfirstline
	isfirstline(${1:})
	
# isstdin() from the fileinput module
snippet isstdin
	isstdin(${1:})
	
# lineno() from the fileinput module
snippet lineno
	lineno(${1:})
	
# nextfile() from the fileinput module
snippet nextfile
	nextfile(${1:})
	
# filter() from the fnmatch module
snippet filter
	filter(${1:names}, ${2:pattern})
	
# fnmatch() from the fnmatch module
snippet fnmatch
	fnmatch(${1:filename}, ${2:pattern})
	
# fnmatchcase() from the fnmatch module
snippet fnmatchcase
	fnmatchcase(${1:filename}, ${2:pattern})
	
# translate() from the fnmatch module
snippet translate
	translate(${1:pattern})
	
# AS_IS from the formatter module
snippet AS_IS
	AS_IS
	
# AbstractFormatter from the formatter module
snippet AbstractFormatter
	AbstractFormatter(${1:writer})
	
# AbstractWriter from the formatter module
snippet AbstractWriter
	AbstractWriter
	
# DumbWriter from the formatter module
snippet DumbWriter
	DumbWriter(${1:file=None}, ${2:maxcol=72})
	
# NullFormatter from the formatter module
snippet NullFormatter
	NullFormatter(${1:writer=None})
	
# NullWriter from the formatter module
snippet NullWriter
	NullWriter
	
# add_flowing_data() from the formatter module
snippet add_flowing_data
	add_flowing_data(${1:data})
	
# add_hor_rule() from the formatter module
snippet add_hor_rule
	add_hor_rule(${1:*args}, ${2:**kw})
	
# add_label_data() from the formatter module
snippet add_label_data
	add_label_data(${1:format}, ${2:counter})
	
# add_line_break() from the formatter module
snippet add_line_break
	add_line_break(${1:})
	
# add_literal_data() from the formatter module
snippet add_literal_data
	add_literal_data(${1:data})
	
# assert_line_data() from the formatter module
snippet assert_line_data
	assert_line_data(${1:flag=1})
	
# end_paragraph() from the formatter module
snippet end_paragraph
	end_paragraph(${1:blanklines})
	
# flush() from the formatter module
snippet flush
	flush(${1:})
	
# flush_softspace() from the formatter module
snippet flush_softspace
	flush_softspace(${1:})
	
# new_alignment() from the formatter module
snippet new_alignment
	new_alignment(${1:align})
	
# new_font() from the formatter module
snippet new_font
	new_font(${1:font})
	
# new_margin() from the formatter module
snippet new_margin
	new_margin(${1:margin}, ${2:level})
	
# new_spacing() from the formatter module
snippet new_spacing
	new_spacing(${1:spacing})
	
# new_styles() from the formatter module
snippet new_styles
	new_styles(${1:styles})
	
# pop_alignment() from the formatter module
snippet pop_alignment
	pop_alignment(${1:})
	
# pop_font() from the formatter module
snippet pop_font
	pop_font(${1:})
	
# pop_margin() from the formatter module
snippet pop_margin
	pop_margin(${1:})
	
# pop_style() from the formatter module
snippet pop_style
	pop_style(${1:n=1})
	
# push_alignment() from the formatter module
snippet push_alignment
	push_alignment(${1:align})
	
# push_font() from the formatter module
snippet push_font
	push_font(${1:}, ${2:size}, ${3:italic}, ${4:bold}, ${5:teletype})
	
# push_margin() from the formatter module
snippet push_margin
	push_margin(${1:margin})
	
# push_style() from the formatter module
snippet push_style
	push_style(${1:*styles})
	
# send_flowing_data() from the formatter module
snippet send_flowing_data
	send_flowing_data(${1:data})
	
# send_hor_rule() from the formatter module
snippet send_hor_rule
	send_hor_rule(${1:*args}, ${2:**kw})
	
# send_label_data() from the formatter module
snippet send_label_data
	send_label_data(${1:data})
	
# send_line_break() from the formatter module
snippet send_line_break
	send_line_break(${1:})
	
# send_literal_data() from the formatter module
snippet send_literal_data
	send_literal_data(${1:data})
	
# send_paragraph() from the formatter module
snippet send_paragraph
	send_paragraph(${1:blankline})
	
# set_spacing() from the formatter module
snippet set_spacing
	set_spacing(${1:spacing})
	
# writer() from the formatter module
snippet writer
	writer()
	
# FloatingPointError from the fpectl module
snippet FloatingPointError
	FloatingPointError
	
# turnoff_sigfpe() from the fpectl module
snippet turnoff_sigfpe
	turnoff_sigfpe(${1:})
	
# turnon_sigfpe() from the fpectl module
snippet turnon_sigfpe
	turnon_sigfpe(${1:})
	
# Fraction from the fractions module
snippet Fraction
	Fraction(${1:other_fraction})
	
# gcd() from the fractions module
snippet gcd
	gcd(${1:a,})
	
# FTP from the ftplib module
snippet FTP
	FTP(${1:host=''}, ${2:user=''}, ${3:passwd=''}, ${4:acct=''}, ${5:timeout=None}, ${6:source_address=None})
	
# FTP_TLS from the ftplib module
snippet FTP_TLS
	FTP_TLS(${1:host=''}, ${2:user=''}, ${3:passwd=''}, ${4:acct=''}, ${5:keyfile=None}, ${6:certfile=None}, ${7:context=None}, ${8:timeout=None}, ${9:source_address=None})
	
# abort() from the ftplib module
snippet abort
	abort(${1:})
	
# all_errors() from the ftplib module
snippet all_errors
	all_errors()
	
# auth() from the ftplib module
snippet auth
	auth(${1:})
	
# ccc() from the ftplib module
snippet ccc
	ccc(${1:})
	
# close() from the ftplib module
snippet close
	close(${1:})
	
# connect() from the ftplib module
snippet connect
	connect(${1:host=''}, ${2:port=0}, ${3:timeout=None}, ${4:source_address=None})
	
# cwd() from the ftplib module
snippet cwd
	cwd(${1:pathname})
	
# delete() from the ftplib module
snippet delete
	delete(${1:filename})
	
# dir() from the ftplib module
snippet dir
	dir(${1:argument[}, ${2:...]})
	
# error_perm() from the ftplib module
snippet error_perm
	error_perm()
	
# error_proto() from the ftplib module
snippet error_proto
	error_proto()
	
# error_reply() from the ftplib module
snippet error_reply
	error_reply()
	
# error_temp() from the ftplib module
snippet error_temp
	error_temp()
	
# getwelcome() from the ftplib module
snippet getwelcome
	getwelcome(${1:})
	
# login() from the ftplib module
snippet login
	login(${1:user='anonymous'}, ${2:passwd=''}, ${3:acct=''})
	
# mkd() from the ftplib module
snippet mkd
	mkd(${1:pathname})
	
# mlsd() from the ftplib module
snippet mlsd
	mlsd(${1:path=""}, ${2:facts=[]})
	
# nlst() from the ftplib module
snippet nlst
	nlst(${1:argument[}, ${2:...]})
	
# ntransfercmd() from the ftplib module
snippet ntransfercmd
	ntransfercmd(${1:cmd}, ${2:rest=None})
	
# prot_c() from the ftplib module
snippet prot_c
	prot_c(${1:})
	
# prot_p() from the ftplib module
snippet prot_p
	prot_p(${1:})
	
# pwd() from the ftplib module
snippet pwd
	pwd(${1:})
	
# quit() from the ftplib module
snippet quit
	quit(${1:})
	
# rename() from the ftplib module
snippet rename
	rename(${1:fromname}, ${2:toname})
	
# retrbinary() from the ftplib module
snippet retrbinary
	retrbinary(${1:cmd}, ${2:callback}, ${3:blocksize=8192}, ${4:rest=None})
	
# retrlines() from the ftplib module
snippet retrlines
	retrlines(${1:cmd}, ${2:callback=None})
	
# rmd() from the ftplib module
snippet rmd
	rmd(${1:dirname})
	
# sendcmd() from the ftplib module
snippet sendcmd
	sendcmd(${1:cmd})
	
# set_debuglevel() from the ftplib module
snippet set_debuglevel
	set_debuglevel(${1:level})
	
# set_pasv() from the ftplib module
snippet set_pasv
	set_pasv(${1:boolean})
	
# size() from the ftplib module
snippet size
	size(${1:filename})
	
# ssl_version() from the ftplib module
snippet ssl_version
	ssl_version()
	
# storbinary() from the ftplib module
snippet storbinary
	storbinary(${1:cmd}, ${2:fp}, ${3:blocksize=8192}, ${4:callback=None}, ${5:rest=None})
	
# storlines() from the ftplib module
snippet storlines
	storlines(${1:cmd}, ${2:fp}, ${3:callback=None})
	
# transfercmd() from the ftplib module
snippet transfercmd
	transfercmd(${1:cmd}, ${2:rest=None})
	
# voidcmd() from the ftplib module
snippet voidcmd
	voidcmd(${1:cmd})
	
# args() from the functools module
snippet args
	args()
	
# cmp_to_key() from the functools module
snippet cmp_to_key
	cmp_to_key(${1:func})
	
# func() from the functools module
snippet func
	func()
	
# keywords() from the functools module
snippet keywords
	keywords()
	
# lru_cache() from the functools module
snippet lru_cache
	lru_cache(${1:maxsize=128}, ${2:typed=False})
	
# partial() from the functools module
snippet partial
	partial(${1:func}, ${2:*args}, ${3:**keywords})
	
# partialmethod() from the functools module
snippet partialmethod
	partialmethod(${1:func}, ${2:*args}, ${3:**keywords})
	
# reduce() from the functools module
snippet reduce
	reduce(${1:function}, ${2:iterable[}, ${3:initializer]})
	
# singledispatch() from the functools module
snippet singledispatch
	singledispatch(${1:default})
	
# total_ordering() from the functools module
snippet total_ordering
	total_ordering()
	
# update_wrapper() from the functools module
snippet update_wrapper
	update_wrapper(${1:wrapper}, ${2:wrapped}, ${3:assigned=WRAPPER_ASSIGNMENTS}, ${4:updated=WRAPPER_UPDATES})
	
# wraps() from the functools module
snippet wraps
	wraps(${1:wrapped,})
	
# DEBUG_COLLECTABLE from the gc module
snippet DEBUG_COLLECTABLE
	DEBUG_COLLECTABLE
	
# DEBUG_LEAK from the gc module
snippet DEBUG_LEAK
	DEBUG_LEAK
	
# DEBUG_SAVEALL from the gc module
snippet DEBUG_SAVEALL
	DEBUG_SAVEALL
	
# DEBUG_STATS from the gc module
snippet DEBUG_STATS
	DEBUG_STATS
	
# DEBUG_UNCOLLECTABLE from the gc module
snippet DEBUG_UNCOLLECTABLE
	DEBUG_UNCOLLECTABLE
	
# callbacks() from the gc module
snippet callbacks
	callbacks()
	
# collect() from the gc module
snippet collect
	collect(${1:generations=2})
	
# disable() from the gc module
snippet disable
	disable(${1:})
	
# enable() from the gc module
snippet enable
	enable(${1:})
	
# garbage() from the gc module
snippet garbage
	garbage()
	
# get_count() from the gc module
snippet get_count
	get_count(${1:})
	
# get_debug() from the gc module
snippet get_debug
	get_debug(${1:})
	
# get_objects() from the gc module
snippet get_objects
	get_objects(${1:})
	
# get_referents() from the gc module
snippet get_referents
	get_referents(${1:*objs})
	
# get_referrers() from the gc module
snippet get_referrers
	get_referrers(${1:*objs})
	
# get_stats() from the gc module
snippet get_stats
	get_stats(${1:})
	
# get_threshold() from the gc module
snippet get_threshold
	get_threshold(${1:})
	
# is_tracked() from the gc module
snippet is_tracked
	is_tracked(${1:obj})
	
# isenabled() from the gc module
snippet isenabled
	isenabled(${1:})
	
# set_debug() from the gc module
snippet set_debug
	set_debug(${1:flags})
	
# set_threshold() from the gc module
snippet set_threshold
	set_threshold(${1:threshold0[,})
	
# GetoptError from the getopt module
snippet GetoptError
	GetoptError
	
# error() from the getopt module
snippet error
	error()
	
# getopt() from the getopt module
snippet getopt
	getopt(${1:args}, ${2:shortopts}, ${3:longopts=[]})
	
# gnu_getopt() from the getopt module
snippet gnu_getopt
	gnu_getopt(${1:args,})
	
# GetPassWarning from the getpass module
snippet GetPassWarning
	GetPassWarning
	
# getpass() from the getpass module
snippet getpass
	getpass(${1:prompt='Password: '}, ${2:stream=None})
	
# getuser() from the getpass module
snippet getuser
	getuser(${1:})
	
# NullTranslations from the gettext module
snippet NullTranslations
	NullTranslations(${1:fp=None})
	
# bind_textdomain_codeset() from the gettext module
snippet bind_textdomain_codeset
	bind_textdomain_codeset(${1:domain}, ${2:codeset=None})
	
# bindtextdomain() from the gettext module
snippet bindtextdomain
	bindtextdomain(${1:domain}, ${2:localedir=None})
	
# dgettext() from the gettext module
snippet dgettext
	dgettext(${1:domain}, ${2:message})
	
# dngettext() from the gettext module
snippet dngettext
	dngettext(${1:domain}, ${2:singular}, ${3:plural}, ${4:n})
	
# find() from the gettext module
snippet find
	find(${1:domain}, ${2:localedir=None}, ${3:languages=None}, ${4:all=False})
	
# gettext() from the gettext module
snippet gettext
	gettext(${1:message})
	
# install() from the gettext module
snippet install
	install(${1:domain}, ${2:localedir=None}, ${3:codeset=None}, ${4:names=None})
	
# ldgettext() from the gettext module
snippet ldgettext
	ldgettext(${1:domain}, ${2:message})
	
# ldngettext() from the gettext module
snippet ldngettext
	ldngettext(${1:domain}, ${2:singular}, ${3:plural}, ${4:n})
	
# lgettext() from the gettext module
snippet lgettext
	lgettext(${1:message})
	
# lngettext() from the gettext module
snippet lngettext
	lngettext(${1:singular}, ${2:plural}, ${3:n})
	
# ngettext() from the gettext module
snippet ngettext
	ngettext(${1:singular}, ${2:plural}, ${3:n})
	
# textdomain() from the gettext module
snippet textdomain
	textdomain(${1:domain=None})
	
# translation() from the gettext module
snippet translation
	translation(${1:domain,})
	
# escape() from the glob module
snippet escape
	escape(${1:pathname})
	
# glob() from the glob module
snippet glob
	glob(${1:pathname}, ${2:*}, ${3:recursive=False})
	
# iglob() from the glob module
snippet iglob
	iglob(${1:pathname,})
	
# getgrall() from the grp module
snippet getgrall
	getgrall(${1:})
	
# getgrgid() from the grp module
snippet getgrgid
	getgrgid(${1:gid})
	
# getgrnam() from the grp module
snippet getgrnam
	getgrnam(${1:name})
	
# GzipFile from the gzip module
snippet GzipFile
	GzipFile(${1:filename=None}, ${2:mode=None}, ${3:compresslevel=9}, ${4:fileobj=None}, ${5:mtime=None})
	
# compress() from the gzip module
snippet compress
	compress(${1:data}, ${2:compresslevel=9})
	
# decompress() from the gzip module
snippet decompress
	decompress(${1:data})
	
# open() from the gzip module
snippet open
	open(${1:filename,})
	
# algorithms_available() from the hashlib module
snippet algorithms_available
	algorithms_available()
	
# algorithms_guaranteed() from the hashlib module
snippet algorithms_guaranteed
	algorithms_guaranteed()
	
# block_size() from the hashlib module
snippet block_size
	block_size()
	
# copy() from the hashlib module
snippet copy
	copy(${1:})
	
# digest() from the hashlib module
snippet digest
	digest(${1:})
	
# digest_size() from the hashlib module
snippet digest_size
	digest_size()
	
# hexdigest() from the hashlib module
snippet hexdigest
	hexdigest(${1:})
	
# name() from the hashlib module
snippet name
	name()
	
# new() from the hashlib module
snippet new
	new(${1:name[}, ${2:data]})
	
# pbkdf2_hmac() from the hashlib module
snippet pbkdf2_hmac
	pbkdf2_hmac(${1:name}, ${2:password}, ${3:salt}, ${4:rounds}, ${5:dklen=None})
	
# update() from the hashlib module
snippet update
	update(${1:arg})
	
# heapify() from the heapq module
snippet heapify
	heapify(${1:x})
	
# heappop() from the heapq module
snippet heappop
	heappop(${1:heap})
	
# heappush() from the heapq module
snippet heappush
	heappush(${1:heap}, ${2:item})
	
# heappushpop() from the heapq module
snippet heappushpop
	heappushpop(${1:heap}, ${2:item})
	
# heapreplace() from the heapq module
snippet heapreplace
	heapreplace(${1:heap}, ${2:item})
	
# merge() from the heapq module
snippet merge
	merge(${1:*iterables}, ${2:key=None}, ${3:reverse=False})
	
# nlargest() from the heapq module
snippet nlargest
	nlargest(${1:n}, ${2:iterable}, ${3:key=None})
	
# nsmallest() from the heapq module
snippet nsmallest
	nsmallest(${1:n,})
	
# block_size() from the hmac module
snippet block_size
	block_size()
	
# compare_digest() from the hmac module
snippet compare_digest
	compare_digest(${1:a}, ${2:b})
	
# copy() from the hmac module
snippet copy
	copy(${1:})
	
# digest() from the hmac module
snippet digest
	digest(${1:})
	
# digest_size() from the hmac module
snippet digest_size
	digest_size()
	
# hexdigest() from the hmac module
snippet hexdigest
	hexdigest(${1:})
	
# name() from the hmac module
snippet name
	name()
	
# new() from the hmac module
snippet new
	new(${1:key}, ${2:msg=None}, ${3:digestmod=None})
	
# update() from the hmac module
snippet update
	update(${1:msg})
	
# escape() from the html module
snippet escape
	escape(${1:s}, ${2:quote=True})
	
# unescape() from the html module
snippet unescape
	unescape(${1:s})
	
# codepoint2name() from the html.entities module
snippet codepoint2name
	codepoint2name()
	
# entitydefs() from the html.entities module
snippet entitydefs
	entitydefs()
	
# html5() from the html.entities module
snippet html5
	html5()
	
# name2codepoint() from the html.entities module
snippet name2codepoint
	name2codepoint()
	
# HTMLParser from the html.parser module
snippet HTMLParser
	HTMLParser(${1:*}, ${2:convert_charrefs=True})
	
# close() from the html.parser module
snippet close
	close(${1:})
	
# feed() from the html.parser module
snippet feed
	feed(${1:data})
	
# get_starttag_text() from the html.parser module
snippet get_starttag_text
	get_starttag_text(${1:})
	
# getpos() from the html.parser module
snippet getpos
	getpos(${1:})
	
# handle_charref() from the html.parser module
snippet handle_charref
	handle_charref(${1:name})
	
# handle_comment() from the html.parser module
snippet handle_comment
	handle_comment(${1:data})
	
# handle_data() from the html.parser module
snippet handle_data
	handle_data(${1:data})
	
# handle_decl() from the html.parser module
snippet handle_decl
	handle_decl(${1:decl})
	
# handle_endtag() from the html.parser module
snippet handle_endtag
	handle_endtag(${1:tag})
	
# handle_entityref() from the html.parser module
snippet handle_entityref
	handle_entityref(${1:name})
	
# handle_pi() from the html.parser module
snippet handle_pi
	handle_pi(${1:data})
	
# handle_startendtag() from the html.parser module
snippet handle_startendtag
	handle_startendtag(${1:tag}, ${2:attrs})
	
# handle_starttag() from the html.parser module
snippet handle_starttag
	handle_starttag(${1:tag}, ${2:attrs})
	
# reset() from the html.parser module
snippet reset
	reset(${1:})
	
# unknown_decl() from the html.parser module
snippet unknown_decl
	unknown_decl(${1:data})
	
# HTTPStatus from the http module
snippet HTTPStatus
	HTTPStatus
	
# BadStatusLine from the http.client module
snippet BadStatusLine
	BadStatusLine
	
# CannotSendHeader from the http.client module
snippet CannotSendHeader
	CannotSendHeader
	
# CannotSendRequest from the http.client module
snippet CannotSendRequest
	CannotSendRequest
	
# HTTPConnection from the http.client module
snippet HTTPConnection
	HTTPConnection(${1:host}, ${2:port=None}, ${3:[timeout}, ${4:]source_address=None})
	
# HTTPException from the http.client module
snippet HTTPException
	HTTPException
	
# HTTPResponse from the http.client module
snippet HTTPResponse
	HTTPResponse(${1:sock}, ${2:debuglevel=0}, ${3:method=None}, ${4:url=None})
	
# HTTPSConnection from the http.client module
snippet HTTPSConnection
	HTTPSConnection(${1:host}, ${2:port=None}, ${3:key_file=None}, ${4:cert_file=None}, ${5:[timeout}, ${6:]source_address=None}, ${7:*}, ${8:context=None}, ${9:check_hostname=None})
	
# HTTPS_PORT from the http.client module
snippet HTTPS_PORT
	HTTPS_PORT
	
# HTTP_PORT from the http.client module
snippet HTTP_PORT
	HTTP_PORT
	
# ImproperConnectionState from the http.client module
snippet ImproperConnectionState
	ImproperConnectionState
	
# IncompleteRead from the http.client module
snippet IncompleteRead
	IncompleteRead
	
# InvalidURL from the http.client module
snippet InvalidURL
	InvalidURL
	
# LineTooLong from the http.client module
snippet LineTooLong
	LineTooLong
	
# NotConnected from the http.client module
snippet NotConnected
	NotConnected
	
# RemoteDisconnected from the http.client module
snippet RemoteDisconnected
	RemoteDisconnected
	
# ResponseNotReady from the http.client module
snippet ResponseNotReady
	ResponseNotReady
	
# UnimplementedFileMode from the http.client module
snippet UnimplementedFileMode
	UnimplementedFileMode
	
# UnknownProtocol from the http.client module
snippet UnknownProtocol
	UnknownProtocol
	
# UnknownTransferEncoding from the http.client module
snippet UnknownTransferEncoding
	UnknownTransferEncoding
	
# close() from the http.client module
snippet close
	close(${1:})
	
# closed() from the http.client module
snippet closed
	closed()
	
# connect() from the http.client module
snippet connect
	connect(${1:})
	
# debuglevel() from the http.client module
snippet debuglevel
	debuglevel()
	
# endheaders() from the http.client module
snippet endheaders
	endheaders(${1:message_body=None})
	
# fileno() from the http.client module
snippet fileno
	fileno(${1:})
	
# getheader() from the http.client module
snippet getheader
	getheader(${1:name}, ${2:default=None})
	
# getheaders() from the http.client module
snippet getheaders
	getheaders(${1:})
	
# getresponse() from the http.client module
snippet getresponse
	getresponse(${1:})
	
# msg() from the http.client module
snippet msg
	msg()
	
# putheader() from the http.client module
snippet putheader
	putheader(${1:header}, ${2:argument[}, ${3:...]})
	
# putrequest() from the http.client module
snippet putrequest
	putrequest(${1:request}, ${2:selector}, ${3:skip_host=False}, ${4:skip_accept_encoding=False})
	
# read() from the http.client module
snippet read
	read(${1:[amt]})
	
# readinto() from the http.client module
snippet readinto
	readinto(${1:b})
	
# reason() from the http.client module
snippet reason
	reason()
	
# request() from the http.client module
snippet request
	request(${1:method}, ${2:url}, ${3:body=None}, ${4:headers={}})
	
# responses() from the http.client module
snippet responses
	responses()
	
# send() from the http.client module
snippet send
	send(${1:data})
	
# set_debuglevel() from the http.client module
snippet set_debuglevel
	set_debuglevel(${1:level})
	
# set_tunnel() from the http.client module
snippet set_tunnel
	set_tunnel(${1:host}, ${2:port=None}, ${3:headers=None})
	
# status() from the http.client module
snippet status
	status()
	
# version() from the http.client module
snippet version
	version()
	
# Cookie from the http.cookiejar module
snippet Cookie
	Cookie
	
# CookieJar from the http.cookiejar module
snippet CookieJar
	CookieJar(${1:policy=None})
	
# CookiePolicy from the http.cookiejar module
snippet CookiePolicy
	CookiePolicy
	
# DefaultCookiePolicy from the http.cookiejar module
snippet DefaultCookiePolicy
	DefaultCookiePolicy(${1:blocked_domains=None}, ${2:allowed_domains=None}, ${3:netscape=True}, ${4:rfc2965=False}, ${5:rfc2109_as_netscape=None}, ${6:hide_cookie2=False}, ${7:strict_domain=False}, ${8:strict_rfc2965_unverifiable=True}, ${9:strict_ns_unverifiable=False}, ${10:strict_ns_domain=DefaultCookiePolicy.DomainLiberal}, ${11:strict_ns_set_initial_dollar=False}, ${12:strict_ns_set_path=False})
	
# DomainLiberal from the http.cookiejar module
snippet DomainLiberal
	DomainLiberal
	
# DomainRFC2965Match from the http.cookiejar module
snippet DomainRFC2965Match
	DomainRFC2965Match
	
# DomainStrict from the http.cookiejar module
snippet DomainStrict
	DomainStrict
	
# DomainStrictNoDots from the http.cookiejar module
snippet DomainStrictNoDots
	DomainStrictNoDots
	
# DomainStrictNonDomain from the http.cookiejar module
snippet DomainStrictNonDomain
	DomainStrictNonDomain
	
# FileCookieJar from the http.cookiejar module
snippet FileCookieJar
	FileCookieJar(${1:filename}, ${2:delayload=None}, ${3:policy=None})
	
# LWPCookieJar from the http.cookiejar module
snippet LWPCookieJar
	LWPCookieJar(${1:filename}, ${2:delayload=None}, ${3:policy=None})
	
# LoadError from the http.cookiejar module
snippet LoadError
	LoadError
	
# MozillaCookieJar from the http.cookiejar module
snippet MozillaCookieJar
	MozillaCookieJar(${1:filename}, ${2:delayload=None}, ${3:policy=None})
	
# add_cookie_header() from the http.cookiejar module
snippet add_cookie_header
	add_cookie_header(${1:request})
	
# allowed_domains() from the http.cookiejar module
snippet allowed_domains
	allowed_domains(${1:})
	
# blocked_domains() from the http.cookiejar module
snippet blocked_domains
	blocked_domains(${1:})
	
# clear() from the http.cookiejar module
snippet clear
	clear(${1:[domain[}, ${2:path[}, ${3:name]]]})
	
# clear_session_cookies() from the http.cookiejar module
snippet clear_session_cookies
	clear_session_cookies(${1:})
	
# comment() from the http.cookiejar module
snippet comment
	comment()
	
# comment_url() from the http.cookiejar module
snippet comment_url
	comment_url()
	
# delayload() from the http.cookiejar module
snippet delayload
	delayload()
	
# discard() from the http.cookiejar module
snippet discard
	discard()
	
# domain_initial_dot() from the http.cookiejar module
snippet domain_initial_dot
	domain_initial_dot()
	
# domain_return_ok() from the http.cookiejar module
snippet domain_return_ok
	domain_return_ok(${1:domain}, ${2:request})
	
# domain_specified() from the http.cookiejar module
snippet domain_specified
	domain_specified()
	
# expires() from the http.cookiejar module
snippet expires
	expires()
	
# extract_cookies() from the http.cookiejar module
snippet extract_cookies
	extract_cookies(${1:response}, ${2:request})
	
# filename() from the http.cookiejar module
snippet filename
	filename()
	
# get_nonstandard_attr() from the http.cookiejar module
snippet get_nonstandard_attr
	get_nonstandard_attr(${1:name}, ${2:default=None})
	
# has_nonstandard_attr() from the http.cookiejar module
snippet has_nonstandard_attr
	has_nonstandard_attr(${1:name})
	
# hide_cookie2() from the http.cookiejar module
snippet hide_cookie2
	hide_cookie2()
	
# is_blocked() from the http.cookiejar module
snippet is_blocked
	is_blocked(${1:domain})
	
# is_expired() from the http.cookiejar module
snippet is_expired
	is_expired(${1:now=None})
	
# is_not_allowed() from the http.cookiejar module
snippet is_not_allowed
	is_not_allowed(${1:domain})
	
# load() from the http.cookiejar module
snippet load
	load(${1:filename=None}, ${2:ignore_discard=False}, ${3:ignore_expires=False})
	
# make_cookies() from the http.cookiejar module
snippet make_cookies
	make_cookies(${1:response}, ${2:request})
	
# name() from the http.cookiejar module
snippet name
	name()
	
# netscape() from the http.cookiejar module
snippet netscape
	netscape()
	
# path() from the http.cookiejar module
snippet path
	path()
	
# path_return_ok() from the http.cookiejar module
snippet path_return_ok
	path_return_ok(${1:path}, ${2:request})
	
# port() from the http.cookiejar module
snippet port
	port()
	
# port_specified() from the http.cookiejar module
snippet port_specified
	port_specified()
	
# return_ok() from the http.cookiejar module
snippet return_ok
	return_ok(${1:cookie}, ${2:request})
	
# revert() from the http.cookiejar module
snippet revert
	revert(${1:filename=None}, ${2:ignore_discard=False}, ${3:ignore_expires=False})
	
# rfc2109() from the http.cookiejar module
snippet rfc2109
	rfc2109()
	
# rfc2109_as_netscape() from the http.cookiejar module
snippet rfc2109_as_netscape
	rfc2109_as_netscape()
	
# rfc2965() from the http.cookiejar module
snippet rfc2965
	rfc2965()
	
# save() from the http.cookiejar module
snippet save
	save(${1:filename=None}, ${2:ignore_discard=False}, ${3:ignore_expires=False})
	
# secure() from the http.cookiejar module
snippet secure
	secure()
	
# set_allowed_domains() from the http.cookiejar module
snippet set_allowed_domains
	set_allowed_domains(${1:allowed_domains})
	
# set_blocked_domains() from the http.cookiejar module
snippet set_blocked_domains
	set_blocked_domains(${1:blocked_domains})
	
# set_cookie() from the http.cookiejar module
snippet set_cookie
	set_cookie(${1:cookie})
	
# set_cookie_if_ok() from the http.cookiejar module
snippet set_cookie_if_ok
	set_cookie_if_ok(${1:cookie}, ${2:request})
	
# set_nonstandard_attr() from the http.cookiejar module
snippet set_nonstandard_attr
	set_nonstandard_attr(${1:name}, ${2:value})
	
# set_ok() from the http.cookiejar module
snippet set_ok
	set_ok(${1:cookie}, ${2:request})
	
# set_policy() from the http.cookiejar module
snippet set_policy
	set_policy(${1:policy})
	
# strict_domain() from the http.cookiejar module
snippet strict_domain
	strict_domain()
	
# strict_ns_domain() from the http.cookiejar module
snippet strict_ns_domain
	strict_ns_domain()
	
# strict_ns_set_initial_dollar() from the http.cookiejar module
snippet strict_ns_set_initial_dollar
	strict_ns_set_initial_dollar()
	
# strict_ns_set_path() from the http.cookiejar module
snippet strict_ns_set_path
	strict_ns_set_path()
	
# strict_ns_unverifiable() from the http.cookiejar module
snippet strict_ns_unverifiable
	strict_ns_unverifiable()
	
# strict_rfc2965_unverifiable() from the http.cookiejar module
snippet strict_rfc2965_unverifiable
	strict_rfc2965_unverifiable()
	
# value() from the http.cookiejar module
snippet value
	value()
	
# version() from the http.cookiejar module
snippet version
	version()
	
# BaseCookie from the http.cookies module
snippet BaseCookie
	BaseCookie(${1:[input]})
	
# CookieError from the http.cookies module
snippet CookieError
	CookieError
	
# Morsel from the http.cookies module
snippet Morsel
	Morsel
	
# OutputString from the http.cookies module
snippet OutputString
	OutputString(${1:attrs=None})
	
# SimpleCookie from the http.cookies module
snippet SimpleCookie
	SimpleCookie(${1:[input]})
	
# coded_value() from the http.cookies module
snippet coded_value
	coded_value()
	
# copy() from the http.cookies module
snippet copy
	copy(${1:value})
	
# isReservedKey() from the http.cookies module
snippet isReservedKey
	isReservedKey(${1:K})
	
# js_output() from the http.cookies module
snippet js_output
	js_output(${1:attrs=None})
	
# key() from the http.cookies module
snippet key
	key()
	
# load() from the http.cookies module
snippet load
	load(${1:rawdata})
	
# output() from the http.cookies module
snippet output
	output(${1:attrs=None}, ${2:header='Set-Cookie:'})
	
# set() from the http.cookies module
snippet set
	set(${1:key}, ${2:value}, ${3:coded_value})
	
# setdefault() from the http.cookies module
snippet setdefault
	setdefault(${1:key}, ${2:value=None})
	
# update() from the http.cookies module
snippet update
	update(${1:values})
	
# value() from the http.cookies module
snippet value
	value()
	
# value_decode() from the http.cookies module
snippet value_decode
	value_decode(${1:val})
	
# value_encode() from the http.cookies module
snippet value_encode
	value_encode(${1:val})
	
# BaseHTTPRequestHandler from the http.server module
snippet BaseHTTPRequestHandler
	BaseHTTPRequestHandler(${1:request}, ${2:client_address}, ${3:server})
	
# CGIHTTPRequestHandler from the http.server module
snippet CGIHTTPRequestHandler
	CGIHTTPRequestHandler(${1:request}, ${2:client_address}, ${3:server})
	
# HTTPServer from the http.server module
snippet HTTPServer
	HTTPServer(${1:server_address}, ${2:RequestHandlerClass})
	
# SimpleHTTPRequestHandler from the http.server module
snippet SimpleHTTPRequestHandler
	SimpleHTTPRequestHandler(${1:request,})
	
# IMAP4 from the imaplib module
snippet IMAP4
	IMAP4(${1:host=''}, ${2:port=IMAP4_PORT})
	
# IMAP4_SSL from the imaplib module
snippet IMAP4_SSL
	IMAP4_SSL(${1:host=''}, ${2:port=IMAP4_SSL_PORT}, ${3:keyfile=None}, ${4:certfile=None}, ${5:ssl_context=None})
	
# IMAP4_stream from the imaplib module
snippet IMAP4_stream
	IMAP4_stream(${1:command})
	
# Int2AP from the imaplib module
snippet Int2AP
	Int2AP(${1:num})
	
# Internaldate2tuple from the imaplib module
snippet Internaldate2tuple
	Internaldate2tuple(${1:datestr})
	
# PROTOCOL_VERSION from the imaplib module
snippet PROTOCOL_VERSION
	PROTOCOL_VERSION
	
# ParseFlags from the imaplib module
snippet ParseFlags
	ParseFlags(${1:flagstr})
	
# Time2Internaldate from the imaplib module
snippet Time2Internaldate
	Time2Internaldate(${1:date_time})
	
# abort() from the imaplib module
snippet abort
	abort()
	
# append() from the imaplib module
snippet append
	append(${1:mailbox}, ${2:flags}, ${3:date_time}, ${4:message})
	
# authenticate() from the imaplib module
snippet authenticate
	authenticate(${1:mechanism}, ${2:authobject})
	
# check() from the imaplib module
snippet check
	check(${1:})
	
# close() from the imaplib module
snippet close
	close(${1:})
	
# copy() from the imaplib module
snippet copy
	copy(${1:message_set}, ${2:new_mailbox})
	
# create() from the imaplib module
snippet create
	create(${1:mailbox})
	
# debug() from the imaplib module
snippet debug
	debug()
	
# delete() from the imaplib module
snippet delete
	delete(${1:mailbox})
	
# deleteacl() from the imaplib module
snippet deleteacl
	deleteacl(${1:mailbox}, ${2:who})
	
# enable() from the imaplib module
snippet enable
	enable(${1:capability})
	
# error() from the imaplib module
snippet error
	error()
	
# expunge() from the imaplib module
snippet expunge
	expunge(${1:})
	
# fetch() from the imaplib module
snippet fetch
	fetch(${1:message_set}, ${2:message_parts})
	
# getacl() from the imaplib module
snippet getacl
	getacl(${1:mailbox})
	
# getannotation() from the imaplib module
snippet getannotation
	getannotation(${1:mailbox}, ${2:entry}, ${3:attribute})
	
# getquota() from the imaplib module
snippet getquota
	getquota(${1:root})
	
# getquotaroot() from the imaplib module
snippet getquotaroot
	getquotaroot(${1:mailbox})
	
# list() from the imaplib module
snippet list
	list(${1:[directory[}, ${2:pattern]]})
	
# login() from the imaplib module
snippet login
	login(${1:user}, ${2:password})
	
# login_cram_md5() from the imaplib module
snippet login_cram_md5
	login_cram_md5(${1:user}, ${2:password})
	
# logout() from the imaplib module
snippet logout
	logout(${1:})
	
# lsub() from the imaplib module
snippet lsub
	lsub(${1:directory='""'}, ${2:pattern='*'})
	
# myrights() from the imaplib module
snippet myrights
	myrights(${1:mailbox})
	
# namespace() from the imaplib module
snippet namespace
	namespace(${1:})
	
# noop() from the imaplib module
snippet noop
	noop(${1:})
	
# open() from the imaplib module
snippet open
	open(${1:host}, ${2:port})
	
# partial() from the imaplib module
snippet partial
	partial(${1:message_num}, ${2:message_part}, ${3:start}, ${4:length})
	
# proxyauth() from the imaplib module
snippet proxyauth
	proxyauth(${1:user})
	
# read() from the imaplib module
snippet read
	read(${1:size})
	
# readline() from the imaplib module
snippet readline
	readline(${1:})
	
# readonly() from the imaplib module
snippet readonly
	readonly()
	
# recent() from the imaplib module
snippet recent
	recent(${1:})
	
# rename() from the imaplib module
snippet rename
	rename(${1:oldmailbox}, ${2:newmailbox})
	
# response() from the imaplib module
snippet response
	response(${1:code})
	
# search() from the imaplib module
snippet search
	search(${1:charset}, ${2:criterion[}, ${3:...]})
	
# select() from the imaplib module
snippet select
	select(${1:mailbox='INBOX'}, ${2:readonly=False})
	
# send() from the imaplib module
snippet send
	send(${1:data})
	
# setacl() from the imaplib module
snippet setacl
	setacl(${1:mailbox}, ${2:who}, ${3:what})
	
# setannotation() from the imaplib module
snippet setannotation
	setannotation(${1:mailbox}, ${2:entry}, ${3:attribute[}, ${4:...]})
	
# setquota() from the imaplib module
snippet setquota
	setquota(${1:root}, ${2:limits})
	
# shutdown() from the imaplib module
snippet shutdown
	shutdown(${1:})
	
# socket() from the imaplib module
snippet socket
	socket(${1:})
	
# sort() from the imaplib module
snippet sort
	sort(${1:sort_criteria}, ${2:charset}, ${3:search_criterion[}, ${4:...]})
	
# starttls() from the imaplib module
snippet starttls
	starttls(${1:ssl_context=None})
	
# status() from the imaplib module
snippet status
	status(${1:mailbox}, ${2:names})
	
# store() from the imaplib module
snippet store
	store(${1:message_set}, ${2:command}, ${3:flag_list})
	
# subscribe() from the imaplib module
snippet subscribe
	subscribe(${1:mailbox})
	
# thread() from the imaplib module
snippet thread
	thread(${1:threading_algorithm}, ${2:charset}, ${3:search_criterion[}, ${4:...]})
	
# uid() from the imaplib module
snippet uid
	uid(${1:command}, ${2:arg[}, ${3:...]})
	
# unsubscribe() from the imaplib module
snippet unsubscribe
	unsubscribe(${1:mailbox})
	
# utf8_enabled() from the imaplib module
snippet utf8_enabled
	utf8_enabled()
	
# xatom() from the imaplib module
snippet xatom
	xatom(${1:name[,})
	
# tests() from the imghdr module
snippet tests
	tests()
	
# what() from the imghdr module
snippet what
	what(${1:filename,})
	
# C_BUILTIN from the imp module
snippet C_BUILTIN
	C_BUILTIN
	
# C_EXTENSION from the imp module
snippet C_EXTENSION
	C_EXTENSION
	
# NullImporter from the imp module
snippet NullImporter
	NullImporter(${1:path_string})
	
# PKG_DIRECTORY from the imp module
snippet PKG_DIRECTORY
	PKG_DIRECTORY
	
# PY_COMPILED from the imp module
snippet PY_COMPILED
	PY_COMPILED
	
# PY_FROZEN from the imp module
snippet PY_FROZEN
	PY_FROZEN
	
# PY_SOURCE from the imp module
snippet PY_SOURCE
	PY_SOURCE
	
# acquire_lock() from the imp module
snippet acquire_lock
	acquire_lock(${1:})
	
# cache_from_source() from the imp module
snippet cache_from_source
	cache_from_source(${1:path}, ${2:debug_override=None})
	
# find_module() from the imp module
snippet find_module
	find_module(${1:name[}, ${2:path]})
	
# get_magic() from the imp module
snippet get_magic
	get_magic(${1:})
	
# get_suffixes() from the imp module
snippet get_suffixes
	get_suffixes(${1:})
	
# get_tag() from the imp module
snippet get_tag
	get_tag(${1:})
	
# load_module() from the imp module
snippet load_module
	load_module(${1:name}, ${2:file}, ${3:pathname}, ${4:description})
	
# lock_held() from the imp module
snippet lock_held
	lock_held(${1:})
	
# new_module() from the imp module
snippet new_module
	new_module(${1:name})
	
# release_lock() from the imp module
snippet release_lock
	release_lock(${1:})
	
# reload() from the imp module
snippet reload
	reload(${1:module})
	
# source_from_cache() from the imp module
snippet source_from_cache
	source_from_cache(${1:path})
	
# BYTECODE_SUFFIXES from the importlib module
snippet BYTECODE_SUFFIXES
	BYTECODE_SUFFIXES
	
# BuiltinImporter from the importlib module
snippet BuiltinImporter
	BuiltinImporter
	
# DEBUG_BYTECODE_SUFFIXES from the importlib module
snippet DEBUG_BYTECODE_SUFFIXES
	DEBUG_BYTECODE_SUFFIXES
	
# EXTENSION_SUFFIXES from the importlib module
snippet EXTENSION_SUFFIXES
	EXTENSION_SUFFIXES
	
# ExecutionLoader from the importlib module
snippet ExecutionLoader
	ExecutionLoader
	
# ExtensionFileLoader from the importlib module
snippet ExtensionFileLoader
	ExtensionFileLoader(${1:fullname}, ${2:path})
	
# FileFinder from the importlib module
snippet FileFinder
	FileFinder(${1:path}, ${2:*loader_details})
	
# FileLoader from the importlib module
snippet FileLoader
	FileLoader(${1:fullname}, ${2:path})
	
# Finder from the importlib module
snippet Finder
	Finder
	
# FrozenImporter from the importlib module
snippet FrozenImporter
	FrozenImporter
	
# InspectLoader from the importlib module
snippet InspectLoader
	InspectLoader
	
# LazyLoader from the importlib module
snippet LazyLoader
	LazyLoader(${1:loader})
	
# Loader from the importlib module
snippet Loader
	Loader
	
# MAGIC_NUMBER from the importlib module
snippet MAGIC_NUMBER
	MAGIC_NUMBER
	
# MetaPathFinder from the importlib module
snippet MetaPathFinder
	MetaPathFinder
	
# ModuleSpec from the importlib module
snippet ModuleSpec
	ModuleSpec(${1:name}, ${2:loader}, ${3:*}, ${4:origin=None}, ${5:loader_state=None}, ${6:is_package=None})
	
# OPTIMIZED_BYTECODE_SUFFIXES from the importlib module
snippet OPTIMIZED_BYTECODE_SUFFIXES
	OPTIMIZED_BYTECODE_SUFFIXES
	
# PathEntryFinder from the importlib module
snippet PathEntryFinder
	PathEntryFinder
	
# PathFinder from the importlib module
snippet PathFinder
	PathFinder
	
# ResourceLoader from the importlib module
snippet ResourceLoader
	ResourceLoader
	
# SOURCE_SUFFIXES from the importlib module
snippet SOURCE_SUFFIXES
	SOURCE_SUFFIXES
	
# SourceFileLoader from the importlib module
snippet SourceFileLoader
	SourceFileLoader(${1:fullname}, ${2:path})
	
# SourceLoader from the importlib module
snippet SourceLoader
	SourceLoader
	
# SourcelessFileLoader from the importlib module
snippet SourcelessFileLoader
	SourcelessFileLoader(${1:fullname}, ${2:path})
	
# WindowsRegistryFinder from the importlib module
snippet WindowsRegistryFinder
	WindowsRegistryFinder
	
# __import__() from the importlib module
snippet __import__
	__import__(${1:name}, ${2:globals=None}, ${3:locals=None}, ${4:fromlist=}, ${5:})
	
# all_suffixes() from the importlib module
snippet all_suffixes
	all_suffixes(${1:})
	
# cache_from_source() from the importlib module
snippet cache_from_source
	cache_from_source(${1:path}, ${2:debug_override=None}, ${3:*}, ${4:optimization=None})
	
# decode_source() from the importlib module
snippet decode_source
	decode_source(${1:source_bytes})
	
# find_loader() from the importlib module
snippet find_loader
	find_loader(${1:name}, ${2:path=None})
	
# find_spec() from the importlib module
snippet find_spec
	find_spec(${1:name}, ${2:package=None})
	
# import_module() from the importlib module
snippet import_module
	import_module(${1:name}, ${2:package=None})
	
# invalidate_caches() from the importlib module
snippet invalidate_caches
	invalidate_caches(${1:})
	
# module_for_loader() from the importlib module
snippet module_for_loader
	module_for_loader()
	
# module_from_spec() from the importlib module
snippet module_from_spec
	module_from_spec(${1:spec})
	
# reload() from the importlib module
snippet reload
	reload(${1:module})
	
# resolve_name() from the importlib module
snippet resolve_name
	resolve_name(${1:name}, ${2:package})
	
# set_loader() from the importlib module
snippet set_loader
	set_loader()
	
# set_package() from the importlib module
snippet set_package
	set_package()
	
# source_from_cache() from the importlib module
snippet source_from_cache
	source_from_cache(${1:path})
	
# spec_from_file_location() from the importlib module
snippet spec_from_file_location
	spec_from_file_location(${1:name}, ${2:location}, ${3:*}, ${4:loader=None}, ${5:submodule_search_locations=None})
	
# spec_from_loader() from the importlib module
snippet spec_from_loader
	spec_from_loader(${1:name,})
	
# BYTECODE_SUFFIXES from the importlib.abc module
snippet BYTECODE_SUFFIXES
	BYTECODE_SUFFIXES
	
# BuiltinImporter from the importlib.abc module
snippet BuiltinImporter
	BuiltinImporter
	
# DEBUG_BYTECODE_SUFFIXES from the importlib.abc module
snippet DEBUG_BYTECODE_SUFFIXES
	DEBUG_BYTECODE_SUFFIXES
	
# EXTENSION_SUFFIXES from the importlib.abc module
snippet EXTENSION_SUFFIXES
	EXTENSION_SUFFIXES
	
# ExecutionLoader from the importlib.abc module
snippet ExecutionLoader
	ExecutionLoader
	
# ExtensionFileLoader from the importlib.abc module
snippet ExtensionFileLoader
	ExtensionFileLoader(${1:fullname}, ${2:path})
	
# FileFinder from the importlib.abc module
snippet FileFinder
	FileFinder(${1:path}, ${2:*loader_details})
	
# FileLoader from the importlib.abc module
snippet FileLoader
	FileLoader(${1:fullname}, ${2:path})
	
# Finder from the importlib.abc module
snippet Finder
	Finder
	
# FrozenImporter from the importlib.abc module
snippet FrozenImporter
	FrozenImporter
	
# InspectLoader from the importlib.abc module
snippet InspectLoader
	InspectLoader
	
# LazyLoader from the importlib.abc module
snippet LazyLoader
	LazyLoader(${1:loader})
	
# Loader from the importlib.abc module
snippet Loader
	Loader
	
# MAGIC_NUMBER from the importlib.abc module
snippet MAGIC_NUMBER
	MAGIC_NUMBER
	
# MetaPathFinder from the importlib.abc module
snippet MetaPathFinder
	MetaPathFinder
	
# ModuleSpec from the importlib.abc module
snippet ModuleSpec
	ModuleSpec(${1:name}, ${2:loader}, ${3:*}, ${4:origin=None}, ${5:loader_state=None}, ${6:is_package=None})
	
# OPTIMIZED_BYTECODE_SUFFIXES from the importlib.abc module
snippet OPTIMIZED_BYTECODE_SUFFIXES
	OPTIMIZED_BYTECODE_SUFFIXES
	
# PathEntryFinder from the importlib.abc module
snippet PathEntryFinder
	PathEntryFinder
	
# PathFinder from the importlib.abc module
snippet PathFinder
	PathFinder
	
# ResourceLoader from the importlib.abc module
snippet ResourceLoader
	ResourceLoader
	
# SOURCE_SUFFIXES from the importlib.abc module
snippet SOURCE_SUFFIXES
	SOURCE_SUFFIXES
	
# SourceFileLoader from the importlib.abc module
snippet SourceFileLoader
	SourceFileLoader(${1:fullname}, ${2:path})
	
# SourceLoader from the importlib.abc module
snippet SourceLoader
	SourceLoader
	
# SourcelessFileLoader from the importlib.abc module
snippet SourcelessFileLoader
	SourcelessFileLoader(${1:fullname}, ${2:path})
	
# WindowsRegistryFinder from the importlib.abc module
snippet WindowsRegistryFinder
	WindowsRegistryFinder
	
# __import__() from the importlib.abc module
snippet __import__
	__import__(${1:name}, ${2:globals=None}, ${3:locals=None}, ${4:fromlist=}, ${5:})
	
# all_suffixes() from the importlib.abc module
snippet all_suffixes
	all_suffixes(${1:})
	
# cache_from_source() from the importlib.abc module
snippet cache_from_source
	cache_from_source(${1:path}, ${2:debug_override=None}, ${3:*}, ${4:optimization=None})
	
# decode_source() from the importlib.abc module
snippet decode_source
	decode_source(${1:source_bytes})
	
# find_loader() from the importlib.abc module
snippet find_loader
	find_loader(${1:name}, ${2:path=None})
	
# find_spec() from the importlib.abc module
snippet find_spec
	find_spec(${1:name}, ${2:package=None})
	
# import_module() from the importlib.abc module
snippet import_module
	import_module(${1:name}, ${2:package=None})
	
# invalidate_caches() from the importlib.abc module
snippet invalidate_caches
	invalidate_caches(${1:})
	
# module_for_loader() from the importlib.abc module
snippet module_for_loader
	module_for_loader()
	
# module_from_spec() from the importlib.abc module
snippet module_from_spec
	module_from_spec(${1:spec})
	
# reload() from the importlib.abc module
snippet reload
	reload(${1:module})
	
# resolve_name() from the importlib.abc module
snippet resolve_name
	resolve_name(${1:name}, ${2:package})
	
# set_loader() from the importlib.abc module
snippet set_loader
	set_loader()
	
# set_package() from the importlib.abc module
snippet set_package
	set_package()
	
# source_from_cache() from the importlib.abc module
snippet source_from_cache
	source_from_cache(${1:path})
	
# spec_from_file_location() from the importlib.abc module
snippet spec_from_file_location
	spec_from_file_location(${1:name}, ${2:location}, ${3:*}, ${4:loader=None}, ${5:submodule_search_locations=None})
	
# spec_from_loader() from the importlib.abc module
snippet spec_from_loader
	spec_from_loader(${1:name,})
	
# BYTECODE_SUFFIXES from the importlib.machinery module
snippet BYTECODE_SUFFIXES
	BYTECODE_SUFFIXES
	
# BuiltinImporter from the importlib.machinery module
snippet BuiltinImporter
	BuiltinImporter
	
# DEBUG_BYTECODE_SUFFIXES from the importlib.machinery module
snippet DEBUG_BYTECODE_SUFFIXES
	DEBUG_BYTECODE_SUFFIXES
	
# EXTENSION_SUFFIXES from the importlib.machinery module
snippet EXTENSION_SUFFIXES
	EXTENSION_SUFFIXES
	
# ExecutionLoader from the importlib.machinery module
snippet ExecutionLoader
	ExecutionLoader
	
# ExtensionFileLoader from the importlib.machinery module
snippet ExtensionFileLoader
	ExtensionFileLoader(${1:fullname}, ${2:path})
	
# FileFinder from the importlib.machinery module
snippet FileFinder
	FileFinder(${1:path}, ${2:*loader_details})
	
# FileLoader from the importlib.machinery module
snippet FileLoader
	FileLoader(${1:fullname}, ${2:path})
	
# Finder from the importlib.machinery module
snippet Finder
	Finder
	
# FrozenImporter from the importlib.machinery module
snippet FrozenImporter
	FrozenImporter
	
# InspectLoader from the importlib.machinery module
snippet InspectLoader
	InspectLoader
	
# LazyLoader from the importlib.machinery module
snippet LazyLoader
	LazyLoader(${1:loader})
	
# Loader from the importlib.machinery module
snippet Loader
	Loader
	
# MAGIC_NUMBER from the importlib.machinery module
snippet MAGIC_NUMBER
	MAGIC_NUMBER
	
# MetaPathFinder from the importlib.machinery module
snippet MetaPathFinder
	MetaPathFinder
	
# ModuleSpec from the importlib.machinery module
snippet ModuleSpec
	ModuleSpec(${1:name}, ${2:loader}, ${3:*}, ${4:origin=None}, ${5:loader_state=None}, ${6:is_package=None})
	
# OPTIMIZED_BYTECODE_SUFFIXES from the importlib.machinery module
snippet OPTIMIZED_BYTECODE_SUFFIXES
	OPTIMIZED_BYTECODE_SUFFIXES
	
# PathEntryFinder from the importlib.machinery module
snippet PathEntryFinder
	PathEntryFinder
	
# PathFinder from the importlib.machinery module
snippet PathFinder
	PathFinder
	
# ResourceLoader from the importlib.machinery module
snippet ResourceLoader
	ResourceLoader
	
# SOURCE_SUFFIXES from the importlib.machinery module
snippet SOURCE_SUFFIXES
	SOURCE_SUFFIXES
	
# SourceFileLoader from the importlib.machinery module
snippet SourceFileLoader
	SourceFileLoader(${1:fullname}, ${2:path})
	
# SourceLoader from the importlib.machinery module
snippet SourceLoader
	SourceLoader
	
# SourcelessFileLoader from the importlib.machinery module
snippet SourcelessFileLoader
	SourcelessFileLoader(${1:fullname}, ${2:path})
	
# WindowsRegistryFinder from the importlib.machinery module
snippet WindowsRegistryFinder
	WindowsRegistryFinder
	
# __import__() from the importlib.machinery module
snippet __import__
	__import__(${1:name}, ${2:globals=None}, ${3:locals=None}, ${4:fromlist=}, ${5:})
	
# all_suffixes() from the importlib.machinery module
snippet all_suffixes
	all_suffixes(${1:})
	
# cache_from_source() from the importlib.machinery module
snippet cache_from_source
	cache_from_source(${1:path}, ${2:debug_override=None}, ${3:*}, ${4:optimization=None})
	
# decode_source() from the importlib.machinery module
snippet decode_source
	decode_source(${1:source_bytes})
	
# find_loader() from the importlib.machinery module
snippet find_loader
	find_loader(${1:name}, ${2:path=None})
	
# find_spec() from the importlib.machinery module
snippet find_spec
	find_spec(${1:name}, ${2:package=None})
	
# import_module() from the importlib.machinery module
snippet import_module
	import_module(${1:name}, ${2:package=None})
	
# invalidate_caches() from the importlib.machinery module
snippet invalidate_caches
	invalidate_caches(${1:})
	
# module_for_loader() from the importlib.machinery module
snippet module_for_loader
	module_for_loader()
	
# module_from_spec() from the importlib.machinery module
snippet module_from_spec
	module_from_spec(${1:spec})
	
# reload() from the importlib.machinery module
snippet reload
	reload(${1:module})
	
# resolve_name() from the importlib.machinery module
snippet resolve_name
	resolve_name(${1:name}, ${2:package})
	
# set_loader() from the importlib.machinery module
snippet set_loader
	set_loader()
	
# set_package() from the importlib.machinery module
snippet set_package
	set_package()
	
# source_from_cache() from the importlib.machinery module
snippet source_from_cache
	source_from_cache(${1:path})
	
# spec_from_file_location() from the importlib.machinery module
snippet spec_from_file_location
	spec_from_file_location(${1:name}, ${2:location}, ${3:*}, ${4:loader=None}, ${5:submodule_search_locations=None})
	
# spec_from_loader() from the importlib.machinery module
snippet spec_from_loader
	spec_from_loader(${1:name,})
	
# BYTECODE_SUFFIXES from the importlib.util module
snippet BYTECODE_SUFFIXES
	BYTECODE_SUFFIXES
	
# BuiltinImporter from the importlib.util module
snippet BuiltinImporter
	BuiltinImporter
	
# DEBUG_BYTECODE_SUFFIXES from the importlib.util module
snippet DEBUG_BYTECODE_SUFFIXES
	DEBUG_BYTECODE_SUFFIXES
	
# EXTENSION_SUFFIXES from the importlib.util module
snippet EXTENSION_SUFFIXES
	EXTENSION_SUFFIXES
	
# ExecutionLoader from the importlib.util module
snippet ExecutionLoader
	ExecutionLoader
	
# ExtensionFileLoader from the importlib.util module
snippet ExtensionFileLoader
	ExtensionFileLoader(${1:fullname}, ${2:path})
	
# FileFinder from the importlib.util module
snippet FileFinder
	FileFinder(${1:path}, ${2:*loader_details})
	
# FileLoader from the importlib.util module
snippet FileLoader
	FileLoader(${1:fullname}, ${2:path})
	
# Finder from the importlib.util module
snippet Finder
	Finder
	
# FrozenImporter from the importlib.util module
snippet FrozenImporter
	FrozenImporter
	
# InspectLoader from the importlib.util module
snippet InspectLoader
	InspectLoader
	
# LazyLoader from the importlib.util module
snippet LazyLoader
	LazyLoader(${1:loader})
	
# Loader from the importlib.util module
snippet Loader
	Loader
	
# MAGIC_NUMBER from the importlib.util module
snippet MAGIC_NUMBER
	MAGIC_NUMBER
	
# MetaPathFinder from the importlib.util module
snippet MetaPathFinder
	MetaPathFinder
	
# ModuleSpec from the importlib.util module
snippet ModuleSpec
	ModuleSpec(${1:name}, ${2:loader}, ${3:*}, ${4:origin=None}, ${5:loader_state=None}, ${6:is_package=None})
	
# OPTIMIZED_BYTECODE_SUFFIXES from the importlib.util module
snippet OPTIMIZED_BYTECODE_SUFFIXES
	OPTIMIZED_BYTECODE_SUFFIXES
	
# PathEntryFinder from the importlib.util module
snippet PathEntryFinder
	PathEntryFinder
	
# PathFinder from the importlib.util module
snippet PathFinder
	PathFinder
	
# ResourceLoader from the importlib.util module
snippet ResourceLoader
	ResourceLoader
	
# SOURCE_SUFFIXES from the importlib.util module
snippet SOURCE_SUFFIXES
	SOURCE_SUFFIXES
	
# SourceFileLoader from the importlib.util module
snippet SourceFileLoader
	SourceFileLoader(${1:fullname}, ${2:path})
	
# SourceLoader from the importlib.util module
snippet SourceLoader
	SourceLoader
	
# SourcelessFileLoader from the importlib.util module
snippet SourcelessFileLoader
	SourcelessFileLoader(${1:fullname}, ${2:path})
	
# WindowsRegistryFinder from the importlib.util module
snippet WindowsRegistryFinder
	WindowsRegistryFinder
	
# __import__() from the importlib.util module
snippet __import__
	__import__(${1:name}, ${2:globals=None}, ${3:locals=None}, ${4:fromlist=}, ${5:})
	
# all_suffixes() from the importlib.util module
snippet all_suffixes
	all_suffixes(${1:})
	
# cache_from_source() from the importlib.util module
snippet cache_from_source
	cache_from_source(${1:path}, ${2:debug_override=None}, ${3:*}, ${4:optimization=None})
	
# decode_source() from the importlib.util module
snippet decode_source
	decode_source(${1:source_bytes})
	
# find_loader() from the importlib.util module
snippet find_loader
	find_loader(${1:name}, ${2:path=None})
	
# find_spec() from the importlib.util module
snippet find_spec
	find_spec(${1:name}, ${2:package=None})
	
# import_module() from the importlib.util module
snippet import_module
	import_module(${1:name}, ${2:package=None})
	
# invalidate_caches() from the importlib.util module
snippet invalidate_caches
	invalidate_caches(${1:})
	
# module_for_loader() from the importlib.util module
snippet module_for_loader
	module_for_loader()
	
# module_from_spec() from the importlib.util module
snippet module_from_spec
	module_from_spec(${1:spec})
	
# reload() from the importlib.util module
snippet reload
	reload(${1:module})
	
# resolve_name() from the importlib.util module
snippet resolve_name
	resolve_name(${1:name}, ${2:package})
	
# set_loader() from the importlib.util module
snippet set_loader
	set_loader()
	
# set_package() from the importlib.util module
snippet set_package
	set_package()
	
# source_from_cache() from the importlib.util module
snippet source_from_cache
	source_from_cache(${1:path})
	
# spec_from_file_location() from the importlib.util module
snippet spec_from_file_location
	spec_from_file_location(${1:name}, ${2:location}, ${3:*}, ${4:loader=None}, ${5:submodule_search_locations=None})
	
# spec_from_loader() from the importlib.util module
snippet spec_from_loader
	spec_from_loader(${1:name,})
	
# BoundArguments from the inspect module
snippet BoundArguments
	BoundArguments
	
# Parameter from the inspect module
snippet Parameter
	Parameter(${1:name}, ${2:kind}, ${3:*}, ${4:default=Parameter.empty}, ${5:annotation=Parameter.empty})
	
# Signature from the inspect module
snippet Signature
	Signature(${1:parameters=None}, ${2:*}, ${3:return_annotation=Signature.empty})
	
# cleandoc() from the inspect module
snippet cleandoc
	cleandoc(${1:doc})
	
# currentframe() from the inspect module
snippet currentframe
	currentframe(${1:})
	
# formatargspec() from the inspect module
snippet formatargspec
	formatargspec(${1:args[}, ${2:varargs}, ${3:varkw}, ${4:defaults}, ${5:kwonlyargs}, ${6:kwonlydefaults}, ${7:annotations[}, ${8:formatarg}, ${9:formatvarargs}, ${10:formatvarkw}, ${11:formatvalue}, ${12:formatreturns}, ${13:formatannotations]]})
	
# formatargvalues() from the inspect module
snippet formatargvalues
	formatargvalues(${1:args[}, ${2:varargs}, ${3:varkw}, ${4:locals}, ${5:formatarg}, ${6:formatvarargs}, ${7:formatvarkw}, ${8:formatvalue]})
	
# getargspec() from the inspect module
snippet getargspec
	getargspec(${1:func})
	
# getargvalues() from the inspect module
snippet getargvalues
	getargvalues(${1:frame})
	
# getattr_static() from the inspect module
snippet getattr_static
	getattr_static(${1:obj}, ${2:attr}, ${3:default=None})
	
# getcallargs() from the inspect module
snippet getcallargs
	getcallargs(${1:func}, ${2:*args}, ${3:**kwds})
	
# getclasstree() from the inspect module
snippet getclasstree
	getclasstree(${1:classes}, ${2:unique=False})
	
# getclosurevars() from the inspect module
snippet getclosurevars
	getclosurevars(${1:func})
	
# getcomments() from the inspect module
snippet getcomments
	getcomments(${1:object})
	
# getcoroutinelocals() from the inspect module
snippet getcoroutinelocals
	getcoroutinelocals(${1:coroutine})
	
# getcoroutinestate() from the inspect module
snippet getcoroutinestate
	getcoroutinestate(${1:coroutine})
	
# getdoc() from the inspect module
snippet getdoc
	getdoc(${1:object})
	
# getfile() from the inspect module
snippet getfile
	getfile(${1:object})
	
# getframeinfo() from the inspect module
snippet getframeinfo
	getframeinfo(${1:frame}, ${2:context=1})
	
# getfullargspec() from the inspect module
snippet getfullargspec
	getfullargspec(${1:func})
	
# getgeneratorlocals() from the inspect module
snippet getgeneratorlocals
	getgeneratorlocals(${1:generator})
	
# getgeneratorstate() from the inspect module
snippet getgeneratorstate
	getgeneratorstate(${1:generator})
	
# getinnerframes() from the inspect module
snippet getinnerframes
	getinnerframes(${1:traceback}, ${2:context=1})
	
# getmembers() from the inspect module
snippet getmembers
	getmembers(${1:object[}, ${2:predicate]})
	
# getmodule() from the inspect module
snippet getmodule
	getmodule(${1:object})
	
# getmoduleinfo() from the inspect module
snippet getmoduleinfo
	getmoduleinfo(${1:path})
	
# getmodulename() from the inspect module
snippet getmodulename
	getmodulename(${1:path})
	
# getmro() from the inspect module
snippet getmro
	getmro(${1:cls})
	
# getouterframes() from the inspect module
snippet getouterframes
	getouterframes(${1:frame}, ${2:context=1})
	
# getsource() from the inspect module
snippet getsource
	getsource(${1:object})
	
# getsourcefile() from the inspect module
snippet getsourcefile
	getsourcefile(${1:object})
	
# getsourcelines() from the inspect module
snippet getsourcelines
	getsourcelines(${1:object})
	
# isabstract() from the inspect module
snippet isabstract
	isabstract(${1:object})
	
# isawaitable() from the inspect module
snippet isawaitable
	isawaitable(${1:object})
	
# isbuiltin() from the inspect module
snippet isbuiltin
	isbuiltin(${1:object})
	
# isclass() from the inspect module
snippet isclass
	isclass(${1:object})
	
# iscode() from the inspect module
snippet iscode
	iscode(${1:object})
	
# iscoroutine() from the inspect module
snippet iscoroutine
	iscoroutine(${1:object})
	
# iscoroutinefunction() from the inspect module
snippet iscoroutinefunction
	iscoroutinefunction(${1:object})
	
# isdatadescriptor() from the inspect module
snippet isdatadescriptor
	isdatadescriptor(${1:object})
	
# isframe() from the inspect module
snippet isframe
	isframe(${1:object})
	
# isfunction() from the inspect module
snippet isfunction
	isfunction(${1:object})
	
# isgenerator() from the inspect module
snippet isgenerator
	isgenerator(${1:object})
	
# isgeneratorfunction() from the inspect module
snippet isgeneratorfunction
	isgeneratorfunction(${1:object})
	
# isgetsetdescriptor() from the inspect module
snippet isgetsetdescriptor
	isgetsetdescriptor(${1:object})
	
# ismemberdescriptor() from the inspect module
snippet ismemberdescriptor
	ismemberdescriptor(${1:object})
	
# ismethod() from the inspect module
snippet ismethod
	ismethod(${1:object})
	
# ismethoddescriptor() from the inspect module
snippet ismethoddescriptor
	ismethoddescriptor(${1:object})
	
# ismodule() from the inspect module
snippet ismodule
	ismodule(${1:object})
	
# isroutine() from the inspect module
snippet isroutine
	isroutine(${1:object})
	
# istraceback() from the inspect module
snippet istraceback
	istraceback(${1:object})
	
# signature() from the inspect module
snippet signature
	signature(${1:callable}, ${2:*}, ${3:follow_wrapped=True})
	
# stack() from the inspect module
snippet stack
	stack(${1:context=1})
	
# trace() from the inspect module
snippet trace
	trace(${1:context=1})
	
# unwrap() from the inspect module
snippet unwrap
	unwrap(${1:func,})
	
# BlockingIOError from the io module
snippet BlockingIOError
	BlockingIOError
	
# BufferedIOBase from the io module
snippet BufferedIOBase
	BufferedIOBase
	
# BufferedRWPair from the io module
snippet BufferedRWPair
	BufferedRWPair(${1:reader}, ${2:writer}, ${3:buffer_size=DEFAULT_BUFFER_SIZE})
	
# BufferedRandom from the io module
snippet BufferedRandom
	BufferedRandom(${1:raw}, ${2:buffer_size=DEFAULT_BUFFER_SIZE})
	
# BufferedReader from the io module
snippet BufferedReader
	BufferedReader(${1:raw}, ${2:buffer_size=DEFAULT_BUFFER_SIZE})
	
# BufferedWriter from the io module
snippet BufferedWriter
	BufferedWriter(${1:raw}, ${2:buffer_size=DEFAULT_BUFFER_SIZE})
	
# BytesIO from the io module
snippet BytesIO
	BytesIO(${1:[initial_bytes]})
	
# DEFAULT_BUFFER_SIZE from the io module
snippet DEFAULT_BUFFER_SIZE
	DEFAULT_BUFFER_SIZE
	
# FileIO from the io module
snippet FileIO
	FileIO(${1:name}, ${2:mode='r'}, ${3:closefd=True}, ${4:opener=None})
	
# IOBase from the io module
snippet IOBase
	IOBase
	
# IncrementalNewlineDecoder from the io module
snippet IncrementalNewlineDecoder
	IncrementalNewlineDecoder
	
# RawIOBase from the io module
snippet RawIOBase
	RawIOBase
	
# StringIO from the io module
snippet StringIO
	StringIO(${1:initial_value=''}, ${2:newline=' '})
	
# TextIOBase from the io module
snippet TextIOBase
	TextIOBase
	
# TextIOWrapper from the io module
snippet TextIOWrapper
	TextIOWrapper(${1:buffer}, ${2:encoding=None}, ${3:errors=None}, ${4:newline=None}, ${5:line_buffering=False}, ${6:write_through=False})
	
# UnsupportedOperation from the io module
snippet UnsupportedOperation
	UnsupportedOperation
	
# open() from the io module
snippet open
	open(${1:file,})
	
# AddressValueError from the ipaddress module
snippet AddressValueError
	AddressValueError(${1:ValueError})
	
# IPv4Address from the ipaddress module
snippet IPv4Address
	IPv4Address(${1:address})
	
# IPv4Interface from the ipaddress module
snippet IPv4Interface
	IPv4Interface(${1:address})
	
# IPv4Network from the ipaddress module
snippet IPv4Network
	IPv4Network(${1:address}, ${2:strict=True})
	
# IPv6Address from the ipaddress module
snippet IPv6Address
	IPv6Address(${1:address})
	
# IPv6Interface from the ipaddress module
snippet IPv6Interface
	IPv6Interface(${1:address})
	
# IPv6Network from the ipaddress module
snippet IPv6Network
	IPv6Network(${1:address}, ${2:strict=True})
	
# NetmaskValueError from the ipaddress module
snippet NetmaskValueError
	NetmaskValueError(${1:ValueError})
	
# collapse_addresses() from the ipaddress module
snippet collapse_addresses
	collapse_addresses(${1:addresses})
	
# get_mixed_type_key() from the ipaddress module
snippet get_mixed_type_key
	get_mixed_type_key(${1:obj})
	
# ip_address() from the ipaddress module
snippet ip_address
	ip_address(${1:address})
	
# ip_interface() from the ipaddress module
snippet ip_interface
	ip_interface(${1:address})
	
# ip_network() from the ipaddress module
snippet ip_network
	ip_network(${1:address}, ${2:strict=True})
	
# summarize_address_range() from the ipaddress module
snippet summarize_address_range
	summarize_address_range(${1:first}, ${2:last})
	
# v4_int_to_packed() from the ipaddress module
snippet v4_int_to_packed
	v4_int_to_packed(${1:address})
	
# v6_int_to_packed() from the ipaddress module
snippet v6_int_to_packed
	v6_int_to_packed(${1:address})
	
# accumulate() from the itertools module
snippet accumulate
	accumulate(${1:iterable[}, ${2:func]})
	
# chain() from the itertools module
snippet chain
	chain(${1:*iterables})
	
# combinations() from the itertools module
snippet combinations
	combinations(${1:iterable}, ${2:r})
	
# combinations_with_replacement() from the itertools module
snippet combinations_with_replacement
	combinations_with_replacement(${1:iterable}, ${2:r})
	
# compress() from the itertools module
snippet compress
	compress(${1:data}, ${2:selectors})
	
# count() from the itertools module
snippet count
	count(${1:start=0}, ${2:step=1})
	
# cycle() from the itertools module
snippet cycle
	cycle(${1:iterable})
	
# dropwhile() from the itertools module
snippet dropwhile
	dropwhile(${1:predicate}, ${2:iterable})
	
# filterfalse() from the itertools module
snippet filterfalse
	filterfalse(${1:predicate}, ${2:iterable})
	
# from_iterable() from the itertools module
snippet from_iterable
	from_iterable(${1:iterable})
	
# groupby() from the itertools module
snippet groupby
	groupby(${1:iterable}, ${2:key=None})
	
# islice() from the itertools module
snippet islice
	islice(${1:iterable}, ${2:stop})
	
# permutations() from the itertools module
snippet permutations
	permutations(${1:iterable}, ${2:r=None})
	
# product() from the itertools module
snippet product
	product(${1:*iterables}, ${2:repeat=1})
	
# repeat() from the itertools module
snippet repeat
	repeat(${1:object[}, ${2:times]})
	
# starmap() from the itertools module
snippet starmap
	starmap(${1:function}, ${2:iterable})
	
# takewhile() from the itertools module
snippet takewhile
	takewhile(${1:predicate}, ${2:iterable})
	
# tee() from the itertools module
snippet tee
	tee(${1:iterable}, ${2:n=2})
	
# zip_longest() from the itertools module
snippet zip_longest
	zip_longest(${1:*iterables,})
	
# JSONDecodeError from the json module
snippet JSONDecodeError
	JSONDecodeError(${1:msg}, ${2:doc}, ${3:pos}, ${4:end=None})
	
# JSONDecoder from the json module
snippet JSONDecoder
	JSONDecoder(${1:object_hook=None}, ${2:parse_float=None}, ${3:parse_int=None}, ${4:parse_constant=None}, ${5:strict=True}, ${6:object_pairs_hook=None})
	
# JSONEncoder from the json module
snippet JSONEncoder
	JSONEncoder(${1:skipkeys=False}, ${2:ensure_ascii=True}, ${3:check_circular=True}, ${4:allow_nan=True}, ${5:sort_keys=False}, ${6:indent=None}, ${7:separators=None}, ${8:default=None})
	
# dump() from the json module
snippet dump
	dump(${1:obj}, ${2:fp}, ${3:skipkeys=False}, ${4:ensure_ascii=True}, ${5:check_circular=True}, ${6:allow_nan=True}, ${7:cls=None}, ${8:indent=None}, ${9:separators=None}, ${10:default=None}, ${11:sort_keys=False}, ${12:**kw})
	
# dumps() from the json module
snippet dumps
	dumps(${1:obj}, ${2:skipkeys=False}, ${3:ensure_ascii=True}, ${4:check_circular=True}, ${5:allow_nan=True}, ${6:cls=None}, ${7:indent=None}, ${8:separators=None}, ${9:default=None}, ${10:sort_keys=False}, ${11:**kw})
	
# load() from the json module
snippet load
	load(${1:fp}, ${2:cls=None}, ${3:object_hook=None}, ${4:parse_float=None}, ${5:parse_int=None}, ${6:parse_constant=None}, ${7:object_pairs_hook=None}, ${8:**kw})
	
# loads() from the json module
snippet loads
	loads(${1:s,})
	
# JSONDecodeError from the json.tool module
snippet JSONDecodeError
	JSONDecodeError(${1:msg}, ${2:doc}, ${3:pos}, ${4:end=None})
	
# JSONDecoder from the json.tool module
snippet JSONDecoder
	JSONDecoder(${1:object_hook=None}, ${2:parse_float=None}, ${3:parse_int=None}, ${4:parse_constant=None}, ${5:strict=True}, ${6:object_pairs_hook=None})
	
# JSONEncoder from the json.tool module
snippet JSONEncoder
	JSONEncoder(${1:skipkeys=False}, ${2:ensure_ascii=True}, ${3:check_circular=True}, ${4:allow_nan=True}, ${5:sort_keys=False}, ${6:indent=None}, ${7:separators=None}, ${8:default=None})
	
# dump() from the json.tool module
snippet dump
	dump(${1:obj}, ${2:fp}, ${3:skipkeys=False}, ${4:ensure_ascii=True}, ${5:check_circular=True}, ${6:allow_nan=True}, ${7:cls=None}, ${8:indent=None}, ${9:separators=None}, ${10:default=None}, ${11:sort_keys=False}, ${12:**kw})
	
# dumps() from the json.tool module
snippet dumps
	dumps(${1:obj}, ${2:skipkeys=False}, ${3:ensure_ascii=True}, ${4:check_circular=True}, ${5:allow_nan=True}, ${6:cls=None}, ${7:indent=None}, ${8:separators=None}, ${9:default=None}, ${10:sort_keys=False}, ${11:**kw})
	
# load() from the json.tool module
snippet load
	load(${1:fp}, ${2:cls=None}, ${3:object_hook=None}, ${4:parse_float=None}, ${5:parse_int=None}, ${6:parse_constant=None}, ${7:object_pairs_hook=None}, ${8:**kw})
	
# loads() from the json.tool module
snippet loads
	loads(${1:s,})
	
# iskeyword() from the keyword module
snippet iskeyword
	iskeyword(${1:s})
	
# kwlist() from the keyword module
snippet kwlist
	kwlist()
	
# iskeyword() from the lib2to3 module
snippet iskeyword
	iskeyword(${1:s})
	
# kwlist() from the lib2to3 module
snippet kwlist
	kwlist()
	
# checkcache() from the linecache module
snippet checkcache
	checkcache(${1:filename=None})
	
# clearcache() from the linecache module
snippet clearcache
	clearcache(${1:})
	
# getline() from the linecache module
snippet getline
	getline(${1:filename}, ${2:lineno}, ${3:module_globals=None})
	
# lazycache() from the linecache module
snippet lazycache
	lazycache(${1:filename,})
	
# ALT_DIGITS from the locale module
snippet ALT_DIGITS
	ALT_DIGITS
	
# CHAR_MAX from the locale module
snippet CHAR_MAX
	CHAR_MAX
	
# CODESET from the locale module
snippet CODESET
	CODESET
	
# CRNCYSTR from the locale module
snippet CRNCYSTR
	CRNCYSTR
	
# D_FMT from the locale module
snippet D_FMT
	D_FMT
	
# D_T_FMT from the locale module
snippet D_T_FMT
	D_T_FMT
	
# ERA from the locale module
snippet ERA
	ERA
	
# ERA_D_FMT from the locale module
snippet ERA_D_FMT
	ERA_D_FMT
	
# ERA_D_T_FMT from the locale module
snippet ERA_D_T_FMT
	ERA_D_T_FMT
	
# ERA_T_FMT from the locale module
snippet ERA_T_FMT
	ERA_T_FMT
	
# Error from the locale module
snippet Error
	Error
	
# LC_ALL from the locale module
snippet LC_ALL
	LC_ALL
	
# LC_COLLATE from the locale module
snippet LC_COLLATE
	LC_COLLATE
	
# LC_CTYPE from the locale module
snippet LC_CTYPE
	LC_CTYPE
	
# LC_MESSAGES from the locale module
snippet LC_MESSAGES
	LC_MESSAGES
	
# LC_MONETARY from the locale module
snippet LC_MONETARY
	LC_MONETARY
	
# LC_NUMERIC from the locale module
snippet LC_NUMERIC
	LC_NUMERIC
	
# LC_TIME from the locale module
snippet LC_TIME
	LC_TIME
	
# NOEXPR from the locale module
snippet NOEXPR
	NOEXPR
	
# RADIXCHAR from the locale module
snippet RADIXCHAR
	RADIXCHAR
	
# THOUSEP from the locale module
snippet THOUSEP
	THOUSEP
	
# T_FMT from the locale module
snippet T_FMT
	T_FMT
	
# T_FMT_AMPM from the locale module
snippet T_FMT_AMPM
	T_FMT_AMPM
	
# YESEXPR from the locale module
snippet YESEXPR
	YESEXPR
	
# atof() from the locale module
snippet atof
	atof(${1:string})
	
# atoi() from the locale module
snippet atoi
	atoi(${1:string})
	
# currency() from the locale module
snippet currency
	currency(${1:val}, ${2:symbol=True}, ${3:grouping=False}, ${4:international=False})
	
# delocalize() from the locale module
snippet delocalize
	delocalize(${1:string})
	
# format() from the locale module
snippet format
	format(${0:format}, ${2:val}, ${3:grouping=False}, ${4:monetary=False})
	
# format_string() from the locale module
snippet format_string
	format_string(${1:format}, ${2:val}, ${3:grouping=False})
	
# getdefaultlocale() from the locale module
snippet getdefaultlocale
	getdefaultlocale(${1:[envvars]})
	
# getlocale() from the locale module
snippet getlocale
	getlocale(${1:category=LC_CTYPE})
	
# getpreferredencoding() from the locale module
snippet getpreferredencoding
	getpreferredencoding(${1:do_setlocale=True})
	
# localeconv() from the locale module
snippet localeconv
	localeconv(${1:})
	
# nl_langinfo() from the locale module
snippet nl_langinfo
	nl_langinfo(${1:option})
	
# normalize() from the locale module
snippet normalize
	normalize(${1:localename})
	
# resetlocale() from the locale module
snippet resetlocale
	resetlocale(${1:category=LC_ALL})
	
# setlocale() from the locale module
snippet setlocale
	setlocale(${1:category}, ${2:locale=None})
	
# str() from the locale module
snippet str
	str(${1:float})
	
# strcoll() from the locale module
snippet strcoll
	strcoll(${1:string1}, ${2:string2})
	
# strxfrm() from the locale module
snippet strxfrm
	strxfrm(${1:string})
	
# Filter from the logging module
snippet Filter
	Filter(${1:name=''})
	
# Formatter from the logging module
snippet Formatter
	Formatter(${1:fmt=None}, ${2:datefmt=None}, ${3:style='%'})
	
# LogRecord from the logging module
snippet LogRecord
	LogRecord(${1:name}, ${2:level}, ${3:pathname}, ${4:lineno}, ${5:msg}, ${6:args}, ${7:exc_info}, ${8:func=None}, ${9:sinfo=None})
	
# Logger from the logging module
snippet Logger
	Logger
	
# LoggerAdapter from the logging module
snippet LoggerAdapter
	LoggerAdapter(${1:logger}, ${2:extra})
	
# __init__() from the logging module
snippet __init__
	__init__(${1:level=NOTSET})
	
# acquire() from the logging module
snippet acquire
	acquire(${1:})
	
# addFilter() from the logging module
snippet addFilter
	addFilter(${1:filt})
	
# addHandler() from the logging module
snippet addHandler
	addHandler(${1:hdlr})
	
# addLevelName() from the logging module
snippet addLevelName
	addLevelName(${1:lvl}, ${2:levelName})
	
# basicConfig() from the logging module
snippet basicConfig
	basicConfig(${1:**kwargs})
	
# captureWarnings() from the logging module
snippet captureWarnings
	captureWarnings(${1:capture})
	
# close() from the logging module
snippet close
	close(${1:})
	
# createLock() from the logging module
snippet createLock
	createLock(${1:})
	
# critical() from the logging module
snippet critical
	critical(${1:msg}, ${2:*args}, ${3:**kwargs})
	
# debug() from the logging module
snippet debug
	debug(${1:msg}, ${2:*args}, ${3:**kwargs})
	
# disable() from the logging module
snippet disable
	disable(${1:lvl})
	
# emit() from the logging module
snippet emit
	emit(${1:record})
	
# error() from the logging module
snippet error
	error(${1:msg}, ${2:*args}, ${3:**kwargs})
	
# exception() from the logging module
snippet exception
	exception(${1:msg}, ${2:*args}, ${3:**kwargs})
	
# filter() from the logging module
snippet filter
	filter(${1:record})
	
# findCaller() from the logging module
snippet findCaller
	findCaller(${1:stack_info=False})
	
# flush() from the logging module
snippet flush
	flush(${1:})
	
# format() from the logging module
snippet format
	format(${1:record})
	
# getChild() from the logging module
snippet getChild
	getChild(${1:suffix})
	
# getEffectiveLevel() from the logging module
snippet getEffectiveLevel
	getEffectiveLevel(${1:})
	
# getLevelName() from the logging module
snippet getLevelName
	getLevelName(${1:lvl})
	
# getLogRecordFactory() from the logging module
snippet getLogRecordFactory
	getLogRecordFactory(${1:})
	
# getLogger() from the logging module
snippet getLogger
	getLogger(${1:name=None})
	
# getLoggerClass() from the logging module
snippet getLoggerClass
	getLoggerClass(${1:})
	
# handle() from the logging module
snippet handle
	handle(${1:record})
	
# handleError() from the logging module
snippet handleError
	handleError(${1:record})
	
# hasHandlers() from the logging module
snippet hasHandlers
	hasHandlers(${1:})
	
# info() from the logging module
snippet info
	info(${1:msg}, ${2:*args}, ${3:**kwargs})
	
# isEnabledFor() from the logging module
snippet isEnabledFor
	isEnabledFor(${1:lvl})
	
# lastResort() from the logging module
snippet lastResort
	lastResort()
	
# log() from the logging module
snippet log
	log(${1:lvl}, ${2:msg}, ${3:*args}, ${4:**kwargs})
	
# makeLogRecord() from the logging module
snippet makeLogRecord
	makeLogRecord(${1:attrdict})
	
# makeRecord() from the logging module
snippet makeRecord
	makeRecord(${1:name}, ${2:lvl}, ${3:fn}, ${4:lno}, ${5:msg}, ${6:args}, ${7:exc_info}, ${8:func=None}, ${9:extra=None}, ${10:sinfo=None})
	
# propagate() from the logging module
snippet propagate
	propagate()
	
# release() from the logging module
snippet release
	release(${1:})
	
# removeFilter() from the logging module
snippet removeFilter
	removeFilter(${1:filt})
	
# removeHandler() from the logging module
snippet removeHandler
	removeHandler(${1:hdlr})
	
# setFormatter() from the logging module
snippet setFormatter
	setFormatter(${1:form})
	
# setLevel() from the logging module
snippet setLevel
	setLevel(${1:lvl})
	
# setLogRecordFactory() from the logging module
snippet setLogRecordFactory
	setLogRecordFactory(${1:factory})
	
# setLoggerClass() from the logging module
snippet setLoggerClass
	setLoggerClass(${1:klass})
	
# shutdown() from the logging module
snippet shutdown
	shutdown(${1:})
	
# warning() from the logging module
snippet warning
	warning(${1:msg,})
	
# dictConfig() from the logging.config module
snippet dictConfig
	dictConfig(${1:config})
	
# fileConfig() from the logging.config module
snippet fileConfig
	fileConfig(${1:fname}, ${2:defaults=None}, ${3:disable_existing_loggers=True})
	
# listen() from the logging.config module
snippet listen
	listen(${1:port=DEFAULT_LOGGING_CONFIG_PORT}, ${2:verify=None})
	
# stopListening() from the logging.config module
snippet stopListening
	stopListening(${1:})
	
# BaseRotatingHandler from the logging.handlers module
snippet BaseRotatingHandler
	BaseRotatingHandler(${1:filename}, ${2:mode}, ${3:encoding=None}, ${4:delay=False})
	
# BufferingHandler from the logging.handlers module
snippet BufferingHandler
	BufferingHandler(${1:capacity})
	
# DatagramHandler from the logging.handlers module
snippet DatagramHandler
	DatagramHandler(${1:host}, ${2:port})
	
# FileHandler from the logging.handlers module
snippet FileHandler
	FileHandler(${1:filename}, ${2:mode='a'}, ${3:encoding=None}, ${4:delay=False})
	
# HTTPHandler from the logging.handlers module
snippet HTTPHandler
	HTTPHandler(${1:host}, ${2:url}, ${3:method='GET'}, ${4:secure=False}, ${5:credentials=None}, ${6:context=None})
	
# MemoryHandler from the logging.handlers module
snippet MemoryHandler
	MemoryHandler(${1:capacity}, ${2:flushLevel=ERROR}, ${3:target=None})
	
# NTEventLogHandler from the logging.handlers module
snippet NTEventLogHandler
	NTEventLogHandler(${1:appname}, ${2:dllname=None}, ${3:logtype='Application'})
	
# NullHandler from the logging.handlers module
snippet NullHandler
	NullHandler
	
# QueueHandler from the logging.handlers module
snippet QueueHandler
	QueueHandler(${1:queue})
	
# QueueListener from the logging.handlers module
snippet QueueListener
	QueueListener(${1:queue}, ${2:*handlers}, ${3:respect_handler_level=False})
	
# RotatingFileHandler from the logging.handlers module
snippet RotatingFileHandler
	RotatingFileHandler(${1:filename}, ${2:mode='a'}, ${3:maxBytes=0}, ${4:backupCount=0}, ${5:encoding=None}, ${6:delay=0})
	
# SMTPHandler from the logging.handlers module
snippet SMTPHandler
	SMTPHandler(${1:mailhost}, ${2:fromaddr}, ${3:toaddrs}, ${4:subject}, ${5:credentials=None}, ${6:secure=None}, ${7:timeout=1.0})
	
# SocketHandler from the logging.handlers module
snippet SocketHandler
	SocketHandler(${1:host}, ${2:port})
	
# StreamHandler from the logging.handlers module
snippet StreamHandler
	StreamHandler(${1:stream=None})
	
# SysLogHandler from the logging.handlers module
snippet SysLogHandler
	SysLogHandler(${1:address=}, ${2:'localhost'}, ${3:SYSLOG_UDP_PORT})
	
# TimedRotatingFileHandler from the logging.handlers module
snippet TimedRotatingFileHandler
	TimedRotatingFileHandler(${1:filename}, ${2:when='h'}, ${3:interval=1}, ${4:backupCount=0}, ${5:encoding=None}, ${6:delay=False}, ${7:utc=False}, ${8:atTime=None})
	
# WatchedFileHandler from the logging.handlers module
snippet WatchedFileHandler
	WatchedFileHandler(${1:filename[,})
	
# LZMACompressor from the lzma module
snippet LZMACompressor
	LZMACompressor(${1:format=FORMAT_XZ}, ${2:check=-1}, ${3:preset=None}, ${4:filters=None})
	
# LZMADecompressor from the lzma module
snippet LZMADecompressor
	LZMADecompressor(${1:format=FORMAT_AUTO}, ${2:memlimit=None}, ${3:filters=None})
	
# LZMAError from the lzma module
snippet LZMAError
	LZMAError
	
# LZMAFile from the lzma module
snippet LZMAFile
	LZMAFile(${1:filename=None}, ${2:mode="r"}, ${3:*}, ${4:format=None}, ${5:check=-1}, ${6:preset=None}, ${7:filters=None})
	
# compress() from the lzma module
snippet compress
	compress(${1:data}, ${2:format=FORMAT_XZ}, ${3:check=-1}, ${4:preset=None}, ${5:filters=None})
	
# decompress() from the lzma module
snippet decompress
	decompress(${1:data}, ${2:format=FORMAT_AUTO}, ${3:memlimit=None}, ${4:filters=None})
	
# is_check_supported() from the lzma module
snippet is_check_supported
	is_check_supported(${1:check})
	
# open() from the lzma module
snippet open
	open(${1:filename,})
	
# Babyl from the mailbox module
snippet Babyl
	Babyl(${1:path}, ${2:factory=None}, ${3:create=True})
	
# BabylMessage from the mailbox module
snippet BabylMessage
	BabylMessage(${1:message=None})
	
# Error from the mailbox module
snippet Error
	Error
	
# ExternalClashError from the mailbox module
snippet ExternalClashError
	ExternalClashError
	
# FormatError from the mailbox module
snippet FormatError
	FormatError
	
# MH from the mailbox module
snippet MH
	MH(${1:path}, ${2:factory=None}, ${3:create=True})
	
# MHMessage from the mailbox module
snippet MHMessage
	MHMessage(${1:message=None})
	
# MMDF from the mailbox module
snippet MMDF
	MMDF(${1:path}, ${2:factory=None}, ${3:create=True})
	
# MMDFMessage from the mailbox module
snippet MMDFMessage
	MMDFMessage(${1:message=None})
	
# Mailbox from the mailbox module
snippet Mailbox
	Mailbox
	
# Maildir from the mailbox module
snippet Maildir
	Maildir(${1:dirname}, ${2:factory=None}, ${3:create=True})
	
# MaildirMessage from the mailbox module
snippet MaildirMessage
	MaildirMessage(${1:message=None})
	
# Message from the mailbox module
snippet Message
	Message(${1:message=None})
	
# NoSuchMailboxError from the mailbox module
snippet NoSuchMailboxError
	NoSuchMailboxError
	
# NotEmptyError from the mailbox module
snippet NotEmptyError
	NotEmptyError
	
# mbox() from the mailbox module
snippet mbox
	mbox(${1:path}, ${2:factory=None}, ${3:create=True})
	
# mboxMessage() from the mailbox module
snippet mboxMessage
	mboxMessage(${1:message=None})
	
# findmatch() from the mailcap module
snippet findmatch
	findmatch(${1:caps}, ${2:MIMEtype}, ${3:key='view'}, ${4:filename='/dev/null'}, ${5:plist=[]})
	
# getcaps() from the mailcap module
snippet getcaps
	getcaps(${1:})
	
# dump() from the marshal module
snippet dump
	dump(${1:value}, ${2:file[}, ${3:version]})
	
# dumps() from the marshal module
snippet dumps
	dumps(${1:value[}, ${2:version]})
	
# load() from the marshal module
snippet load
	load(${1:file})
	
# loads() from the marshal module
snippet loads
	loads(${1:string})
	
# version() from the marshal module
snippet version
	version()
	
# acos() from the math module
snippet acos
	acos(${1:x})
	
# acosh() from the math module
snippet acosh
	acosh(${1:x})
	
# asin() from the math module
snippet asin
	asin(${1:x})
	
# asinh() from the math module
snippet asinh
	asinh(${1:x})
	
# atan2() from the math module
snippet atan2
	atan2(${1:y}, ${2:x})
	
# atan() from the math module
snippet atan
	atan(${1:x})
	
# atanh() from the math module
snippet atanh
	atanh(${1:x})
	
# ceil() from the math module
snippet ceil
	ceil(${1:x})
	
# copysign() from the math module
snippet copysign
	copysign(${1:x}, ${2:y})
	
# cos() from the math module
snippet cos
	cos(${1:x})
	
# cosh() from the math module
snippet cosh
	cosh(${1:x})
	
# degrees() from the math module
snippet degrees
	degrees(${1:x})
	
# e() from the math module
snippet e
	e()
	
# erf() from the math module
snippet erf
	erf(${1:x})
	
# erfc() from the math module
snippet erfc
	erfc(${1:x})
	
# exp() from the math module
snippet exp
	exp(${1:x})
	
# expm1() from the math module
snippet expm1
	expm1(${1:x})
	
# fabs() from the math module
snippet fabs
	fabs(${1:x})
	
# factorial() from the math module
snippet factorial
	factorial(${1:x})
	
# floor() from the math module
snippet floor
	floor(${1:x})
	
# fmod() from the math module
snippet fmod
	fmod(${1:x}, ${2:y})
	
# frexp() from the math module
snippet frexp
	frexp(${1:x})
	
# fsum() from the math module
snippet fsum
	fsum(${1:iterable})
	
# gamma() from the math module
snippet gamma
	gamma(${1:x})
	
# gcd() from the math module
snippet gcd
	gcd(${1:a}, ${2:b})
	
# hypot() from the math module
snippet hypot
	hypot(${1:x}, ${2:y})
	
# inf() from the math module
snippet inf
	inf()
	
# isclose() from the math module
snippet isclose
	isclose(${1:a}, ${2:b}, ${3:*}, ${4:rel_tol=1e-09}, ${5:abs_tol=0.0})
	
# isfinite() from the math module
snippet isfinite
	isfinite(${1:x})
	
# isinf() from the math module
snippet isinf
	isinf(${1:x})
	
# isnan() from the math module
snippet isnan
	isnan(${1:x})
	
# ldexp() from the math module
snippet ldexp
	ldexp(${1:x}, ${2:i})
	
# lgamma() from the math module
snippet lgamma
	lgamma(${1:x})
	
# log10() from the math module
snippet log10
	log10(${1:x})
	
# log1p() from the math module
snippet log1p
	log1p(${1:x})
	
# log2() from the math module
snippet log2
	log2(${1:x})
	
# log() from the math module
snippet log
	log(${1:x[}, ${2:base]})
	
# modf() from the math module
snippet modf
	modf(${1:x})
	
# nan() from the math module
snippet nan
	nan()
	
# pi() from the math module
snippet pi
	pi()
	
# pow() from the math module
snippet pow
	pow(${1:x}, ${2:y})
	
# radians() from the math module
snippet radians
	radians(${1:x})
	
# sin() from the math module
snippet sin
	sin(${1:x})
	
# sinh() from the math module
snippet sinh
	sinh(${1:x})
	
# sqrt() from the math module
snippet sqrt
	sqrt(${1:x})
	
# tan() from the math module
snippet tan
	tan(${1:x})
	
# tanh() from the math module
snippet tanh
	tanh(${1:x})
	
# trunc() from the math module
snippet trunc
	trunc(${1:x})
	
# MimeTypes from the mimetypes module
snippet MimeTypes
	MimeTypes(${1:filenames=}, ${2:})
	
# add_type() from the mimetypes module
snippet add_type
	add_type(${1:type}, ${2:ext}, ${3:strict=True})
	
# common_types() from the mimetypes module
snippet common_types
	common_types()
	
# encodings_map() from the mimetypes module
snippet encodings_map
	encodings_map()
	
# guess_all_extensions() from the mimetypes module
snippet guess_all_extensions
	guess_all_extensions(${1:type}, ${2:strict=True})
	
# guess_extension() from the mimetypes module
snippet guess_extension
	guess_extension(${1:type}, ${2:strict=True})
	
# guess_type() from the mimetypes module
snippet guess_type
	guess_type(${1:url}, ${2:strict=True})
	
# init() from the mimetypes module
snippet init
	init(${1:files=None})
	
# inited() from the mimetypes module
snippet inited
	inited()
	
# knownfiles() from the mimetypes module
snippet knownfiles
	knownfiles()
	
# read() from the mimetypes module
snippet read
	read(${1:filename}, ${2:strict=True})
	
# read_mime_types() from the mimetypes module
snippet read_mime_types
	read_mime_types(${1:filename})
	
# read_windows_registry() from the mimetypes module
snippet read_windows_registry
	read_windows_registry(${1:strict=True})
	
# readfp() from the mimetypes module
snippet readfp
	readfp(${1:fp}, ${2:strict=True})
	
# suffix_map() from the mimetypes module
snippet suffix_map
	suffix_map()
	
# types_map() from the mimetypes module
snippet types_map
	types_map()
	
# types_map_inv() from the mimetypes module
snippet types_map_inv
	types_map_inv()
	
# mmap() from the mmap module
snippet mmap
	mmap(${1:fileno,})
	
# AddPackagePath from the modulefinder module
snippet AddPackagePath
	AddPackagePath(${1:pkg_name}, ${2:path})
	
# ModuleFinder from the modulefinder module
snippet ModuleFinder
	ModuleFinder(${1:path=None}, ${2:debug=0}, ${3:excludes=[]}, ${4:replace_paths=[]})
	
# ReplacePackage from the modulefinder module
snippet ReplacePackage
	ReplacePackage(${1:oldname,})
	
# Binary from the msilib module
snippet Binary
	Binary(${1:filename})
	
# CAB from the msilib module
snippet CAB
	CAB(${1:name})
	
# ClearData from the msilib module
snippet ClearData
	ClearData(${1:})
	
# Close from the msilib module
snippet Close
	Close(${1:})
	
# Commit from the msilib module
snippet Commit
	Commit(${1:})
	
# Control from the msilib module
snippet Control
	Control(${1:dlg}, ${2:name})
	
# CreateRecord from the msilib module
snippet CreateRecord
	CreateRecord(${1:count})
	
# Dialog from the msilib module
snippet Dialog
	Dialog(${1:db}, ${2:name}, ${3:x}, ${4:y}, ${5:w}, ${6:h}, ${7:attr}, ${8:title}, ${9:first}, ${10:default}, ${11:cancel})
	
# Directory from the msilib module
snippet Directory
	Directory(${1:database}, ${2:cab}, ${3:basedir}, ${4:physical}, ${5:logical}, ${6:default[}, ${7:componentflags]})
	
# Execute from the msilib module
snippet Execute
	Execute(${1:params})
	
# FCICreate from the msilib module
snippet FCICreate
	FCICreate(${1:cabname}, ${2:files})
	
# Feature from the msilib module
snippet Feature
	Feature(${1:db}, ${2:id}, ${3:title}, ${4:desc}, ${5:display}, ${6:level=1}, ${7:parent=None}, ${8:directory=None}, ${9:attributes=0})
	
# Fetch from the msilib module
snippet Fetch
	Fetch(${1:})
	
# GetColumnInfo from the msilib module
snippet GetColumnInfo
	GetColumnInfo(${1:kind})
	
# GetFieldCount from the msilib module
snippet GetFieldCount
	GetFieldCount(${1:})
	
# GetInteger from the msilib module
snippet GetInteger
	GetInteger(${1:field})
	
# GetProperty from the msilib module
snippet GetProperty
	GetProperty(${1:field})
	
# GetPropertyCount from the msilib module
snippet GetPropertyCount
	GetPropertyCount(${1:})
	
# GetString from the msilib module
snippet GetString
	GetString(${1:field})
	
# GetSummaryInformation from the msilib module
snippet GetSummaryInformation
	GetSummaryInformation(${1:count})
	
# Modify from the msilib module
snippet Modify
	Modify(${1:kind}, ${2:data})
	
# OpenDatabase from the msilib module
snippet OpenDatabase
	OpenDatabase(${1:path}, ${2:persist})
	
# OpenView from the msilib module
snippet OpenView
	OpenView(${1:sql})
	
# Persist from the msilib module
snippet Persist
	Persist(${1:})
	
# RadioButtonGroup from the msilib module
snippet RadioButtonGroup
	RadioButtonGroup(${1:dlg}, ${2:name}, ${3:property})
	
# SetInteger from the msilib module
snippet SetInteger
	SetInteger(${1:field}, ${2:value})
	
# SetProperty from the msilib module
snippet SetProperty
	SetProperty(${1:field}, ${2:value})
	
# SetStream from the msilib module
snippet SetStream
	SetStream(${1:field}, ${2:value})
	
# SetString from the msilib module
snippet SetString
	SetString(${1:field}, ${2:value})
	
# UuidCreate from the msilib module
snippet UuidCreate
	UuidCreate(${1:})
	
# add_data() from the msilib module
snippet add_data
	add_data(${1:database}, ${2:table}, ${3:records})
	
# add_stream() from the msilib module
snippet add_stream
	add_stream(${1:database}, ${2:name}, ${3:path})
	
# add_tables() from the msilib module
snippet add_tables
	add_tables(${1:database}, ${2:module})
	
# gen_uuid() from the msilib module
snippet gen_uuid
	gen_uuid(${1:})
	
# init_database() from the msilib module
snippet init_database
	init_database(${1:name}, ${2:schema}, ${3:ProductName}, ${4:ProductCode}, ${5:ProductVersion}, ${6:Manufacturer})
	
# schema() from the msilib module
snippet schema
	schema()
	
# sequence() from the msilib module
snippet sequence
	sequence()
	
# text() from the msilib module
snippet text
	text()
	
# LK_LOCK from the msvcrt module
snippet LK_LOCK
	LK_LOCK
	
# LK_NBLCK from the msvcrt module
snippet LK_NBLCK
	LK_NBLCK
	
# LK_NBRLCK from the msvcrt module
snippet LK_NBRLCK
	LK_NBRLCK
	
# LK_RLCK from the msvcrt module
snippet LK_RLCK
	LK_RLCK
	
# LK_UNLCK from the msvcrt module
snippet LK_UNLCK
	LK_UNLCK
	
# get_osfhandle() from the msvcrt module
snippet get_osfhandle
	get_osfhandle(${1:fd})
	
# getch() from the msvcrt module
snippet getch
	getch(${1:})
	
# getche() from the msvcrt module
snippet getche
	getche(${1:})
	
# getwch() from the msvcrt module
snippet getwch
	getwch(${1:})
	
# getwche() from the msvcrt module
snippet getwche
	getwche(${1:})
	
# heapmin() from the msvcrt module
snippet heapmin
	heapmin(${1:})
	
# kbhit() from the msvcrt module
snippet kbhit
	kbhit(${1:})
	
# locking() from the msvcrt module
snippet locking
	locking(${1:fd}, ${2:mode}, ${3:nbytes})
	
# open_osfhandle() from the msvcrt module
snippet open_osfhandle
	open_osfhandle(${1:handle}, ${2:flags})
	
# putch() from the msvcrt module
snippet putch
	putch(${1:char})
	
# putwch() from the msvcrt module
snippet putwch
	putwch(${1:unicode_char})
	
# setmode() from the msvcrt module
snippet setmode
	setmode(${1:fd}, ${2:flags})
	
# ungetch() from the msvcrt module
snippet ungetch
	ungetch(${1:char})
	
# ungetwch() from the msvcrt module
snippet ungetwch
	ungetwch(${1:unicode_char})
	
# Array from the multiprocessing module
snippet Array
	Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})
	
# AsyncResult from the multiprocessing module
snippet AsyncResult
	AsyncResult
	
# AuthenticationError from the multiprocessing module
snippet AuthenticationError
	AuthenticationError
	
# Barrier from the multiprocessing module
snippet Barrier
	Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})
	
# BaseManager from the multiprocessing module
snippet BaseManager
	BaseManager(${1:[address[}, ${2:authkey]]})
	
# BaseProxy from the multiprocessing module
snippet BaseProxy
	BaseProxy
	
# BoundedSemaphore from the multiprocessing module
snippet BoundedSemaphore
	BoundedSemaphore(${1:[value]})
	
# BufferTooShort from the multiprocessing module
snippet BufferTooShort
	BufferTooShort
	
# Client from the multiprocessing module
snippet Client
	Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})
	
# Condition from the multiprocessing module
snippet Condition
	Condition(${1:[lock]})
	
# Connection from the multiprocessing module
snippet Connection
	Connection
	
# Event from the multiprocessing module
snippet Event
	Event
	
# JoinableQueue from the multiprocessing module
snippet JoinableQueue
	JoinableQueue(${1:[maxsize]})
	
# Listener from the multiprocessing module
snippet Listener
	Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})
	
# Lock from the multiprocessing module
snippet Lock
	Lock
	
# Manager from the multiprocessing module
snippet Manager
	Manager(${1:})
	
# Namespace from the multiprocessing module
snippet Namespace
	Namespace
	
# Pipe from the multiprocessing module
snippet Pipe
	Pipe(${1:[duplex]})
	
# Pool from the multiprocessing module
snippet Pool
	Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})
	
# Process from the multiprocessing module
snippet Process
	Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})
	
# ProcessError from the multiprocessing module
snippet ProcessError
	ProcessError
	
# Queue from the multiprocessing module
snippet Queue
	Queue(${1:[maxsize]})
	
# RLock from the multiprocessing module
snippet RLock
	RLock
	
# RawArray from the multiprocessing module
snippet RawArray
	RawArray(${1:typecode_or_type}, ${2:size_or_initializer})
	
# RawValue from the multiprocessing module
snippet RawValue
	RawValue(${1:typecode_or_type}, ${2:*args})
	
# Semaphore from the multiprocessing module
snippet Semaphore
	Semaphore(${1:[value]})
	
# SimpleQueue from the multiprocessing module
snippet SimpleQueue
	SimpleQueue
	
# SyncManager from the multiprocessing module
snippet SyncManager
	SyncManager
	
# TimeoutError from the multiprocessing module
snippet TimeoutError
	TimeoutError
	
# Value from the multiprocessing module
snippet Value
	Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})
	
# active_children() from the multiprocessing module
snippet active_children
	active_children(${1:})
	
# answer_challenge() from the multiprocessing module
snippet answer_challenge
	answer_challenge(${1:connection}, ${2:authkey})
	
# copy() from the multiprocessing module
snippet copy
	copy(${1:obj})
	
# cpu_count() from the multiprocessing module
snippet cpu_count
	cpu_count(${1:})
	
# current_process() from the multiprocessing module
snippet current_process
	current_process(${1:})
	
# deliver_challenge() from the multiprocessing module
snippet deliver_challenge
	deliver_challenge(${1:connection}, ${2:authkey})
	
# freeze_support() from the multiprocessing module
snippet freeze_support
	freeze_support(${1:})
	
# get_all_start_methods() from the multiprocessing module
snippet get_all_start_methods
	get_all_start_methods(${1:})
	
# get_context() from the multiprocessing module
snippet get_context
	get_context(${1:method=None})
	
# get_logger() from the multiprocessing module
snippet get_logger
	get_logger(${1:})
	
# get_start_method() from the multiprocessing module
snippet get_start_method
	get_start_method(${1:allow_none=False})
	
# log_to_stderr() from the multiprocessing module
snippet log_to_stderr
	log_to_stderr(${1:})
	
# set_executable() from the multiprocessing module
snippet set_executable
	set_executable(${1:})
	
# set_start_method() from the multiprocessing module
snippet set_start_method
	set_start_method(${1:method})
	
# synchronized() from the multiprocessing module
snippet synchronized
	synchronized(${1:obj[}, ${2:lock]})
	
# wait() from the multiprocessing module
snippet wait
	wait(${1:object_list,})
	
# Array from the multiprocessing.connection module
snippet Array
	Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})
	
# AsyncResult from the multiprocessing.connection module
snippet AsyncResult
	AsyncResult
	
# AuthenticationError from the multiprocessing.connection module
snippet AuthenticationError
	AuthenticationError
	
# Barrier from the multiprocessing.connection module
snippet Barrier
	Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})
	
# BaseManager from the multiprocessing.connection module
snippet BaseManager
	BaseManager(${1:[address[}, ${2:authkey]]})
	
# BaseProxy from the multiprocessing.connection module
snippet BaseProxy
	BaseProxy
	
# BoundedSemaphore from the multiprocessing.connection module
snippet BoundedSemaphore
	BoundedSemaphore(${1:[value]})
	
# BufferTooShort from the multiprocessing.connection module
snippet BufferTooShort
	BufferTooShort
	
# Client from the multiprocessing.connection module
snippet Client
	Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})
	
# Condition from the multiprocessing.connection module
snippet Condition
	Condition(${1:[lock]})
	
# Connection from the multiprocessing.connection module
snippet Connection
	Connection
	
# Event from the multiprocessing.connection module
snippet Event
	Event
	
# JoinableQueue from the multiprocessing.connection module
snippet JoinableQueue
	JoinableQueue(${1:[maxsize]})
	
# Listener from the multiprocessing.connection module
snippet Listener
	Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})
	
# Lock from the multiprocessing.connection module
snippet Lock
	Lock
	
# Manager from the multiprocessing.connection module
snippet Manager
	Manager(${1:})
	
# Namespace from the multiprocessing.connection module
snippet Namespace
	Namespace
	
# Pipe from the multiprocessing.connection module
snippet Pipe
	Pipe(${1:[duplex]})
	
# Pool from the multiprocessing.connection module
snippet Pool
	Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})
	
# Process from the multiprocessing.connection module
snippet Process
	Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})
	
# ProcessError from the multiprocessing.connection module
snippet ProcessError
	ProcessError
	
# Queue from the multiprocessing.connection module
snippet Queue
	Queue(${1:[maxsize]})
	
# RLock from the multiprocessing.connection module
snippet RLock
	RLock
	
# RawArray from the multiprocessing.connection module
snippet RawArray
	RawArray(${1:typecode_or_type}, ${2:size_or_initializer})
	
# RawValue from the multiprocessing.connection module
snippet RawValue
	RawValue(${1:typecode_or_type}, ${2:*args})
	
# Semaphore from the multiprocessing.connection module
snippet Semaphore
	Semaphore(${1:[value]})
	
# SimpleQueue from the multiprocessing.connection module
snippet SimpleQueue
	SimpleQueue
	
# SyncManager from the multiprocessing.connection module
snippet SyncManager
	SyncManager
	
# TimeoutError from the multiprocessing.connection module
snippet TimeoutError
	TimeoutError
	
# Value from the multiprocessing.connection module
snippet Value
	Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})
	
# active_children() from the multiprocessing.connection module
snippet active_children
	active_children(${1:})
	
# answer_challenge() from the multiprocessing.connection module
snippet answer_challenge
	answer_challenge(${1:connection}, ${2:authkey})
	
# copy() from the multiprocessing.connection module
snippet copy
	copy(${1:obj})
	
# cpu_count() from the multiprocessing.connection module
snippet cpu_count
	cpu_count(${1:})
	
# current_process() from the multiprocessing.connection module
snippet current_process
	current_process(${1:})
	
# deliver_challenge() from the multiprocessing.connection module
snippet deliver_challenge
	deliver_challenge(${1:connection}, ${2:authkey})
	
# freeze_support() from the multiprocessing.connection module
snippet freeze_support
	freeze_support(${1:})
	
# get_all_start_methods() from the multiprocessing.connection module
snippet get_all_start_methods
	get_all_start_methods(${1:})
	
# get_context() from the multiprocessing.connection module
snippet get_context
	get_context(${1:method=None})
	
# get_logger() from the multiprocessing.connection module
snippet get_logger
	get_logger(${1:})
	
# get_start_method() from the multiprocessing.connection module
snippet get_start_method
	get_start_method(${1:allow_none=False})
	
# log_to_stderr() from the multiprocessing.connection module
snippet log_to_stderr
	log_to_stderr(${1:})
	
# set_executable() from the multiprocessing.connection module
snippet set_executable
	set_executable(${1:})
	
# set_start_method() from the multiprocessing.connection module
snippet set_start_method
	set_start_method(${1:method})
	
# synchronized() from the multiprocessing.connection module
snippet synchronized
	synchronized(${1:obj[}, ${2:lock]})
	
# wait() from the multiprocessing.connection module
snippet wait
	wait(${1:object_list,})
	
# Array from the multiprocessing.dummy module
snippet Array
	Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})
	
# AsyncResult from the multiprocessing.dummy module
snippet AsyncResult
	AsyncResult
	
# AuthenticationError from the multiprocessing.dummy module
snippet AuthenticationError
	AuthenticationError
	
# Barrier from the multiprocessing.dummy module
snippet Barrier
	Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})
	
# BaseManager from the multiprocessing.dummy module
snippet BaseManager
	BaseManager(${1:[address[}, ${2:authkey]]})
	
# BaseProxy from the multiprocessing.dummy module
snippet BaseProxy
	BaseProxy
	
# BoundedSemaphore from the multiprocessing.dummy module
snippet BoundedSemaphore
	BoundedSemaphore(${1:[value]})
	
# BufferTooShort from the multiprocessing.dummy module
snippet BufferTooShort
	BufferTooShort
	
# Client from the multiprocessing.dummy module
snippet Client
	Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})
	
# Condition from the multiprocessing.dummy module
snippet Condition
	Condition(${1:[lock]})
	
# Connection from the multiprocessing.dummy module
snippet Connection
	Connection
	
# Event from the multiprocessing.dummy module
snippet Event
	Event
	
# JoinableQueue from the multiprocessing.dummy module
snippet JoinableQueue
	JoinableQueue(${1:[maxsize]})
	
# Listener from the multiprocessing.dummy module
snippet Listener
	Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})
	
# Lock from the multiprocessing.dummy module
snippet Lock
	Lock
	
# Manager from the multiprocessing.dummy module
snippet Manager
	Manager(${1:})
	
# Namespace from the multiprocessing.dummy module
snippet Namespace
	Namespace
	
# Pipe from the multiprocessing.dummy module
snippet Pipe
	Pipe(${1:[duplex]})
	
# Pool from the multiprocessing.dummy module
snippet Pool
	Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})
	
# Process from the multiprocessing.dummy module
snippet Process
	Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})
	
# ProcessError from the multiprocessing.dummy module
snippet ProcessError
	ProcessError
	
# Queue from the multiprocessing.dummy module
snippet Queue
	Queue(${1:[maxsize]})
	
# RLock from the multiprocessing.dummy module
snippet RLock
	RLock
	
# RawArray from the multiprocessing.dummy module
snippet RawArray
	RawArray(${1:typecode_or_type}, ${2:size_or_initializer})
	
# RawValue from the multiprocessing.dummy module
snippet RawValue
	RawValue(${1:typecode_or_type}, ${2:*args})
	
# Semaphore from the multiprocessing.dummy module
snippet Semaphore
	Semaphore(${1:[value]})
	
# SimpleQueue from the multiprocessing.dummy module
snippet SimpleQueue
	SimpleQueue
	
# SyncManager from the multiprocessing.dummy module
snippet SyncManager
	SyncManager
	
# TimeoutError from the multiprocessing.dummy module
snippet TimeoutError
	TimeoutError
	
# Value from the multiprocessing.dummy module
snippet Value
	Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})
	
# active_children() from the multiprocessing.dummy module
snippet active_children
	active_children(${1:})
	
# answer_challenge() from the multiprocessing.dummy module
snippet answer_challenge
	answer_challenge(${1:connection}, ${2:authkey})
	
# copy() from the multiprocessing.dummy module
snippet copy
	copy(${1:obj})
	
# cpu_count() from the multiprocessing.dummy module
snippet cpu_count
	cpu_count(${1:})
	
# current_process() from the multiprocessing.dummy module
snippet current_process
	current_process(${1:})
	
# deliver_challenge() from the multiprocessing.dummy module
snippet deliver_challenge
	deliver_challenge(${1:connection}, ${2:authkey})
	
# freeze_support() from the multiprocessing.dummy module
snippet freeze_support
	freeze_support(${1:})
	
# get_all_start_methods() from the multiprocessing.dummy module
snippet get_all_start_methods
	get_all_start_methods(${1:})
	
# get_context() from the multiprocessing.dummy module
snippet get_context
	get_context(${1:method=None})
	
# get_logger() from the multiprocessing.dummy module
snippet get_logger
	get_logger(${1:})
	
# get_start_method() from the multiprocessing.dummy module
snippet get_start_method
	get_start_method(${1:allow_none=False})
	
# log_to_stderr() from the multiprocessing.dummy module
snippet log_to_stderr
	log_to_stderr(${1:})
	
# set_executable() from the multiprocessing.dummy module
snippet set_executable
	set_executable(${1:})
	
# set_start_method() from the multiprocessing.dummy module
snippet set_start_method
	set_start_method(${1:method})
	
# synchronized() from the multiprocessing.dummy module
snippet synchronized
	synchronized(${1:obj[}, ${2:lock]})
	
# wait() from the multiprocessing.dummy module
snippet wait
	wait(${1:object_list,})
	
# Array from the multiprocessing.managers module
snippet Array
	Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})
	
# AsyncResult from the multiprocessing.managers module
snippet AsyncResult
	AsyncResult
	
# AuthenticationError from the multiprocessing.managers module
snippet AuthenticationError
	AuthenticationError
	
# Barrier from the multiprocessing.managers module
snippet Barrier
	Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})
	
# BaseManager from the multiprocessing.managers module
snippet BaseManager
	BaseManager(${1:[address[}, ${2:authkey]]})
	
# BaseProxy from the multiprocessing.managers module
snippet BaseProxy
	BaseProxy
	
# BoundedSemaphore from the multiprocessing.managers module
snippet BoundedSemaphore
	BoundedSemaphore(${1:[value]})
	
# BufferTooShort from the multiprocessing.managers module
snippet BufferTooShort
	BufferTooShort
	
# Client from the multiprocessing.managers module
snippet Client
	Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})
	
# Condition from the multiprocessing.managers module
snippet Condition
	Condition(${1:[lock]})
	
# Connection from the multiprocessing.managers module
snippet Connection
	Connection
	
# Event from the multiprocessing.managers module
snippet Event
	Event
	
# JoinableQueue from the multiprocessing.managers module
snippet JoinableQueue
	JoinableQueue(${1:[maxsize]})
	
# Listener from the multiprocessing.managers module
snippet Listener
	Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})
	
# Lock from the multiprocessing.managers module
snippet Lock
	Lock
	
# Manager from the multiprocessing.managers module
snippet Manager
	Manager(${1:})
	
# Namespace from the multiprocessing.managers module
snippet Namespace
	Namespace
	
# Pipe from the multiprocessing.managers module
snippet Pipe
	Pipe(${1:[duplex]})
	
# Pool from the multiprocessing.managers module
snippet Pool
	Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})
	
# Process from the multiprocessing.managers module
snippet Process
	Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})
	
# ProcessError from the multiprocessing.managers module
snippet ProcessError
	ProcessError
	
# Queue from the multiprocessing.managers module
snippet Queue
	Queue(${1:[maxsize]})
	
# RLock from the multiprocessing.managers module
snippet RLock
	RLock
	
# RawArray from the multiprocessing.managers module
snippet RawArray
	RawArray(${1:typecode_or_type}, ${2:size_or_initializer})
	
# RawValue from the multiprocessing.managers module
snippet RawValue
	RawValue(${1:typecode_or_type}, ${2:*args})
	
# Semaphore from the multiprocessing.managers module
snippet Semaphore
	Semaphore(${1:[value]})
	
# SimpleQueue from the multiprocessing.managers module
snippet SimpleQueue
	SimpleQueue
	
# SyncManager from the multiprocessing.managers module
snippet SyncManager
	SyncManager
	
# TimeoutError from the multiprocessing.managers module
snippet TimeoutError
	TimeoutError
	
# Value from the multiprocessing.managers module
snippet Value
	Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})
	
# active_children() from the multiprocessing.managers module
snippet active_children
	active_children(${1:})
	
# answer_challenge() from the multiprocessing.managers module
snippet answer_challenge
	answer_challenge(${1:connection}, ${2:authkey})
	
# copy() from the multiprocessing.managers module
snippet copy
	copy(${1:obj})
	
# cpu_count() from the multiprocessing.managers module
snippet cpu_count
	cpu_count(${1:})
	
# current_process() from the multiprocessing.managers module
snippet current_process
	current_process(${1:})
	
# deliver_challenge() from the multiprocessing.managers module
snippet deliver_challenge
	deliver_challenge(${1:connection}, ${2:authkey})
	
# freeze_support() from the multiprocessing.managers module
snippet freeze_support
	freeze_support(${1:})
	
# get_all_start_methods() from the multiprocessing.managers module
snippet get_all_start_methods
	get_all_start_methods(${1:})
	
# get_context() from the multiprocessing.managers module
snippet get_context
	get_context(${1:method=None})
	
# get_logger() from the multiprocessing.managers module
snippet get_logger
	get_logger(${1:})
	
# get_start_method() from the multiprocessing.managers module
snippet get_start_method
	get_start_method(${1:allow_none=False})
	
# log_to_stderr() from the multiprocessing.managers module
snippet log_to_stderr
	log_to_stderr(${1:})
	
# set_executable() from the multiprocessing.managers module
snippet set_executable
	set_executable(${1:})
	
# set_start_method() from the multiprocessing.managers module
snippet set_start_method
	set_start_method(${1:method})
	
# synchronized() from the multiprocessing.managers module
snippet synchronized
	synchronized(${1:obj[}, ${2:lock]})
	
# wait() from the multiprocessing.managers module
snippet wait
	wait(${1:object_list,})
	
# Array from the multiprocessing.pool module
snippet Array
	Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})
	
# AsyncResult from the multiprocessing.pool module
snippet AsyncResult
	AsyncResult
	
# AuthenticationError from the multiprocessing.pool module
snippet AuthenticationError
	AuthenticationError
	
# Barrier from the multiprocessing.pool module
snippet Barrier
	Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})
	
# BaseManager from the multiprocessing.pool module
snippet BaseManager
	BaseManager(${1:[address[}, ${2:authkey]]})
	
# BaseProxy from the multiprocessing.pool module
snippet BaseProxy
	BaseProxy
	
# BoundedSemaphore from the multiprocessing.pool module
snippet BoundedSemaphore
	BoundedSemaphore(${1:[value]})
	
# BufferTooShort from the multiprocessing.pool module
snippet BufferTooShort
	BufferTooShort
	
# Client from the multiprocessing.pool module
snippet Client
	Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})
	
# Condition from the multiprocessing.pool module
snippet Condition
	Condition(${1:[lock]})
	
# Connection from the multiprocessing.pool module
snippet Connection
	Connection
	
# Event from the multiprocessing.pool module
snippet Event
	Event
	
# JoinableQueue from the multiprocessing.pool module
snippet JoinableQueue
	JoinableQueue(${1:[maxsize]})
	
# Listener from the multiprocessing.pool module
snippet Listener
	Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})
	
# Lock from the multiprocessing.pool module
snippet Lock
	Lock
	
# Manager from the multiprocessing.pool module
snippet Manager
	Manager(${1:})
	
# Namespace from the multiprocessing.pool module
snippet Namespace
	Namespace
	
# Pipe from the multiprocessing.pool module
snippet Pipe
	Pipe(${1:[duplex]})
	
# Pool from the multiprocessing.pool module
snippet Pool
	Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})
	
# Process from the multiprocessing.pool module
snippet Process
	Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})
	
# ProcessError from the multiprocessing.pool module
snippet ProcessError
	ProcessError
	
# Queue from the multiprocessing.pool module
snippet Queue
	Queue(${1:[maxsize]})
	
# RLock from the multiprocessing.pool module
snippet RLock
	RLock
	
# RawArray from the multiprocessing.pool module
snippet RawArray
	RawArray(${1:typecode_or_type}, ${2:size_or_initializer})
	
# RawValue from the multiprocessing.pool module
snippet RawValue
	RawValue(${1:typecode_or_type}, ${2:*args})
	
# Semaphore from the multiprocessing.pool module
snippet Semaphore
	Semaphore(${1:[value]})
	
# SimpleQueue from the multiprocessing.pool module
snippet SimpleQueue
	SimpleQueue
	
# SyncManager from the multiprocessing.pool module
snippet SyncManager
	SyncManager
	
# TimeoutError from the multiprocessing.pool module
snippet TimeoutError
	TimeoutError
	
# Value from the multiprocessing.pool module
snippet Value
	Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})
	
# active_children() from the multiprocessing.pool module
snippet active_children
	active_children(${1:})
	
# answer_challenge() from the multiprocessing.pool module
snippet answer_challenge
	answer_challenge(${1:connection}, ${2:authkey})
	
# copy() from the multiprocessing.pool module
snippet copy
	copy(${1:obj})
	
# cpu_count() from the multiprocessing.pool module
snippet cpu_count
	cpu_count(${1:})
	
# current_process() from the multiprocessing.pool module
snippet current_process
	current_process(${1:})
	
# deliver_challenge() from the multiprocessing.pool module
snippet deliver_challenge
	deliver_challenge(${1:connection}, ${2:authkey})
	
# freeze_support() from the multiprocessing.pool module
snippet freeze_support
	freeze_support(${1:})
	
# get_all_start_methods() from the multiprocessing.pool module
snippet get_all_start_methods
	get_all_start_methods(${1:})
	
# get_context() from the multiprocessing.pool module
snippet get_context
	get_context(${1:method=None})
	
# get_logger() from the multiprocessing.pool module
snippet get_logger
	get_logger(${1:})
	
# get_start_method() from the multiprocessing.pool module
snippet get_start_method
	get_start_method(${1:allow_none=False})
	
# log_to_stderr() from the multiprocessing.pool module
snippet log_to_stderr
	log_to_stderr(${1:})
	
# set_executable() from the multiprocessing.pool module
snippet set_executable
	set_executable(${1:})
	
# set_start_method() from the multiprocessing.pool module
snippet set_start_method
	set_start_method(${1:method})
	
# synchronized() from the multiprocessing.pool module
snippet synchronized
	synchronized(${1:obj[}, ${2:lock]})
	
# wait() from the multiprocessing.pool module
snippet wait
	wait(${1:object_list,})
	
# Array from the multiprocessing.sharedctypes module
snippet Array
	Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})
	
# AsyncResult from the multiprocessing.sharedctypes module
snippet AsyncResult
	AsyncResult
	
# AuthenticationError from the multiprocessing.sharedctypes module
snippet AuthenticationError
	AuthenticationError
	
# Barrier from the multiprocessing.sharedctypes module
snippet Barrier
	Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})
	
# BaseManager from the multiprocessing.sharedctypes module
snippet BaseManager
	BaseManager(${1:[address[}, ${2:authkey]]})
	
# BaseProxy from the multiprocessing.sharedctypes module
snippet BaseProxy
	BaseProxy
	
# BoundedSemaphore from the multiprocessing.sharedctypes module
snippet BoundedSemaphore
	BoundedSemaphore(${1:[value]})
	
# BufferTooShort from the multiprocessing.sharedctypes module
snippet BufferTooShort
	BufferTooShort
	
# Client from the multiprocessing.sharedctypes module
snippet Client
	Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})
	
# Condition from the multiprocessing.sharedctypes module
snippet Condition
	Condition(${1:[lock]})
	
# Connection from the multiprocessing.sharedctypes module
snippet Connection
	Connection
	
# Event from the multiprocessing.sharedctypes module
snippet Event
	Event
	
# JoinableQueue from the multiprocessing.sharedctypes module
snippet JoinableQueue
	JoinableQueue(${1:[maxsize]})
	
# Listener from the multiprocessing.sharedctypes module
snippet Listener
	Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})
	
# Lock from the multiprocessing.sharedctypes module
snippet Lock
	Lock
	
# Manager from the multiprocessing.sharedctypes module
snippet Manager
	Manager(${1:})
	
# Namespace from the multiprocessing.sharedctypes module
snippet Namespace
	Namespace
	
# Pipe from the multiprocessing.sharedctypes module
snippet Pipe
	Pipe(${1:[duplex]})
	
# Pool from the multiprocessing.sharedctypes module
snippet Pool
	Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})
	
# Process from the multiprocessing.sharedctypes module
snippet Process
	Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})
	
# ProcessError from the multiprocessing.sharedctypes module
snippet ProcessError
	ProcessError
	
# Queue from the multiprocessing.sharedctypes module
snippet Queue
	Queue(${1:[maxsize]})
	
# RLock from the multiprocessing.sharedctypes module
snippet RLock
	RLock
	
# RawArray from the multiprocessing.sharedctypes module
snippet RawArray
	RawArray(${1:typecode_or_type}, ${2:size_or_initializer})
	
# RawValue from the multiprocessing.sharedctypes module
snippet RawValue
	RawValue(${1:typecode_or_type}, ${2:*args})
	
# Semaphore from the multiprocessing.sharedctypes module
snippet Semaphore
	Semaphore(${1:[value]})
	
# SimpleQueue from the multiprocessing.sharedctypes module
snippet SimpleQueue
	SimpleQueue
	
# SyncManager from the multiprocessing.sharedctypes module
snippet SyncManager
	SyncManager
	
# TimeoutError from the multiprocessing.sharedctypes module
snippet TimeoutError
	TimeoutError
	
# Value from the multiprocessing.sharedctypes module
snippet Value
	Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})
	
# active_children() from the multiprocessing.sharedctypes module
snippet active_children
	active_children(${1:})
	
# answer_challenge() from the multiprocessing.sharedctypes module
snippet answer_challenge
	answer_challenge(${1:connection}, ${2:authkey})
	
# copy() from the multiprocessing.sharedctypes module
snippet copy
	copy(${1:obj})
	
# cpu_count() from the multiprocessing.sharedctypes module
snippet cpu_count
	cpu_count(${1:})
	
# current_process() from the multiprocessing.sharedctypes module
snippet current_process
	current_process(${1:})
	
# deliver_challenge() from the multiprocessing.sharedctypes module
snippet deliver_challenge
	deliver_challenge(${1:connection}, ${2:authkey})
	
# freeze_support() from the multiprocessing.sharedctypes module
snippet freeze_support
	freeze_support(${1:})
	
# get_all_start_methods() from the multiprocessing.sharedctypes module
snippet get_all_start_methods
	get_all_start_methods(${1:})
	
# get_context() from the multiprocessing.sharedctypes module
snippet get_context
	get_context(${1:method=None})
	
# get_logger() from the multiprocessing.sharedctypes module
snippet get_logger
	get_logger(${1:})
	
# get_start_method() from the multiprocessing.sharedctypes module
snippet get_start_method
	get_start_method(${1:allow_none=False})
	
# log_to_stderr() from the multiprocessing.sharedctypes module
snippet log_to_stderr
	log_to_stderr(${1:})
	
# set_executable() from the multiprocessing.sharedctypes module
snippet set_executable
	set_executable(${1:})
	
# set_start_method() from the multiprocessing.sharedctypes module
snippet set_start_method
	set_start_method(${1:method})
	
# synchronized() from the multiprocessing.sharedctypes module
snippet synchronized
	synchronized(${1:obj[}, ${2:lock]})
	
# wait() from the multiprocessing.sharedctypes module
snippet wait
	wait(${1:object_list,})
	
# NetrcParseError from the netrc module
snippet NetrcParseError
	NetrcParseError
	
# __repr__() from the netrc module
snippet __repr__
	__repr__(${1:})
	
# authenticators() from the netrc module
snippet authenticators
	authenticators(${1:host})
	
# hosts() from the netrc module
snippet hosts
	hosts()
	
# macros() from the netrc module
snippet macros
	macros()
	
# netrc() from the netrc module
snippet netrc
	netrc(${1:[file]})
	
# cat() from the nis module
snippet cat
	cat(${1:mapname}, ${2:domain=default_domain})
	
# error() from the nis module
snippet error
	error()
	
# get_default_domain() from the nis module
snippet get_default_domain
	get_default_domain(${1:})
	
# maps() from the nis module
snippet maps
	maps(${1:domain=default_domain})
	
# match() from the nis module
snippet match
	match(${1:key,})
	
# NNTP from the nntplib module
snippet NNTP
	NNTP(${1:host}, ${2:port=119}, ${3:user=None}, ${4:password=None}, ${5:readermode=None}, ${6:usenetrc=False[}, ${7:timeout]})
	
# NNTPDataError from the nntplib module
snippet NNTPDataError
	NNTPDataError
	
# NNTPError from the nntplib module
snippet NNTPError
	NNTPError
	
# NNTPPermanentError from the nntplib module
snippet NNTPPermanentError
	NNTPPermanentError
	
# NNTPProtocolError from the nntplib module
snippet NNTPProtocolError
	NNTPProtocolError
	
# NNTPReplyError from the nntplib module
snippet NNTPReplyError
	NNTPReplyError
	
# NNTPTemporaryError from the nntplib module
snippet NNTPTemporaryError
	NNTPTemporaryError
	
# NNTP_SSL from the nntplib module
snippet NNTP_SSL
	NNTP_SSL(${1:host}, ${2:port=563}, ${3:user=None}, ${4:password=None}, ${5:ssl_context=None}, ${6:readermode=None}, ${7:usenetrc=False[}, ${8:timeout]})
	
# article() from the nntplib module
snippet article
	article(${1:message_spec=None}, ${2:*}, ${3:file=None})
	
# body() from the nntplib module
snippet body
	body(${1:message_spec=None}, ${2:*}, ${3:file=None})
	
# date() from the nntplib module
snippet date
	date(${1:})
	
# decode_header() from the nntplib module
snippet decode_header
	decode_header(${1:header_str})
	
# description() from the nntplib module
snippet description
	description(${1:group})
	
# descriptions() from the nntplib module
snippet descriptions
	descriptions(${1:grouppattern})
	
# getcapabilities() from the nntplib module
snippet getcapabilities
	getcapabilities(${1:})
	
# getwelcome() from the nntplib module
snippet getwelcome
	getwelcome(${1:})
	
# group() from the nntplib module
snippet group
	group(${1:name})
	
# head() from the nntplib module
snippet head
	head(${1:message_spec=None}, ${2:*}, ${3:file=None})
	
# help() from the nntplib module
snippet help
	help(${1:*}, ${2:file=None})
	
# ihave() from the nntplib module
snippet ihave
	ihave(${1:message_id}, ${2:data})
	
# last() from the nntplib module
snippet last
	last(${1:})
	
# list() from the nntplib module
snippet list
	list(${1:group_pattern=None}, ${2:*}, ${3:file=None})
	
# login() from the nntplib module
snippet login
	login(${1:user=None}, ${2:password=None}, ${3:usenetrc=True})
	
# newgroups() from the nntplib module
snippet newgroups
	newgroups(${1:date}, ${2:*}, ${3:file=None})
	
# newnews() from the nntplib module
snippet newnews
	newnews(${1:group}, ${2:date}, ${3:*}, ${4:file=None})
	
# next() from the nntplib module
snippet next
	next(${1:})
	
# nntp_implementation() from the nntplib module
snippet nntp_implementation
	nntp_implementation()
	
# nntp_version() from the nntplib module
snippet nntp_version
	nntp_version()
	
# over() from the nntplib module
snippet over
	over(${1:message_spec}, ${2:*}, ${3:file=None})
	
# post() from the nntplib module
snippet post
	post(${1:data})
	
# quit() from the nntplib module
snippet quit
	quit(${1:})
	
# set_debuglevel() from the nntplib module
snippet set_debuglevel
	set_debuglevel(${1:level})
	
# slave() from the nntplib module
snippet slave
	slave(${1:})
	
# starttls() from the nntplib module
snippet starttls
	starttls(${1:ssl_context=None})
	
# stat() from the nntplib module
snippet stat
	stat(${1:message_spec=None})
	
# xhdr() from the nntplib module
snippet xhdr
	xhdr(${1:hdr}, ${2:str}, ${3:*}, ${4:file=None})
	
# xover() from the nntplib module
snippet xover
	xover(${1:start}, ${2:end}, ${3:*}, ${4:file=None})
	
# xpath() from the nntplib module
snippet xpath
	xpath(${1:id})
	
# Complex from the numbers module
snippet Complex
	Complex
	
# Integral from the numbers module
snippet Integral
	Integral
	
# Number from the numbers module
snippet Number
	Number
	
# Rational from the numbers module
snippet Rational
	Rational
	
# Real from the numbers module
snippet Real
	Real
	
# __abs__() from the operator module
snippet __abs__
	__abs__(${1:obj})
	
# __add__() from the operator module
snippet __add__
	__add__(${1:a}, ${2:b})
	
# __and__() from the operator module
snippet __and__
	__and__(${1:a}, ${2:b})
	
# __concat__() from the operator module
snippet __concat__
	__concat__(${1:a}, ${2:b})
	
# __contains__() from the operator module
snippet __contains__
	__contains__(${1:a}, ${2:b})
	
# __delitem__() from the operator module
snippet __delitem__
	__delitem__(${1:a}, ${2:b})
	
# __eq__() from the operator module
snippet __eq__
	__eq__(${1:a}, ${2:b})
	
# __floordiv__() from the operator module
snippet __floordiv__
	__floordiv__(${1:a}, ${2:b})
	
# __ge__() from the operator module
snippet __ge__
	__ge__(${1:a}, ${2:b})
	
# __getitem__() from the operator module
snippet __getitem__
	__getitem__(${1:a}, ${2:b})
	
# __gt__() from the operator module
snippet __gt__
	__gt__(${1:a}, ${2:b})
	
# __iadd__() from the operator module
snippet __iadd__
	__iadd__(${1:a}, ${2:b})
	
# __iand__() from the operator module
snippet __iand__
	__iand__(${1:a}, ${2:b})
	
# __iconcat__() from the operator module
snippet __iconcat__
	__iconcat__(${1:a}, ${2:b})
	
# __ifloordiv__() from the operator module
snippet __ifloordiv__
	__ifloordiv__(${1:a}, ${2:b})
	
# __ilshift__() from the operator module
snippet __ilshift__
	__ilshift__(${1:a}, ${2:b})
	
# __imatmul__() from the operator module
snippet __imatmul__
	__imatmul__(${1:a}, ${2:b})
	
# __imod__() from the operator module
snippet __imod__
	__imod__(${1:a}, ${2:b})
	
# __imul__() from the operator module
snippet __imul__
	__imul__(${1:a}, ${2:b})
	
# __index__() from the operator module
snippet __index__
	__index__(${1:a})
	
# __inv__() from the operator module
snippet __inv__
	__inv__(${1:obj})
	
# __invert__() from the operator module
snippet __invert__
	__invert__(${1:obj})
	
# __ior__() from the operator module
snippet __ior__
	__ior__(${1:a}, ${2:b})
	
# __ipow__() from the operator module
snippet __ipow__
	__ipow__(${1:a}, ${2:b})
	
# __irshift__() from the operator module
snippet __irshift__
	__irshift__(${1:a}, ${2:b})
	
# __isub__() from the operator module
snippet __isub__
	__isub__(${1:a}, ${2:b})
	
# __itruediv__() from the operator module
snippet __itruediv__
	__itruediv__(${1:a}, ${2:b})
	
# __ixor__() from the operator module
snippet __ixor__
	__ixor__(${1:a}, ${2:b})
	
# __le__() from the operator module
snippet __le__
	__le__(${1:a}, ${2:b})
	
# __lshift__() from the operator module
snippet __lshift__
	__lshift__(${1:a}, ${2:b})
	
# __lt__() from the operator module
snippet __lt__
	__lt__(${1:a}, ${2:b})
	
# __matmul__() from the operator module
snippet __matmul__
	__matmul__(${1:a}, ${2:b})
	
# __mod__() from the operator module
snippet __mod__
	__mod__(${1:a}, ${2:b})
	
# __mul__() from the operator module
snippet __mul__
	__mul__(${1:a}, ${2:b})
	
# __ne__() from the operator module
snippet __ne__
	__ne__(${1:a}, ${2:b})
	
# __neg__() from the operator module
snippet __neg__
	__neg__(${1:obj})
	
# __not__() from the operator module
snippet __not__
	__not__(${1:obj})
	
# __or__() from the operator module
snippet __or__
	__or__(${1:a}, ${2:b})
	
# __pos__() from the operator module
snippet __pos__
	__pos__(${1:obj})
	
# __pow__() from the operator module
snippet __pow__
	__pow__(${1:a}, ${2:b})
	
# __rshift__() from the operator module
snippet __rshift__
	__rshift__(${1:a}, ${2:b})
	
# __setitem__() from the operator module
snippet __setitem__
	__setitem__(${1:a}, ${2:b}, ${3:c})
	
# __sub__() from the operator module
snippet __sub__
	__sub__(${1:a}, ${2:b})
	
# __truediv__() from the operator module
snippet __truediv__
	__truediv__(${1:a}, ${2:b})
	
# __xor__() from the operator module
snippet __xor__
	__xor__(${1:a}, ${2:b})
	
# abs() from the operator module
snippet abs
	abs(${1:obj})
	
# add() from the operator module
snippet add
	add(${1:a}, ${2:b})
	
# and_() from the operator module
snippet and_
	and_(${1:a}, ${2:b})
	
# attrgetter() from the operator module
snippet attrgetter
	attrgetter(${1:attr})
	
# concat() from the operator module
snippet concat
	concat(${1:a}, ${2:b})
	
# contains() from the operator module
snippet contains
	contains(${1:a}, ${2:b})
	
# countOf() from the operator module
snippet countOf
	countOf(${1:a}, ${2:b})
	
# delitem() from the operator module
snippet delitem
	delitem(${1:a}, ${2:b})
	
# eq() from the operator module
snippet eq
	eq(${1:a}, ${2:b})
	
# floordiv() from the operator module
snippet floordiv
	floordiv(${1:a}, ${2:b})
	
# ge() from the operator module
snippet ge
	ge(${1:a}, ${2:b})
	
# getitem() from the operator module
snippet getitem
	getitem(${1:a}, ${2:b})
	
# gt() from the operator module
snippet gt
	gt(${1:a}, ${2:b})
	
# iadd() from the operator module
snippet iadd
	iadd(${1:a}, ${2:b})
	
# iand() from the operator module
snippet iand
	iand(${1:a}, ${2:b})
	
# iconcat() from the operator module
snippet iconcat
	iconcat(${1:a}, ${2:b})
	
# ifloordiv() from the operator module
snippet ifloordiv
	ifloordiv(${1:a}, ${2:b})
	
# ilshift() from the operator module
snippet ilshift
	ilshift(${1:a}, ${2:b})
	
# imatmul() from the operator module
snippet imatmul
	imatmul(${1:a}, ${2:b})
	
# imod() from the operator module
snippet imod
	imod(${1:a}, ${2:b})
	
# imul() from the operator module
snippet imul
	imul(${1:a}, ${2:b})
	
# index() from the operator module
snippet index
	index(${1:a})
	
# indexOf() from the operator module
snippet indexOf
	indexOf(${1:a}, ${2:b})
	
# inv() from the operator module
snippet inv
	inv(${1:obj})
	
# invert() from the operator module
snippet invert
	invert(${1:obj})
	
# ior() from the operator module
snippet ior
	ior(${1:a}, ${2:b})
	
# ipow() from the operator module
snippet ipow
	ipow(${1:a}, ${2:b})
	
# irshift() from the operator module
snippet irshift
	irshift(${1:a}, ${2:b})
	
# is_() from the operator module
snippet is_
	is_(${1:a}, ${2:b})
	
# is_not() from the operator module
snippet is_not
	is_not(${1:a}, ${2:b})
	
# isub() from the operator module
snippet isub
	isub(${1:a}, ${2:b})
	
# itemgetter() from the operator module
snippet itemgetter
	itemgetter(${1:*items})
	
# itruediv() from the operator module
snippet itruediv
	itruediv(${1:a}, ${2:b})
	
# ixor() from the operator module
snippet ixor
	ixor(${1:a}, ${2:b})
	
# le() from the operator module
snippet le
	le(${1:a}, ${2:b})
	
# length_hint() from the operator module
snippet length_hint
	length_hint(${1:obj}, ${2:default=0})
	
# lshift() from the operator module
snippet lshift
	lshift(${1:a}, ${2:b})
	
# lt() from the operator module
snippet lt
	lt(${1:a}, ${2:b})
	
# matmul() from the operator module
snippet matmul
	matmul(${1:a}, ${2:b})
	
# methodcaller() from the operator module
snippet methodcaller
	methodcaller(${1:name[}, ${2:args...]})
	
# mod() from the operator module
snippet mod
	mod(${1:a}, ${2:b})
	
# mul() from the operator module
snippet mul
	mul(${1:a}, ${2:b})
	
# ne() from the operator module
snippet ne
	ne(${1:a}, ${2:b})
	
# neg() from the operator module
snippet neg
	neg(${1:obj})
	
# not_() from the operator module
snippet not_
	not_(${1:obj})
	
# or_() from the operator module
snippet or_
	or_(${1:a}, ${2:b})
	
# pos() from the operator module
snippet pos
	pos(${1:obj})
	
# pow() from the operator module
snippet pow
	pow(${1:a}, ${2:b})
	
# rshift() from the operator module
snippet rshift
	rshift(${1:a}, ${2:b})
	
# setitem() from the operator module
snippet setitem
	setitem(${1:a}, ${2:b}, ${3:c})
	
# sub() from the operator module
snippet sub
	sub(${1:a}, ${2:b})
	
# truediv() from the operator module
snippet truediv
	truediv(${1:a}, ${2:b})
	
# truth() from the operator module
snippet truth
	truth(${1:obj})
	
# xor() from the operator module
snippet xor
	xor(${1:a,})
	
# ACTIONS from the optparse module
snippet ACTIONS
	ACTIONS
	
# ALWAYS_TYPED_ACTIONS from the optparse module
snippet ALWAYS_TYPED_ACTIONS
	ALWAYS_TYPED_ACTIONS
	
# OptionGroup from the optparse module
snippet OptionGroup
	OptionGroup(${1:parser}, ${2:title}, ${3:description=None})
	
# OptionParser from the optparse module
snippet OptionParser
	OptionParser(${1:...})
	
# STORE_ACTIONS from the optparse module
snippet STORE_ACTIONS
	STORE_ACTIONS
	
# TYPED_ACTIONS from the optparse module
snippet TYPED_ACTIONS
	TYPED_ACTIONS
	
# TYPES from the optparse module
snippet TYPES
	TYPES
	
# TYPE_CHECKER from the optparse module
snippet TYPE_CHECKER
	TYPE_CHECKER
	
# action() from the optparse module
snippet action
	action()
	
# add_option() from the optparse module
snippet add_option
	add_option(${1:option})
	
# callback() from the optparse module
snippet callback
	callback()
	
# callback_args() from the optparse module
snippet callback_args
	callback_args()
	
# callback_kwargs() from the optparse module
snippet callback_kwargs
	callback_kwargs()
	
# choices() from the optparse module
snippet choices
	choices()
	
# const() from the optparse module
snippet const
	const()
	
# default() from the optparse module
snippet default
	default()
	
# dest() from the optparse module
snippet dest
	dest()
	
# disable_interspersed_args() from the optparse module
snippet disable_interspersed_args
	disable_interspersed_args(${1:})
	
# enable_interspersed_args() from the optparse module
snippet enable_interspersed_args
	enable_interspersed_args(${1:})
	
# get_option() from the optparse module
snippet get_option
	get_option(${1:opt_str})
	
# get_option_group() from the optparse module
snippet get_option_group
	get_option_group(${1:opt_str})
	
# get_usage() from the optparse module
snippet get_usage
	get_usage(${1:})
	
# get_version() from the optparse module
snippet get_version
	get_version(${1:})
	
# has_option() from the optparse module
snippet has_option
	has_option(${1:opt_str})
	
# help() from the optparse module
snippet help
	help()
	
# metavar() from the optparse module
snippet metavar
	metavar()
	
# nargs() from the optparse module
snippet nargs
	nargs()
	
# print_usage() from the optparse module
snippet print_usage
	print_usage(${1:file=None})
	
# print_version() from the optparse module
snippet print_version
	print_version(${1:file=None})
	
# remove_option() from the optparse module
snippet remove_option
	remove_option(${1:opt_str})
	
# set_defaults() from the optparse module
snippet set_defaults
	set_defaults(${1:dest=value}, ${2:...})
	
# set_usage() from the optparse module
snippet set_usage
	set_usage(${1:usage})
	
# type() from the optparse module
snippet type
	type()
	
# CLD_CONTINUED from the os module
snippet CLD_CONTINUED
	CLD_CONTINUED
	
# CLD_DUMPED from the os module
snippet CLD_DUMPED
	CLD_DUMPED
	
# CLD_EXITED from the os module
snippet CLD_EXITED
	CLD_EXITED
	
# CLD_TRAPPED from the os module
snippet CLD_TRAPPED
	CLD_TRAPPED
	
# DirEntry from the os module
snippet DirEntry
	DirEntry
	
# EX_CANTCREAT from the os module
snippet EX_CANTCREAT
	EX_CANTCREAT
	
# EX_CONFIG from the os module
snippet EX_CONFIG
	EX_CONFIG
	
# EX_DATAERR from the os module
snippet EX_DATAERR
	EX_DATAERR
	
# EX_IOERR from the os module
snippet EX_IOERR
	EX_IOERR
	
# EX_NOHOST from the os module
snippet EX_NOHOST
	EX_NOHOST
	
# EX_NOINPUT from the os module
snippet EX_NOINPUT
	EX_NOINPUT
	
# EX_NOPERM from the os module
snippet EX_NOPERM
	EX_NOPERM
	
# EX_NOTFOUND from the os module
snippet EX_NOTFOUND
	EX_NOTFOUND
	
# EX_NOUSER from the os module
snippet EX_NOUSER
	EX_NOUSER
	
# EX_OK from the os module
snippet EX_OK
	EX_OK
	
# EX_OSERR from the os module
snippet EX_OSERR
	EX_OSERR
	
# EX_OSFILE from the os module
snippet EX_OSFILE
	EX_OSFILE
	
# EX_PROTOCOL from the os module
snippet EX_PROTOCOL
	EX_PROTOCOL
	
# EX_SOFTWARE from the os module
snippet EX_SOFTWARE
	EX_SOFTWARE
	
# EX_TEMPFAIL from the os module
snippet EX_TEMPFAIL
	EX_TEMPFAIL
	
# EX_UNAVAILABLE from the os module
snippet EX_UNAVAILABLE
	EX_UNAVAILABLE
	
# EX_USAGE from the os module
snippet EX_USAGE
	EX_USAGE
	
# F_LOCK from the os module
snippet F_LOCK
	F_LOCK
	
# F_OK from the os module
snippet F_OK
	F_OK
	
# F_TEST from the os module
snippet F_TEST
	F_TEST
	
# F_TLOCK from the os module
snippet F_TLOCK
	F_TLOCK
	
# F_ULOCK from the os module
snippet F_ULOCK
	F_ULOCK
	
# O_APPEND from the os module
snippet O_APPEND
	O_APPEND
	
# O_ASYNC from the os module
snippet O_ASYNC
	O_ASYNC
	
# O_BINARY from the os module
snippet O_BINARY
	O_BINARY
	
# O_CLOEXEC from the os module
snippet O_CLOEXEC
	O_CLOEXEC
	
# O_CREAT from the os module
snippet O_CREAT
	O_CREAT
	
# O_DIRECT from the os module
snippet O_DIRECT
	O_DIRECT
	
# O_DIRECTORY from the os module
snippet O_DIRECTORY
	O_DIRECTORY
	
# O_DSYNC from the os module
snippet O_DSYNC
	O_DSYNC
	
# O_EXCL from the os module
snippet O_EXCL
	O_EXCL
	
# O_EXLOCK from the os module
snippet O_EXLOCK
	O_EXLOCK
	
# O_NDELAY from the os module
snippet O_NDELAY
	O_NDELAY
	
# O_NOATIME from the os module
snippet O_NOATIME
	O_NOATIME
	
# O_NOCTTY from the os module
snippet O_NOCTTY
	O_NOCTTY
	
# O_NOFOLLOW from the os module
snippet O_NOFOLLOW
	O_NOFOLLOW
	
# O_NOINHERIT from the os module
snippet O_NOINHERIT
	O_NOINHERIT
	
# O_NONBLOCK from the os module
snippet O_NONBLOCK
	O_NONBLOCK
	
# O_PATH from the os module
snippet O_PATH
	O_PATH
	
# O_RANDOM from the os module
snippet O_RANDOM
	O_RANDOM
	
# O_RDONLY from the os module
snippet O_RDONLY
	O_RDONLY
	
# O_RDWR from the os module
snippet O_RDWR
	O_RDWR
	
# O_RSYNC from the os module
snippet O_RSYNC
	O_RSYNC
	
# O_SEQUENTIAL from the os module
snippet O_SEQUENTIAL
	O_SEQUENTIAL
	
# O_SHLOCK from the os module
snippet O_SHLOCK
	O_SHLOCK
	
# O_SHORT_LIVED from the os module
snippet O_SHORT_LIVED
	O_SHORT_LIVED
	
# O_SYNC from the os module
snippet O_SYNC
	O_SYNC
	
# O_TEMPORARY from the os module
snippet O_TEMPORARY
	O_TEMPORARY
	
# O_TEXT from the os module
snippet O_TEXT
	O_TEXT
	
# O_TMPFILE from the os module
snippet O_TMPFILE
	O_TMPFILE
	
# O_TRUNC from the os module
snippet O_TRUNC
	O_TRUNC
	
# O_WRONLY from the os module
snippet O_WRONLY
	O_WRONLY
	
# POSIX_FADV_DONTNEED from the os module
snippet POSIX_FADV_DONTNEED
	POSIX_FADV_DONTNEED
	
# POSIX_FADV_NOREUSE from the os module
snippet POSIX_FADV_NOREUSE
	POSIX_FADV_NOREUSE
	
# POSIX_FADV_NORMAL from the os module
snippet POSIX_FADV_NORMAL
	POSIX_FADV_NORMAL
	
# POSIX_FADV_RANDOM from the os module
snippet POSIX_FADV_RANDOM
	POSIX_FADV_RANDOM
	
# POSIX_FADV_SEQUENTIAL from the os module
snippet POSIX_FADV_SEQUENTIAL
	POSIX_FADV_SEQUENTIAL
	
# POSIX_FADV_WILLNEED from the os module
snippet POSIX_FADV_WILLNEED
	POSIX_FADV_WILLNEED
	
# PRIO_PGRP from the os module
snippet PRIO_PGRP
	PRIO_PGRP
	
# PRIO_PROCESS from the os module
snippet PRIO_PROCESS
	PRIO_PROCESS
	
# PRIO_USER from the os module
snippet PRIO_USER
	PRIO_USER
	
# P_ALL from the os module
snippet P_ALL
	P_ALL
	
# P_DETACH from the os module
snippet P_DETACH
	P_DETACH
	
# P_NOWAIT from the os module
snippet P_NOWAIT
	P_NOWAIT
	
# P_NOWAITO from the os module
snippet P_NOWAITO
	P_NOWAITO
	
# P_OVERLAY from the os module
snippet P_OVERLAY
	P_OVERLAY
	
# P_PGID from the os module
snippet P_PGID
	P_PGID
	
# P_PID from the os module
snippet P_PID
	P_PID
	
# P_WAIT from the os module
snippet P_WAIT
	P_WAIT
	
# RTLD_DEEPBIND from the os module
snippet RTLD_DEEPBIND
	RTLD_DEEPBIND
	
# RTLD_GLOBAL from the os module
snippet RTLD_GLOBAL
	RTLD_GLOBAL
	
# RTLD_LAZY from the os module
snippet RTLD_LAZY
	RTLD_LAZY
	
# RTLD_LOCAL from the os module
snippet RTLD_LOCAL
	RTLD_LOCAL
	
# RTLD_NODELETE from the os module
snippet RTLD_NODELETE
	RTLD_NODELETE
	
# RTLD_NOLOAD from the os module
snippet RTLD_NOLOAD
	RTLD_NOLOAD
	
# RTLD_NOW from the os module
snippet RTLD_NOW
	RTLD_NOW
	
# R_OK from the os module
snippet R_OK
	R_OK
	
# SCHED_BATCH from the os module
snippet SCHED_BATCH
	SCHED_BATCH
	
# SCHED_FIFO from the os module
snippet SCHED_FIFO
	SCHED_FIFO
	
# SCHED_IDLE from the os module
snippet SCHED_IDLE
	SCHED_IDLE
	
# SCHED_OTHER from the os module
snippet SCHED_OTHER
	SCHED_OTHER
	
# SCHED_RESET_ON_FORK from the os module
snippet SCHED_RESET_ON_FORK
	SCHED_RESET_ON_FORK
	
# SCHED_RR from the os module
snippet SCHED_RR
	SCHED_RR
	
# SCHED_SPORADIC from the os module
snippet SCHED_SPORADIC
	SCHED_SPORADIC
	
# SEEK_CUR from the os module
snippet SEEK_CUR
	SEEK_CUR
	
# SEEK_END from the os module
snippet SEEK_END
	SEEK_END
	
# SEEK_SET from the os module
snippet SEEK_SET
	SEEK_SET
	
# SF_MNOWAIT from the os module
snippet SF_MNOWAIT
	SF_MNOWAIT
	
# SF_NODISKIO from the os module
snippet SF_NODISKIO
	SF_NODISKIO
	
# SF_SYNC from the os module
snippet SF_SYNC
	SF_SYNC
	
# WCONTINUED from the os module
snippet WCONTINUED
	WCONTINUED
	
# WCOREDUMP from the os module
snippet WCOREDUMP
	WCOREDUMP(${1:status})
	
# WEXITED from the os module
snippet WEXITED
	WEXITED
	
# WEXITSTATUS from the os module
snippet WEXITSTATUS
	WEXITSTATUS(${1:status})
	
# WIFCONTINUED from the os module
snippet WIFCONTINUED
	WIFCONTINUED(${1:status})
	
# WIFEXITED from the os module
snippet WIFEXITED
	WIFEXITED(${1:status})
	
# WIFSIGNALED from the os module
snippet WIFSIGNALED
	WIFSIGNALED(${1:status})
	
# WIFSTOPPED from the os module
snippet WIFSTOPPED
	WIFSTOPPED(${1:status})
	
# WNOHANG from the os module
snippet WNOHANG
	WNOHANG
	
# WNOWAIT from the os module
snippet WNOWAIT
	WNOWAIT
	
# WSTOPPED from the os module
snippet WSTOPPED
	WSTOPPED
	
# WSTOPSIG from the os module
snippet WSTOPSIG
	WSTOPSIG(${1:status})
	
# WTERMSIG from the os module
snippet WTERMSIG
	WTERMSIG(${1:status})
	
# WUNTRACED from the os module
snippet WUNTRACED
	WUNTRACED
	
# W_OK from the os module
snippet W_OK
	W_OK
	
# XATTR_CREATE from the os module
snippet XATTR_CREATE
	XATTR_CREATE
	
# XATTR_REPLACE from the os module
snippet XATTR_REPLACE
	XATTR_REPLACE
	
# XATTR_SIZE_MAX from the os module
snippet XATTR_SIZE_MAX
	XATTR_SIZE_MAX
	
# X_OK from the os module
snippet X_OK
	X_OK
	
# _exit() from the os module
snippet _exit
	_exit(${1:n})
	
# abort() from the os module
snippet abort
	abort(${1:})
	
# access() from the os module
snippet access
	access(${1:path}, ${2:mode}, ${3:*}, ${4:dir_fd=None}, ${5:effective_ids=False}, ${6:follow_symlinks=True})
	
# altsep() from the os module
snippet altsep
	altsep()
	
# chdir() from the os module
snippet chdir
	chdir(${1:path})
	
# chflags() from the os module
snippet chflags
	chflags(${1:path}, ${2:flags}, ${3:*}, ${4:follow_symlinks=True})
	
# chmod() from the os module
snippet chmod
	chmod(${1:path}, ${2:mode}, ${3:*}, ${4:dir_fd=None}, ${5:follow_symlinks=True})
	
# chown() from the os module
snippet chown
	chown(${1:path}, ${2:uid}, ${3:gid}, ${4:*}, ${5:dir_fd=None}, ${6:follow_symlinks=True})
	
# chroot() from the os module
snippet chroot
	chroot(${1:path})
	
# close() from the os module
snippet close
	close(${1:fd})
	
# closerange() from the os module
snippet closerange
	closerange(${1:fd_low}, ${2:fd_high})
	
# confstr() from the os module
snippet confstr
	confstr(${1:name})
	
# confstr_names() from the os module
snippet confstr_names
	confstr_names()
	
# cpu_count() from the os module
snippet cpu_count
	cpu_count(${1:})
	
# ctermid() from the os module
snippet ctermid
	ctermid(${1:})
	
# curdir() from the os module
snippet curdir
	curdir()
	
# defpath() from the os module
snippet defpath
	defpath()
	
# device_encoding() from the os module
snippet device_encoding
	device_encoding(${1:fd})
	
# devnull() from the os module
snippet devnull
	devnull()
	
# dup2() from the os module
snippet dup2
	dup2(${1:fd}, ${2:fd2}, ${3:inheritable=True})
	
# dup() from the os module
snippet dup
	dup(${1:fd})
	
# environ() from the os module
snippet environ
	environ()
	
# environb() from the os module
snippet environb
	environb()
	
# error() from the os module
snippet error
	error()
	
# execl() from the os module
snippet execl
	execl(${1:path}, ${2:arg0}, ${3:arg1}, ${4:...})
	
# execle() from the os module
snippet execle
	execle(${1:path}, ${2:arg0}, ${3:arg1}, ${4:...}, ${5:env})
	
# execlp() from the os module
snippet execlp
	execlp(${1:file}, ${2:arg0}, ${3:arg1}, ${4:...})
	
# execlpe() from the os module
snippet execlpe
	execlpe(${1:file}, ${2:arg0}, ${3:arg1}, ${4:...}, ${5:env})
	
# execv() from the os module
snippet execv
	execv(${1:path}, ${2:args})
	
# execve() from the os module
snippet execve
	execve(${1:path}, ${2:args}, ${3:env})
	
# execvp() from the os module
snippet execvp
	execvp(${1:file}, ${2:args})
	
# execvpe() from the os module
snippet execvpe
	execvpe(${1:file}, ${2:args}, ${3:env})
	
# extsep() from the os module
snippet extsep
	extsep()
	
# fchdir() from the os module
snippet fchdir
	fchdir(${1:fd})
	
# fchmod() from the os module
snippet fchmod
	fchmod(${1:fd}, ${2:mode})
	
# fchown() from the os module
snippet fchown
	fchown(${1:fd}, ${2:uid}, ${3:gid})
	
# fdatasync() from the os module
snippet fdatasync
	fdatasync(${1:fd})
	
# fdopen() from the os module
snippet fdopen
	fdopen(${1:fd}, ${2:*args}, ${3:**kwargs})
	
# fork() from the os module
snippet fork
	fork(${1:})
	
# forkpty() from the os module
snippet forkpty
	forkpty(${1:})
	
# fpathconf() from the os module
snippet fpathconf
	fpathconf(${1:fd}, ${2:name})
	
# fsdecode() from the os module
snippet fsdecode
	fsdecode(${1:filename})
	
# fsencode() from the os module
snippet fsencode
	fsencode(${1:filename})
	
# fstat() from the os module
snippet fstat
	fstat(${1:fd})
	
# fstatvfs() from the os module
snippet fstatvfs
	fstatvfs(${1:fd})
	
# fsync() from the os module
snippet fsync
	fsync(${1:fd})
	
# ftruncate() from the os module
snippet ftruncate
	ftruncate(${1:fd}, ${2:length})
	
# fwalk() from the os module
snippet fwalk
	fwalk(${1:top='.'}, ${2:topdown=True}, ${3:onerror=None}, ${4:*}, ${5:follow_symlinks=False}, ${6:dir_fd=None})
	
# get_blocking() from the os module
snippet get_blocking
	get_blocking(${1:fd})
	
# get_exec_path() from the os module
snippet get_exec_path
	get_exec_path(${1:env=None})
	
# get_handle_inheritable() from the os module
snippet get_handle_inheritable
	get_handle_inheritable(${1:handle})
	
# get_inheritable() from the os module
snippet get_inheritable
	get_inheritable(${1:fd})
	
# get_terminal_size() from the os module
snippet get_terminal_size
	get_terminal_size(${1:fd=STDOUT_FILENO})
	
# getcwd() from the os module
snippet getcwd
	getcwd(${1:})
	
# getcwdb() from the os module
snippet getcwdb
	getcwdb(${1:})
	
# getegid() from the os module
snippet getegid
	getegid(${1:})
	
# getenv() from the os module
snippet getenv
	getenv(${1:key}, ${2:default=None})
	
# getenvb() from the os module
snippet getenvb
	getenvb(${1:key}, ${2:default=None})
	
# geteuid() from the os module
snippet geteuid
	geteuid(${1:})
	
# getgid() from the os module
snippet getgid
	getgid(${1:})
	
# getgrouplist() from the os module
snippet getgrouplist
	getgrouplist(${1:user}, ${2:group})
	
# getgroups() from the os module
snippet getgroups
	getgroups(${1:})
	
# getloadavg() from the os module
snippet getloadavg
	getloadavg(${1:})
	
# getlogin() from the os module
snippet getlogin
	getlogin(${1:})
	
# getpgid() from the os module
snippet getpgid
	getpgid(${1:pid})
	
# getpgrp() from the os module
snippet getpgrp
	getpgrp(${1:})
	
# getpid() from the os module
snippet getpid
	getpid(${1:})
	
# getppid() from the os module
snippet getppid
	getppid(${1:})
	
# getpriority() from the os module
snippet getpriority
	getpriority(${1:which}, ${2:who})
	
# getresgid() from the os module
snippet getresgid
	getresgid(${1:})
	
# getresuid() from the os module
snippet getresuid
	getresuid(${1:})
	
# getsid() from the os module
snippet getsid
	getsid(${1:pid})
	
# getuid() from the os module
snippet getuid
	getuid(${1:})
	
# getxattr() from the os module
snippet getxattr
	getxattr(${1:path}, ${2:attribute}, ${3:*}, ${4:follow_symlinks=True})
	
# initgroups() from the os module
snippet initgroups
	initgroups(${1:username}, ${2:gid})
	
# isatty() from the os module
snippet isatty
	isatty(${1:fd})
	
# kill() from the os module
snippet kill
	kill(${1:pid}, ${2:sig})
	
# killpg() from the os module
snippet killpg
	killpg(${1:pgid}, ${2:sig})
	
# lchflags() from the os module
snippet lchflags
	lchflags(${1:path}, ${2:flags})
	
# lchmod() from the os module
snippet lchmod
	lchmod(${1:path}, ${2:mode})
	
# lchown() from the os module
snippet lchown
	lchown(${1:path}, ${2:uid}, ${3:gid})
	
# linesep() from the os module
snippet linesep
	linesep()
	
# link() from the os module
snippet link
	link(${1:src}, ${2:dst}, ${3:*}, ${4:src_dir_fd=None}, ${5:dst_dir_fd=None}, ${6:follow_symlinks=True})
	
# listdir() from the os module
snippet listdir
	listdir(${1:path='.'})
	
# listxattr() from the os module
snippet listxattr
	listxattr(${1:path=None}, ${2:*}, ${3:follow_symlinks=True})
	
# lockf() from the os module
snippet lockf
	lockf(${1:fd}, ${2:cmd}, ${3:len})
	
# lseek() from the os module
snippet lseek
	lseek(${1:fd}, ${2:pos}, ${3:how})
	
# lstat() from the os module
snippet lstat
	lstat(${1:path}, ${2:*}, ${3:dir_fd=None})
	
# major() from the os module
snippet major
	major(${1:device})
	
# makedev() from the os module
snippet makedev
	makedev(${1:major}, ${2:minor})
	
# makedirs() from the os module
snippet makedirs
	makedirs(${1:name}, ${2:mode=0o777}, ${3:exist_ok=False})
	
# minor() from the os module
snippet minor
	minor(${1:device})
	
# mkdir() from the os module
snippet mkdir
	mkdir(${1:path}, ${2:mode=0o777}, ${3:*}, ${4:dir_fd=None})
	
# mkfifo() from the os module
snippet mkfifo
	mkfifo(${1:path}, ${2:mode=0o666}, ${3:*}, ${4:dir_fd=None})
	
# mknod() from the os module
snippet mknod
	mknod(${1:path}, ${2:mode=0o600}, ${3:device=0}, ${4:*}, ${5:dir_fd=None})
	
# name() from the os module
snippet name
	name()
	
# nice() from the os module
snippet nice
	nice(${1:increment})
	
# open() from the os module
snippet open
	open(${1:path}, ${2:flags}, ${3:mode=0o777}, ${4:*}, ${5:dir_fd=None})
	
# openpty() from the os module
snippet openpty
	openpty(${1:})
	
# pardir() from the os module
snippet pardir
	pardir()
	
# pathconf() from the os module
snippet pathconf
	pathconf(${1:path}, ${2:name})
	
# pathconf_names() from the os module
snippet pathconf_names
	pathconf_names()
	
# pathsep() from the os module
snippet pathsep
	pathsep()
	
# pipe2() from the os module
snippet pipe2
	pipe2(${1:flags})
	
# pipe() from the os module
snippet pipe
	pipe(${1:})
	
# plock() from the os module
snippet plock
	plock(${1:op})
	
# popen() from the os module
snippet popen
	popen(${1:cmd}, ${2:mode='r'}, ${3:buffering=-1})
	
# posix_fadvise() from the os module
snippet posix_fadvise
	posix_fadvise(${1:fd}, ${2:offset}, ${3:len}, ${4:advice})
	
# posix_fallocate() from the os module
snippet posix_fallocate
	posix_fallocate(${1:fd}, ${2:offset}, ${3:len})
	
# pread() from the os module
snippet pread
	pread(${1:fd}, ${2:buffersize}, ${3:offset})
	
# putenv() from the os module
snippet putenv
	putenv(${1:key}, ${2:value})
	
# pwrite() from the os module
snippet pwrite
	pwrite(${1:fd}, ${2:str}, ${3:offset})
	
# read() from the os module
snippet read
	read(${1:fd}, ${2:n})
	
# readlink() from the os module
snippet readlink
	readlink(${1:path}, ${2:*}, ${3:dir_fd=None})
	
# readv() from the os module
snippet readv
	readv(${1:fd}, ${2:buffers})
	
# remove() from the os module
snippet remove
	remove(${1:path}, ${2:*}, ${3:dir_fd=None})
	
# removedirs() from the os module
snippet removedirs
	removedirs(${1:name})
	
# removexattr() from the os module
snippet removexattr
	removexattr(${1:path}, ${2:attribute}, ${3:*}, ${4:follow_symlinks=True})
	
# rename() from the os module
snippet rename
	rename(${1:src}, ${2:dst}, ${3:*}, ${4:src_dir_fd=None}, ${5:dst_dir_fd=None})
	
# renames() from the os module
snippet renames
	renames(${1:old}, ${2:new})
	
# replace() from the os module
snippet replace
	replace(${1:src}, ${2:dst}, ${3:*}, ${4:src_dir_fd=None}, ${5:dst_dir_fd=None})
	
# rmdir() from the os module
snippet rmdir
	rmdir(${1:path}, ${2:*}, ${3:dir_fd=None})
	
# scandir() from the os module
snippet scandir
	scandir(${1:path='.'})
	
# sched_get_priority_max() from the os module
snippet sched_get_priority_max
	sched_get_priority_max(${1:policy})
	
# sched_get_priority_min() from the os module
snippet sched_get_priority_min
	sched_get_priority_min(${1:policy})
	
# sched_getaffinity() from the os module
snippet sched_getaffinity
	sched_getaffinity(${1:pid})
	
# sched_getparam() from the os module
snippet sched_getparam
	sched_getparam(${1:pid})
	
# sched_getscheduler() from the os module
snippet sched_getscheduler
	sched_getscheduler(${1:pid})
	
# sched_param() from the os module
snippet sched_param
	sched_param(${1:sched_priority})
	
# sched_rr_get_interval() from the os module
snippet sched_rr_get_interval
	sched_rr_get_interval(${1:pid})
	
# sched_setaffinity() from the os module
snippet sched_setaffinity
	sched_setaffinity(${1:pid}, ${2:mask})
	
# sched_setparam() from the os module
snippet sched_setparam
	sched_setparam(${1:pid}, ${2:param})
	
# sched_setscheduler() from the os module
snippet sched_setscheduler
	sched_setscheduler(${1:pid}, ${2:policy}, ${3:param})
	
# sched_yield() from the os module
snippet sched_yield
	sched_yield(${1:})
	
# sendfile() from the os module
snippet sendfile
	sendfile(${1:out}, ${2:in}, ${3:offset}, ${4:count})
	
# sep() from the os module
snippet sep
	sep()
	
# set_blocking() from the os module
snippet set_blocking
	set_blocking(${1:fd}, ${2:blocking})
	
# set_handle_inheritable() from the os module
snippet set_handle_inheritable
	set_handle_inheritable(${1:handle}, ${2:inheritable})
	
# set_inheritable() from the os module
snippet set_inheritable
	set_inheritable(${1:fd}, ${2:inheritable})
	
# setegid() from the os module
snippet setegid
	setegid(${1:egid})
	
# seteuid() from the os module
snippet seteuid
	seteuid(${1:euid})
	
# setgid() from the os module
snippet setgid
	setgid(${1:gid})
	
# setgroups() from the os module
snippet setgroups
	setgroups(${1:groups})
	
# setpgid() from the os module
snippet setpgid
	setpgid(${1:pid}, ${2:pgrp})
	
# setpgrp() from the os module
snippet setpgrp
	setpgrp(${1:})
	
# setpriority() from the os module
snippet setpriority
	setpriority(${1:which}, ${2:who}, ${3:priority})
	
# setregid() from the os module
snippet setregid
	setregid(${1:rgid}, ${2:egid})
	
# setresgid() from the os module
snippet setresgid
	setresgid(${1:rgid}, ${2:egid}, ${3:sgid})
	
# setresuid() from the os module
snippet setresuid
	setresuid(${1:ruid}, ${2:euid}, ${3:suid})
	
# setreuid() from the os module
snippet setreuid
	setreuid(${1:ruid}, ${2:euid})
	
# setsid() from the os module
snippet setsid
	setsid(${1:})
	
# setuid() from the os module
snippet setuid
	setuid(${1:uid})
	
# setxattr() from the os module
snippet setxattr
	setxattr(${1:path}, ${2:attribute}, ${3:value}, ${4:flags=0}, ${5:*}, ${6:follow_symlinks=True})
	
# spawnl() from the os module
snippet spawnl
	spawnl(${1:mode}, ${2:path}, ${3:...})
	
# spawnle() from the os module
snippet spawnle
	spawnle(${1:mode}, ${2:path}, ${3:...}, ${4:env})
	
# spawnlp() from the os module
snippet spawnlp
	spawnlp(${1:mode}, ${2:file}, ${3:...})
	
# spawnlpe() from the os module
snippet spawnlpe
	spawnlpe(${1:mode}, ${2:file}, ${3:...}, ${4:env})
	
# spawnv() from the os module
snippet spawnv
	spawnv(${1:mode}, ${2:path}, ${3:args})
	
# spawnve() from the os module
snippet spawnve
	spawnve(${1:mode}, ${2:path}, ${3:args}, ${4:env})
	
# spawnvp() from the os module
snippet spawnvp
	spawnvp(${1:mode}, ${2:file}, ${3:args})
	
# spawnvpe() from the os module
snippet spawnvpe
	spawnvpe(${1:mode}, ${2:file}, ${3:args}, ${4:env})
	
# startfile() from the os module
snippet startfile
	startfile(${1:path[}, ${2:operation]})
	
# stat() from the os module
snippet stat
	stat(${1:path}, ${2:*}, ${3:dir_fd=None}, ${4:follow_symlinks=True})
	
# stat_float_times() from the os module
snippet stat_float_times
	stat_float_times(${1:[newvalue]})
	
# stat_result() from the os module
snippet stat_result
	stat_result()
	
# statvfs() from the os module
snippet statvfs
	statvfs(${1:path})
	
# strerror() from the os module
snippet strerror
	strerror(${1:code})
	
# supports_bytes_environ() from the os module
snippet supports_bytes_environ
	supports_bytes_environ()
	
# supports_dir_fd() from the os module
snippet supports_dir_fd
	supports_dir_fd()
	
# supports_effective_ids() from the os module
snippet supports_effective_ids
	supports_effective_ids()
	
# supports_fd() from the os module
snippet supports_fd
	supports_fd()
	
# supports_follow_symlinks() from the os module
snippet supports_follow_symlinks
	supports_follow_symlinks()
	
# symlink() from the os module
snippet symlink
	symlink(${1:src}, ${2:dst}, ${3:target_is_directory=False}, ${4:*}, ${5:dir_fd=None})
	
# sync() from the os module
snippet sync
	sync(${1:})
	
# sysconf() from the os module
snippet sysconf
	sysconf(${1:name})
	
# sysconf_names() from the os module
snippet sysconf_names
	sysconf_names()
	
# system() from the os module
snippet system
	system(${1:command})
	
# tcgetpgrp() from the os module
snippet tcgetpgrp
	tcgetpgrp(${1:fd})
	
# tcsetpgrp() from the os module
snippet tcsetpgrp
	tcsetpgrp(${1:fd}, ${2:pg})
	
# terminal_size() from the os module
snippet terminal_size
	terminal_size()
	
# times() from the os module
snippet times
	times(${1:})
	
# truncate() from the os module
snippet truncate
	truncate(${1:path}, ${2:length})
	
# ttyname() from the os module
snippet ttyname
	ttyname(${1:fd})
	
# umask() from the os module
snippet umask
	umask(${1:mask})
	
# uname() from the os module
snippet uname
	uname(${1:})
	
# unlink() from the os module
snippet unlink
	unlink(${1:path}, ${2:*}, ${3:dir_fd=None})
	
# unsetenv() from the os module
snippet unsetenv
	unsetenv(${1:key})
	
# urandom() from the os module
snippet urandom
	urandom(${1:n})
	
# utime() from the os module
snippet utime
	utime(${1:path}, ${2:times=None}, ${3:*}, ${4:[ns}, ${5:]dir_fd=None}, ${6:follow_symlinks=True})
	
# wait3() from the os module
snippet wait3
	wait3(${1:options})
	
# wait4() from the os module
snippet wait4
	wait4(${1:pid}, ${2:options})
	
# wait() from the os module
snippet wait
	wait(${1:})
	
# waitid() from the os module
snippet waitid
	waitid(${1:idtype}, ${2:id}, ${3:options})
	
# waitpid() from the os module
snippet waitpid
	waitpid(${1:pid}, ${2:options})
	
# walk() from the os module
snippet walk
	walk(${1:top}, ${2:topdown=True}, ${3:onerror=None}, ${4:followlinks=False})
	
# write() from the os module
snippet write
	write(${1:fd}, ${2:str})
	
# writev() from the os module
snippet writev
	writev(${1:fd,})
	
# abspath() from the os.path module
snippet abspath
	abspath(${1:path})
	
# basename() from the os.path module
snippet basename
	basename(${1:path})
	
# commonpath() from the os.path module
snippet commonpath
	commonpath(${1:paths})
	
# commonprefix() from the os.path module
snippet commonprefix
	commonprefix(${1:list})
	
# dirname() from the os.path module
snippet dirname
	dirname(${1:path})
	
# exists() from the os.path module
snippet exists
	exists(${1:path})
	
# expanduser() from the os.path module
snippet expanduser
	expanduser(${1:path})
	
# expandvars() from the os.path module
snippet expandvars
	expandvars(${1:path})
	
# getatime() from the os.path module
snippet getatime
	getatime(${1:path})
	
# getctime() from the os.path module
snippet getctime
	getctime(${1:path})
	
# getmtime() from the os.path module
snippet getmtime
	getmtime(${1:path})
	
# getsize() from the os.path module
snippet getsize
	getsize(${1:path})
	
# isabs() from the os.path module
snippet isabs
	isabs(${1:path})
	
# isdir() from the os.path module
snippet isdir
	isdir(${1:path})
	
# isfile() from the os.path module
snippet isfile
	isfile(${1:path})
	
# islink() from the os.path module
snippet islink
	islink(${1:path})
	
# ismount() from the os.path module
snippet ismount
	ismount(${1:path})
	
# join() from the os.path module
snippet join
	join(${1:path}, ${2:*paths})
	
# lexists() from the os.path module
snippet lexists
	lexists(${1:path})
	
# normcase() from the os.path module
snippet normcase
	normcase(${1:path})
	
# normpath() from the os.path module
snippet normpath
	normpath(${1:path})
	
# realpath() from the os.path module
snippet realpath
	realpath(${1:path})
	
# relpath() from the os.path module
snippet relpath
	relpath(${1:path}, ${2:start=os.curdir})
	
# samefile() from the os.path module
snippet samefile
	samefile(${1:path1}, ${2:path2})
	
# sameopenfile() from the os.path module
snippet sameopenfile
	sameopenfile(${1:fp1}, ${2:fp2})
	
# samestat() from the os.path module
snippet samestat
	samestat(${1:stat1}, ${2:stat2})
	
# split() from the os.path module
snippet split
	split(${1:path})
	
# splitdrive() from the os.path module
snippet splitdrive
	splitdrive(${1:path})
	
# splitext() from the os.path module
snippet splitext
	splitext(${1:path})
	
# splitunc() from the os.path module
snippet splitunc
	splitunc(${1:path})
	
# supports_unicode_filenames() from the os.path module
snippet supports_unicode_filenames
	supports_unicode_filenames()
	
# OSSAudioError from the ossaudiodev module
snippet OSSAudioError
	OSSAudioError
	
# bufsize() from the ossaudiodev module
snippet bufsize
	bufsize(${1:})
	
# channels() from the ossaudiodev module
snippet channels
	channels(${1:nchannels})
	
# close() from the ossaudiodev module
snippet close
	close(${1:})
	
# closed() from the ossaudiodev module
snippet closed
	closed()
	
# controls() from the ossaudiodev module
snippet controls
	controls(${1:})
	
# fileno() from the ossaudiodev module
snippet fileno
	fileno(${1:})
	
# get() from the ossaudiodev module
snippet get
	get(${1:control})
	
# get_recsrc() from the ossaudiodev module
snippet get_recsrc
	get_recsrc(${1:})
	
# getfmts() from the ossaudiodev module
snippet getfmts
	getfmts(${1:})
	
# mode() from the ossaudiodev module
snippet mode
	mode()
	
# name() from the ossaudiodev module
snippet name
	name()
	
# nonblock() from the ossaudiodev module
snippet nonblock
	nonblock(${1:})
	
# obufcount() from the ossaudiodev module
snippet obufcount
	obufcount(${1:})
	
# obuffree() from the ossaudiodev module
snippet obuffree
	obuffree(${1:})
	
# open() from the ossaudiodev module
snippet open
	open(${1:mode})
	
# openmixer() from the ossaudiodev module
snippet openmixer
	openmixer(${1:[device]})
	
# post() from the ossaudiodev module
snippet post
	post(${1:})
	
# read() from the ossaudiodev module
snippet read
	read(${1:size})
	
# reccontrols() from the ossaudiodev module
snippet reccontrols
	reccontrols(${1:})
	
# reset() from the ossaudiodev module
snippet reset
	reset(${1:})
	
# set() from the ossaudiodev module
snippet set
	set(${1:control}, ${2:}, ${3:left}, ${4:right})
	
# set_recsrc() from the ossaudiodev module
snippet set_recsrc
	set_recsrc(${1:bitmask})
	
# setfmt() from the ossaudiodev module
snippet setfmt
	setfmt(${1:format})
	
# setparameters() from the ossaudiodev module
snippet setparameters
	setparameters(${1:format}, ${2:nchannels}, ${3:samplerate[}, ${4:strict=False]})
	
# speed() from the ossaudiodev module
snippet speed
	speed(${1:samplerate})
	
# stereocontrols() from the ossaudiodev module
snippet stereocontrols
	stereocontrols(${1:})
	
# sync() from the ossaudiodev module
snippet sync
	sync(${1:})
	
# write() from the ossaudiodev module
snippet write
	write(${1:data})
	
# writeall() from the ossaudiodev module
snippet writeall
	writeall(${1:data})
	
# ParserError from the parser module
snippet ParserError
	ParserError
	
# STType from the parser module
snippet STType
	STType
	
# compile() from the parser module
snippet compile
	compile(${1:filename=''})
	
# compilest() from the parser module
snippet compilest
	compilest(${1:st}, ${2:filename=''})
	
# expr() from the parser module
snippet expr
	expr(${1:source})
	
# isexpr() from the parser module
snippet isexpr
	isexpr(${1:})
	
# issuite() from the parser module
snippet issuite
	issuite(${1:})
	
# sequence2st() from the parser module
snippet sequence2st
	sequence2st(${1:sequence})
	
# st2list() from the parser module
snippet st2list
	st2list(${1:st}, ${2:line_info=False}, ${3:col_info=False})
	
# st2tuple() from the parser module
snippet st2tuple
	st2tuple(${1:st}, ${2:line_info=False}, ${3:col_info=False})
	
# suite() from the parser module
snippet suite
	suite(${1:source})
	
# tolist() from the parser module
snippet tolist
	tolist(${1:line_info=False}, ${2:col_info=False})
	
# totuple() from the parser module
snippet totuple
	totuple(${1:line_info=False}, ${2:col_info=False})
	
# tuple2st() from the parser module
snippet tuple2st
	tuple2st(${1:sequence})
	
# Path from the pathlib module
snippet Path
	Path(${1:*pathsegments})
	
# PosixPath from the pathlib module
snippet PosixPath
	PosixPath(${1:*pathsegments})
	
# PurePath from the pathlib module
snippet PurePath
	PurePath(${1:*pathsegments})
	
# PurePosixPath from the pathlib module
snippet PurePosixPath
	PurePosixPath(${1:*pathsegments})
	
# PureWindowsPath from the pathlib module
snippet PureWindowsPath
	PureWindowsPath(${1:*pathsegments})
	
# WindowsPath from the pathlib module
snippet WindowsPath
	WindowsPath(${1:*pathsegments})
	
# anchor() from the pathlib module
snippet anchor
	anchor()
	
# as_posix() from the pathlib module
snippet as_posix
	as_posix(${1:})
	
# as_uri() from the pathlib module
snippet as_uri
	as_uri(${1:})
	
# chmod() from the pathlib module
snippet chmod
	chmod(${1:mode})
	
# cwd() from the pathlib module
snippet cwd
	cwd(${1:})
	
# drive() from the pathlib module
snippet drive
	drive()
	
# exists() from the pathlib module
snippet exists
	exists(${1:})
	
# expanduser() from the pathlib module
snippet expanduser
	expanduser(${1:})
	
# glob() from the pathlib module
snippet glob
	glob(${1:pattern})
	
# group() from the pathlib module
snippet group
	group(${1:})
	
# home() from the pathlib module
snippet home
	home(${1:})
	
# is_absolute() from the pathlib module
snippet is_absolute
	is_absolute(${1:})
	
# is_block_device() from the pathlib module
snippet is_block_device
	is_block_device(${1:})
	
# is_char_device() from the pathlib module
snippet is_char_device
	is_char_device(${1:})
	
# is_dir() from the pathlib module
snippet is_dir
	is_dir(${1:})
	
# is_fifo() from the pathlib module
snippet is_fifo
	is_fifo(${1:})
	
# is_file() from the pathlib module
snippet is_file
	is_file(${1:})
	
# is_reserved() from the pathlib module
snippet is_reserved
	is_reserved(${1:})
	
# is_socket() from the pathlib module
snippet is_socket
	is_socket(${1:})
	
# is_symlink() from the pathlib module
snippet is_symlink
	is_symlink(${1:})
	
# iterdir() from the pathlib module
snippet iterdir
	iterdir(${1:})
	
# joinpath() from the pathlib module
snippet joinpath
	joinpath(${1:*other})
	
# lchmod() from the pathlib module
snippet lchmod
	lchmod(${1:mode})
	
# lstat() from the pathlib module
snippet lstat
	lstat(${1:})
	
# match() from the pathlib module
snippet match
	match(${1:pattern})
	
# mkdir() from the pathlib module
snippet mkdir
	mkdir(${1:mode=0o777}, ${2:parents=False}, ${3:exist_ok=False})
	
# name() from the pathlib module
snippet name
	name()
	
# open() from the pathlib module
snippet open
	open(${1:mode='r'}, ${2:buffering=-1}, ${3:encoding=None}, ${4:errors=None}, ${5:newline=None})
	
# owner() from the pathlib module
snippet owner
	owner(${1:})
	
# parent() from the pathlib module
snippet parent
	parent()
	
# parents() from the pathlib module
snippet parents
	parents()
	
# parts() from the pathlib module
snippet parts
	parts()
	
# path() from the pathlib module
snippet path
	path()
	
# read_bytes() from the pathlib module
snippet read_bytes
	read_bytes(${1:})
	
# read_text() from the pathlib module
snippet read_text
	read_text(${1:encoding=None}, ${2:errors=None})
	
# relative_to() from the pathlib module
snippet relative_to
	relative_to(${1:*other})
	
# rename() from the pathlib module
snippet rename
	rename(${1:target})
	
# replace() from the pathlib module
snippet replace
	replace(${1:target})
	
# resolve() from the pathlib module
snippet resolve
	resolve(${1:})
	
# rglob() from the pathlib module
snippet rglob
	rglob(${1:pattern})
	
# rmdir() from the pathlib module
snippet rmdir
	rmdir(${1:})
	
# root() from the pathlib module
snippet root
	root()
	
# samefile() from the pathlib module
snippet samefile
	samefile(${1:other_path})
	
# stat() from the pathlib module
snippet stat
	stat(${1:})
	
# stem() from the pathlib module
snippet stem
	stem()
	
# suffix() from the pathlib module
snippet suffix
	suffix()
	
# suffixes() from the pathlib module
snippet suffixes
	suffixes()
	
# symlink_to() from the pathlib module
snippet symlink_to
	symlink_to(${1:target}, ${2:target_is_directory=False})
	
# touch() from the pathlib module
snippet touch
	touch(${1:mode=0o777}, ${2:exist_ok=True})
	
# unlink() from the pathlib module
snippet unlink
	unlink(${1:})
	
# with_name() from the pathlib module
snippet with_name
	with_name(${1:name})
	
# with_suffix() from the pathlib module
snippet with_suffix
	with_suffix(${1:suffix})
	
# write_bytes() from the pathlib module
snippet write_bytes
	write_bytes(${1:data})
	
# write_text() from the pathlib module
snippet write_text
	write_text(${1:data,})
	
# Pdb from the pdb module
snippet Pdb
	Pdb(${1:completekey='tab'}, ${2:stdin=None}, ${3:stdout=None}, ${4:skip=None}, ${5:nosigint=False})
	
# pm() from the pdb module
snippet pm
	pm(${1:})
	
# post_mortem() from the pdb module
snippet post_mortem
	post_mortem(${1:traceback=None})
	
# run() from the pdb module
snippet run
	run(${1:statement}, ${2:globals=None}, ${3:locals=None})
	
# runcall() from the pdb module
snippet runcall
	runcall(${1:function}, ${2:*args}, ${3:**kwds})
	
# runeval() from the pdb module
snippet runeval
	runeval(${1:expression}, ${2:globals=None}, ${3:locals=None})
	
# set_trace() from the pdb module
snippet set_trace
	set_trace(${1:})
	
# DEFAULT_PROTOCOL from the pickle module
snippet DEFAULT_PROTOCOL
	DEFAULT_PROTOCOL
	
# HIGHEST_PROTOCOL from the pickle module
snippet HIGHEST_PROTOCOL
	HIGHEST_PROTOCOL
	
# PickleError from the pickle module
snippet PickleError
	PickleError
	
# Pickler from the pickle module
snippet Pickler
	Pickler(${1:file}, ${2:protocol=None}, ${3:*}, ${4:fix_imports=True})
	
# PicklingError from the pickle module
snippet PicklingError
	PicklingError
	
# Unpickler from the pickle module
snippet Unpickler
	Unpickler(${1:file}, ${2:*}, ${3:fix_imports=True}, ${4:encoding="ASCII"}, ${5:errors="strict"})
	
# UnpicklingError from the pickle module
snippet UnpicklingError
	UnpicklingError
	
# __getnewargs__() from the pickle module
snippet __getnewargs__
	__getnewargs__(${1:})
	
# __getnewargs_ex__() from the pickle module
snippet __getnewargs_ex__
	__getnewargs_ex__(${1:})
	
# __getstate__() from the pickle module
snippet __getstate__
	__getstate__(${1:})
	
# __reduce__() from the pickle module
snippet __reduce__
	__reduce__(${1:})
	
# __reduce_ex__() from the pickle module
snippet __reduce_ex__
	__reduce_ex__(${1:protocol})
	
# __setstate__() from the pickle module
snippet __setstate__
	__setstate__(${1:state})
	
# dump() from the pickle module
snippet dump
	dump(${1:obj}, ${2:file}, ${3:protocol=None}, ${4:*}, ${5:fix_imports=True})
	
# dumps() from the pickle module
snippet dumps
	dumps(${1:obj}, ${2:protocol=None}, ${3:*}, ${4:fix_imports=True})
	
# load() from the pickle module
snippet load
	load(${1:file}, ${2:*}, ${3:fix_imports=True}, ${4:encoding="ASCII"}, ${5:errors="strict"})
	
# loads() from the pickle module
snippet loads
	loads(${1:bytes_object,})
	
# dis() from the pickletools module
snippet dis
	dis(${1:pickle}, ${2:out=None}, ${3:memo=None}, ${4:indentlevel=4}, ${5:annotate=0})
	
# genops() from the pickletools module
snippet genops
	genops(${1:pickle})
	
# optimize() from the pickletools module
snippet optimize
	optimize(${1:picklestring})
	
# Template from the pipes module
snippet Template
	Template
	
# append() from the pipes module
snippet append
	append(${1:cmd}, ${2:kind})
	
# clone() from the pipes module
snippet clone
	clone(${1:})
	
# copy() from the pipes module
snippet copy
	copy(${1:infile}, ${2:outfile})
	
# debug() from the pipes module
snippet debug
	debug(${1:flag})
	
# open() from the pipes module
snippet open
	open(${1:file}, ${2:mode})
	
# prepend() from the pipes module
snippet prepend
	prepend(${1:cmd}, ${2:kind})
	
# reset() from the pipes module
snippet reset
	reset(${1:})
	
# ImpImporter from the pkgutil module
snippet ImpImporter
	ImpImporter(${1:dirname=None})
	
# ImpLoader from the pkgutil module
snippet ImpLoader
	ImpLoader(${1:fullname}, ${2:file}, ${3:filename}, ${4:etc})
	
# extend_path() from the pkgutil module
snippet extend_path
	extend_path(${1:path}, ${2:name})
	
# find_loader() from the pkgutil module
snippet find_loader
	find_loader(${1:fullname})
	
# get_data() from the pkgutil module
snippet get_data
	get_data(${1:package}, ${2:resource})
	
# get_importer() from the pkgutil module
snippet get_importer
	get_importer(${1:path_item})
	
# get_loader() from the pkgutil module
snippet get_loader
	get_loader(${1:module_or_name})
	
# iter_importers() from the pkgutil module
snippet iter_importers
	iter_importers(${1:fullname=''})
	
# iter_modules() from the pkgutil module
snippet iter_modules
	iter_modules(${1:path=None}, ${2:prefix=''})
	
# walk_packages() from the pkgutil module
snippet walk_packages
	walk_packages(${1:path=None,})
	
# architecture() from the platform module
snippet architecture
	architecture(${1:executable=sys.executable}, ${2:bits=''}, ${3:linkage=''})
	
# dist() from the platform module
snippet dist
	dist(${1:distname=''}, ${2:version=''}, ${3:id=''}, ${4:supported_dists=}, ${5:'SuSE'}, ${6:'debian'}, ${7:'redhat'}, ${8:'mandrake'}, ${9:...})
	
# java_ver() from the platform module
snippet java_ver
	java_ver(${1:release=''}, ${2:vendor=''}, ${3:vminfo=}, ${4:''}, ${4:''}, ${6:''})
	
# libc_ver() from the platform module
snippet libc_ver
	libc_ver(${1:executable=sys.executable}, ${2:lib=''}, ${3:version=''}, ${4:chunksize=2048})
	
# linux_distribution() from the platform module
snippet linux_distribution
	linux_distribution(${1:distname=''}, ${2:version=''}, ${3:id=''}, ${4:supported_dists=}, ${5:'SuSE'}, ${6:'debian'}, ${7:'redhat'}, ${8:'mandrake'}, ${9:...})
	
# mac_ver() from the platform module
snippet mac_ver
	mac_ver(${1:release=''}, ${2:versioninfo=}, ${3:''}, ${3:''}, ${5:''})
	
# machine() from the platform module
snippet machine
	machine(${1:})
	
# node() from the platform module
snippet node
	node(${1:})
	
# platform() from the platform module
snippet platform
	platform(${1:aliased=0}, ${2:terse=0})
	
# popen() from the platform module
snippet popen
	popen(${1:cmd}, ${2:mode='r'}, ${3:bufsize=-1})
	
# processor() from the platform module
snippet processor
	processor(${1:})
	
# python_branch() from the platform module
snippet python_branch
	python_branch(${1:})
	
# python_build() from the platform module
snippet python_build
	python_build(${1:})
	
# python_compiler() from the platform module
snippet python_compiler
	python_compiler(${1:})
	
# python_implementation() from the platform module
snippet python_implementation
	python_implementation(${1:})
	
# python_revision() from the platform module
snippet python_revision
	python_revision(${1:})
	
# python_version() from the platform module
snippet python_version
	python_version(${1:})
	
# python_version_tuple() from the platform module
snippet python_version_tuple
	python_version_tuple(${1:})
	
# release() from the platform module
snippet release
	release(${1:})
	
# system() from the platform module
snippet system
	system(${1:})
	
# system_alias() from the platform module
snippet system_alias
	system_alias(${1:system}, ${2:release}, ${3:version})
	
# uname() from the platform module
snippet uname
	uname(${1:})
	
# version() from the platform module
snippet version
	version(${1:})
	
# win32_ver() from the platform module
snippet win32_ver
	win32_ver(${1:release='',})
	
# Data from the plistlib module
snippet Data
	Data(${1:data})
	
# FMT_BINARY from the plistlib module
snippet FMT_BINARY
	FMT_BINARY
	
# FMT_XML from the plistlib module
snippet FMT_XML
	FMT_XML
	
# dump() from the plistlib module
snippet dump
	dump(${1:value}, ${2:fp}, ${3:*}, ${4:fmt=FMT_XML}, ${5:sort_keys=True}, ${6:skipkeys=False})
	
# dumps() from the plistlib module
snippet dumps
	dumps(${1:value}, ${2:*}, ${3:fmt=FMT_XML}, ${4:sort_keys=True}, ${5:skipkeys=False})
	
# load() from the plistlib module
snippet load
	load(${1:fp}, ${2:*}, ${3:fmt=None}, ${4:use_builtin_types=True}, ${5:dict_type=dict})
	
# loads() from the plistlib module
snippet loads
	loads(${1:data}, ${2:*}, ${3:fmt=None}, ${4:use_builtin_types=True}, ${5:dict_type=dict})
	
# readPlist() from the plistlib module
snippet readPlist
	readPlist(${1:pathOrFile})
	
# readPlistFromBytes() from the plistlib module
snippet readPlistFromBytes
	readPlistFromBytes(${1:data})
	
# writePlist() from the plistlib module
snippet writePlist
	writePlist(${1:rootObject}, ${2:pathOrFile})
	
# writePlistToBytes() from the plistlib module
snippet writePlistToBytes
	writePlistToBytes(${1:rootObject})
	
# POP3 from the poplib module
snippet POP3
	POP3(${1:host}, ${2:port=POP3_PORT[}, ${3:timeout]})
	
# POP3_SSL from the poplib module
snippet POP3_SSL
	POP3_SSL(${1:host}, ${2:port=POP3_SSL_PORT}, ${3:keyfile=None}, ${4:certfile=None}, ${5:timeout=None}, ${6:context=None})
	
# apop() from the poplib module
snippet apop
	apop(${1:user}, ${2:secret})
	
# capa() from the poplib module
snippet capa
	capa(${1:})
	
# dele() from the poplib module
snippet dele
	dele(${1:which})
	
# error_proto() from the poplib module
snippet error_proto
	error_proto()
	
# getwelcome() from the poplib module
snippet getwelcome
	getwelcome(${1:})
	
# list() from the poplib module
snippet list
	list(${1:[which]})
	
# noop() from the poplib module
snippet noop
	noop(${1:})
	
# pass_() from the poplib module
snippet pass_
	pass_(${1:password})
	
# quit() from the poplib module
snippet quit
	quit(${1:})
	
# retr() from the poplib module
snippet retr
	retr(${1:which})
	
# rpop() from the poplib module
snippet rpop
	rpop(${1:user})
	
# rset() from the poplib module
snippet rset
	rset(${1:})
	
# set_debuglevel() from the poplib module
snippet set_debuglevel
	set_debuglevel(${1:level})
	
# stat() from the poplib module
snippet stat
	stat(${1:})
	
# stls() from the poplib module
snippet stls
	stls(${1:context=None})
	
# top() from the poplib module
snippet top
	top(${1:which}, ${2:howmuch})
	
# uidl() from the poplib module
snippet uidl
	uidl(${1:which=None})
	
# user() from the poplib module
snippet user
	user(${1:username})
	
# utf8() from the poplib module
snippet utf8
	utf8(${1:})
	
# environ() from the posix module
snippet environ
	environ()
	
# PrettyPrinter from the pprint module
snippet PrettyPrinter
	PrettyPrinter(${1:indent=1}, ${2:width=80}, ${3:depth=None}, ${4:stream=None}, ${5:*}, ${6:compact=False})
	
# format() from the pprint module
snippet format
	format(${1:object}, ${2:context}, ${3:maxlevels}, ${4:level})
	
# isreadable() from the pprint module
snippet isreadable
	isreadable(${1:object})
	
# isrecursive() from the pprint module
snippet isrecursive
	isrecursive(${1:object})
	
# pformat() from the pprint module
snippet pformat
	pformat(${1:object})
	
# pprint() from the pprint module
snippet pprint
	pprint(${1:object})
	
# saferepr() from the pprint module
snippet saferepr
	saferepr(${1:object})
	
# Profile from the profile module
snippet Profile
	Profile(${1:timer=None}, ${2:timeunit=0.0}, ${3:subcalls=True}, ${4:builtins=True})
	
# Stats from the profile module
snippet Stats
	Stats(${1:*filenames or profile}, ${2:stream=sys.stdout})
	
# run() from the profile module
snippet run
	run(${1:command}, ${2:filename=None}, ${3:sort=-1})
	
# runctx() from the profile module
snippet runctx
	runctx(${1:command,})
	
# Profile from the pstats module
snippet Profile
	Profile(${1:timer=None}, ${2:timeunit=0.0}, ${3:subcalls=True}, ${4:builtins=True})
	
# Stats from the pstats module
snippet Stats
	Stats(${1:*filenames or profile}, ${2:stream=sys.stdout})
	
# run() from the pstats module
snippet run
	run(${1:command}, ${2:filename=None}, ${3:sort=-1})
	
# runctx() from the pstats module
snippet runctx
	runctx(${1:command,})
	
# fork() from the pty module
snippet fork
	fork(${1:})
	
# openpty() from the pty module
snippet openpty
	openpty(${1:})
	
# spawn() from the pty module
snippet spawn
	spawn(${1:argv[,})
	
# getpwall() from the pwd module
snippet getpwall
	getpwall(${1:})
	
# getpwnam() from the pwd module
snippet getpwnam
	getpwnam(${1:name})
	
# getpwuid() from the pwd module
snippet getpwuid
	getpwuid(${1:uid})
	
# PyCompileError from the py_compile module
snippet PyCompileError
	PyCompileError
	
# compile() from the py_compile module
snippet compile
	compile(${1:file}, ${2:cfile=None}, ${3:dfile=None}, ${4:doraise=False}, ${5:optimize=-1})
	
# main() from the py_compile module
snippet main
	main(${1:args=None})
	
# file() from the pyclbr module
snippet file
	file()
	
# lineno() from the pyclbr module
snippet lineno
	lineno()
	
# methods() from the pyclbr module
snippet methods
	methods()
	
# module() from the pyclbr module
snippet module
	module()
	
# name() from the pyclbr module
snippet name
	name()
	
# readmodule() from the pyclbr module
snippet readmodule
	readmodule(${1:module}, ${2:path=None})
	
# readmodule_ex() from the pyclbr module
snippet readmodule_ex
	readmodule_ex(${1:module}, ${2:path=None})
	
# super() from the pyclbr module
snippet super
	super()
	
# Empty from the queue module
snippet Empty
	Empty
	
# Full from the queue module
snippet Full
	Full
	
# LifoQueue from the queue module
snippet LifoQueue
	LifoQueue(${1:maxsize=0})
	
# PriorityQueue from the queue module
snippet PriorityQueue
	PriorityQueue(${1:maxsize=0})
	
# Queue from the queue module
snippet Queue
	Queue(${1:maxsize=0})
	
# empty() from the queue module
snippet empty
	empty(${1:})
	
# full() from the queue module
snippet full
	full(${1:})
	
# get() from the queue module
snippet get
	get(${1:block=True}, ${2:timeout=None})
	
# get_nowait() from the queue module
snippet get_nowait
	get_nowait(${1:})
	
# join() from the queue module
snippet join
	join(${1:})
	
# put() from the queue module
snippet put
	put(${1:item}, ${2:block=True}, ${3:timeout=None})
	
# put_nowait() from the queue module
snippet put_nowait
	put_nowait(${1:item})
	
# qsize() from the queue module
snippet qsize
	qsize(${1:})
	
# task_done() from the queue module
snippet task_done
	task_done(${1:})
	
# decode() from the quopri module
snippet decode
	decode(${1:input}, ${2:output}, ${3:header=False})
	
# decodestring() from the quopri module
snippet decodestring
	decodestring(${1:s}, ${2:header=False})
	
# encode() from the quopri module
snippet encode
	encode(${1:input}, ${2:output}, ${3:quotetabs}, ${4:header=False})
	
# encodestring() from the quopri module
snippet encodestring
	encodestring(${1:s,})
	
# SystemRandom from the random module
snippet SystemRandom
	SystemRandom(${1:[seed]})
	
# betavariate() from the random module
snippet betavariate
	betavariate(${1:alpha}, ${2:beta})
	
# choice() from the random module
snippet choice
	choice(${1:seq})
	
# expovariate() from the random module
snippet expovariate
	expovariate(${1:lambd})
	
# gammavariate() from the random module
snippet gammavariate
	gammavariate(${1:alpha}, ${2:beta})
	
# gauss() from the random module
snippet gauss
	gauss(${1:mu}, ${2:sigma})
	
# getrandbits() from the random module
snippet getrandbits
	getrandbits(${1:k})
	
# getstate() from the random module
snippet getstate
	getstate(${1:})
	
# lognormvariate() from the random module
snippet lognormvariate
	lognormvariate(${1:mu}, ${2:sigma})
	
# normalvariate() from the random module
snippet normalvariate
	normalvariate(${1:mu}, ${2:sigma})
	
# paretovariate() from the random module
snippet paretovariate
	paretovariate(${1:alpha})
	
# randint() from the random module
snippet randint
	randint(${1:a}, ${2:b})
	
# random() from the random module
snippet random
	random(${1:})
	
# randrange() from the random module
snippet randrange
	randrange(${1:start}, ${2:stop[}, ${3:step]})
	
# randrange() from the random module
snippet randrange
	randrange(${1:stop})
	
# sample() from the random module
snippet sample
	sample(${1:population}, ${2:k})
	
# seed() from the random module
snippet seed
	seed(${1:a=None}, ${2:version=2})
	
# setstate() from the random module
snippet setstate
	setstate(${1:state})
	
# shuffle() from the random module
snippet shuffle
	shuffle(${1:x[}, ${2:random]})
	
# triangular() from the random module
snippet triangular
	triangular(${1:low}, ${2:high}, ${3:mode})
	
# uniform() from the random module
snippet uniform
	uniform(${1:a}, ${2:b})
	
# vonmisesvariate() from the random module
snippet vonmisesvariate
	vonmisesvariate(${1:mu}, ${2:kappa})
	
# weibullvariate() from the random module
snippet weibullvariate
	weibullvariate(${1:alpha,})
	
# A from the re module
snippet A
	A
	
# ASCII from the re module
snippet ASCII
	ASCII
	
# DEBUG from the re module
snippet DEBUG
	DEBUG
	
# DOTALL from the re module
snippet DOTALL
	DOTALL
	
# I from the re module
snippet I
	I
	
# IGNORECASE from the re module
snippet IGNORECASE
	IGNORECASE
	
# L from the re module
snippet L
	L
	
# LOCALE from the re module
snippet LOCALE
	LOCALE
	
# M from the re module
snippet M
	M
	
# MULTILINE from the re module
snippet MULTILINE
	MULTILINE
	
# S from the re module
snippet S
	S
	
# VERBOSE from the re module
snippet VERBOSE
	VERBOSE
	
# X from the re module
snippet X
	X
	
# compile() from the re module
snippet compile
	compile(${1:pattern}, ${2:flags=0})
	
# end() from the re module
snippet end
	end(${1:[group]})
	
# endpos() from the re module
snippet endpos
	endpos()
	
# error() from the re module
snippet error
	error(${1:msg}, ${2:pattern=None}, ${3:pos=None})
	
# escape() from the re module
snippet escape
	escape(${1:string})
	
# expand() from the re module
snippet expand
	expand(${1:template})
	
# findall() from the re module
snippet findall
	findall(${1:string[}, ${2:pos[}, ${3:endpos]]})
	
# finditer() from the re module
snippet finditer
	finditer(${1:string[}, ${2:pos[}, ${3:endpos]]})
	
# flags() from the re module
snippet flags
	flags()
	
# fullmatch() from the re module
snippet fullmatch
	fullmatch(${1:string[}, ${2:pos[}, ${3:endpos]]})
	
# group() from the re module
snippet group
	group(${1:[group1}, ${2:...]})
	
# groupdict() from the re module
snippet groupdict
	groupdict(${1:default=None})
	
# groupindex() from the re module
snippet groupindex
	groupindex()
	
# groups() from the re module
snippet groups
	groups(${1:default=None})
	
# lastgroup() from the re module
snippet lastgroup
	lastgroup()
	
# lastindex() from the re module
snippet lastindex
	lastindex()
	
# match() from the re module
snippet match
	match(${1:string[}, ${2:pos[}, ${3:endpos]]})
	
# pattern() from the re module
snippet pattern
	pattern()
	
# pos() from the re module
snippet pos
	pos()
	
# purge() from the re module
snippet purge
	purge(${1:})
	
# re() from the re module
snippet re
	re()
	
# search() from the re module
snippet search
	search(${1:string[}, ${2:pos[}, ${3:endpos]]})
	
# span() from the re module
snippet span
	span(${1:[group]})
	
# split() from the re module
snippet split
	split(${1:string}, ${2:maxsplit=0})
	
# start() from the re module
snippet start
	start(${1:[group]})
	
# string() from the re module
snippet string
	string()
	
# sub() from the re module
snippet sub
	sub(${1:repl}, ${2:string}, ${3:count=0})
	
# subn() from the re module
snippet subn
	subn(${1:repl,})
	
# add_history() from the readline module
snippet add_history
	add_history(${1:line})
	
# append_history_file() from the readline module
snippet append_history_file
	append_history_file(${1:nelements[}, ${2:filename]})
	
# clear_history() from the readline module
snippet clear_history
	clear_history(${1:})
	
# get_begidx() from the readline module
snippet get_begidx
	get_begidx(${1:})
	
# get_completer() from the readline module
snippet get_completer
	get_completer(${1:})
	
# get_completer_delims() from the readline module
snippet get_completer_delims
	get_completer_delims(${1:})
	
# get_completion_type() from the readline module
snippet get_completion_type
	get_completion_type(${1:})
	
# get_current_history_length() from the readline module
snippet get_current_history_length
	get_current_history_length(${1:})
	
# get_endidx() from the readline module
snippet get_endidx
	get_endidx(${1:})
	
# get_history_item() from the readline module
snippet get_history_item
	get_history_item(${1:index})
	
# get_history_length() from the readline module
snippet get_history_length
	get_history_length(${1:})
	
# get_line_buffer() from the readline module
snippet get_line_buffer
	get_line_buffer(${1:})
	
# insert_text() from the readline module
snippet insert_text
	insert_text(${1:string})
	
# parse_and_bind() from the readline module
snippet parse_and_bind
	parse_and_bind(${1:string})
	
# read_history_file() from the readline module
snippet read_history_file
	read_history_file(${1:[filename]})
	
# read_init_file() from the readline module
snippet read_init_file
	read_init_file(${1:[filename]})
	
# redisplay() from the readline module
snippet redisplay
	redisplay(${1:})
	
# remove_history_item() from the readline module
snippet remove_history_item
	remove_history_item(${1:pos})
	
# replace_history_item() from the readline module
snippet replace_history_item
	replace_history_item(${1:pos}, ${2:line})
	
# set_completer() from the readline module
snippet set_completer
	set_completer(${1:[function]})
	
# set_completer_delims() from the readline module
snippet set_completer_delims
	set_completer_delims(${1:string})
	
# set_completion_display_matches_hook() from the readline module
snippet set_completion_display_matches_hook
	set_completion_display_matches_hook(${1:[function]})
	
# set_history_length() from the readline module
snippet set_history_length
	set_history_length(${1:length})
	
# set_pre_input_hook() from the readline module
snippet set_pre_input_hook
	set_pre_input_hook(${1:[function]})
	
# set_startup_hook() from the readline module
snippet set_startup_hook
	set_startup_hook(${1:[function]})
	
# write_history_file() from the readline module
snippet write_history_file
	write_history_file(${1:[filename]})
	
# Repr from the reprlib module
snippet Repr
	Repr
	
# aRepr() from the reprlib module
snippet aRepr
	aRepr()
	
# maxarray() from the reprlib module
snippet maxarray
	maxarray()
	
# maxdeque() from the reprlib module
snippet maxdeque
	maxdeque()
	
# maxdict() from the reprlib module
snippet maxdict
	maxdict()
	
# maxfrozenset() from the reprlib module
snippet maxfrozenset
	maxfrozenset()
	
# maxlevel() from the reprlib module
snippet maxlevel
	maxlevel()
	
# maxlist() from the reprlib module
snippet maxlist
	maxlist()
	
# maxlong() from the reprlib module
snippet maxlong
	maxlong()
	
# maxother() from the reprlib module
snippet maxother
	maxother()
	
# maxset() from the reprlib module
snippet maxset
	maxset()
	
# maxstring() from the reprlib module
snippet maxstring
	maxstring()
	
# maxtuple() from the reprlib module
snippet maxtuple
	maxtuple()
	
# recursive_repr() from the reprlib module
snippet recursive_repr
	recursive_repr(${1:fillvalue="..."})
	
# repr1() from the reprlib module
snippet repr1
	repr1(${1:obj}, ${2:level})
	
# repr() from the reprlib module
snippet repr
	repr(${1:obj})
	
# repr_TYPE() from the reprlib module
snippet repr_TYPE
	repr_TYPE(${1:obj,})
	
# RLIMIT_AS from the resource module
snippet RLIMIT_AS
	RLIMIT_AS
	
# RLIMIT_CORE from the resource module
snippet RLIMIT_CORE
	RLIMIT_CORE
	
# RLIMIT_CPU from the resource module
snippet RLIMIT_CPU
	RLIMIT_CPU
	
# RLIMIT_DATA from the resource module
snippet RLIMIT_DATA
	RLIMIT_DATA
	
# RLIMIT_FSIZE from the resource module
snippet RLIMIT_FSIZE
	RLIMIT_FSIZE
	
# RLIMIT_MEMLOCK from the resource module
snippet RLIMIT_MEMLOCK
	RLIMIT_MEMLOCK
	
# RLIMIT_MSGQUEUE from the resource module
snippet RLIMIT_MSGQUEUE
	RLIMIT_MSGQUEUE
	
# RLIMIT_NICE from the resource module
snippet RLIMIT_NICE
	RLIMIT_NICE
	
# RLIMIT_NOFILE from the resource module
snippet RLIMIT_NOFILE
	RLIMIT_NOFILE
	
# RLIMIT_NPROC from the resource module
snippet RLIMIT_NPROC
	RLIMIT_NPROC
	
# RLIMIT_NPTS from the resource module
snippet RLIMIT_NPTS
	RLIMIT_NPTS
	
# RLIMIT_OFILE from the resource module
snippet RLIMIT_OFILE
	RLIMIT_OFILE
	
# RLIMIT_RSS from the resource module
snippet RLIMIT_RSS
	RLIMIT_RSS
	
# RLIMIT_RTPRIO from the resource module
snippet RLIMIT_RTPRIO
	RLIMIT_RTPRIO
	
# RLIMIT_RTTIME from the resource module
snippet RLIMIT_RTTIME
	RLIMIT_RTTIME
	
# RLIMIT_SBSIZE from the resource module
snippet RLIMIT_SBSIZE
	RLIMIT_SBSIZE
	
# RLIMIT_SIGPENDING from the resource module
snippet RLIMIT_SIGPENDING
	RLIMIT_SIGPENDING
	
# RLIMIT_STACK from the resource module
snippet RLIMIT_STACK
	RLIMIT_STACK
	
# RLIMIT_SWAP from the resource module
snippet RLIMIT_SWAP
	RLIMIT_SWAP
	
# RLIMIT_VMEM from the resource module
snippet RLIMIT_VMEM
	RLIMIT_VMEM
	
# RLIM_INFINITY from the resource module
snippet RLIM_INFINITY
	RLIM_INFINITY
	
# RUSAGE_BOTH from the resource module
snippet RUSAGE_BOTH
	RUSAGE_BOTH
	
# RUSAGE_CHILDREN from the resource module
snippet RUSAGE_CHILDREN
	RUSAGE_CHILDREN
	
# RUSAGE_SELF from the resource module
snippet RUSAGE_SELF
	RUSAGE_SELF
	
# RUSAGE_THREAD from the resource module
snippet RUSAGE_THREAD
	RUSAGE_THREAD
	
# error() from the resource module
snippet error
	error()
	
# getpagesize() from the resource module
snippet getpagesize
	getpagesize(${1:})
	
# getrlimit() from the resource module
snippet getrlimit
	getrlimit(${1:resource})
	
# getrusage() from the resource module
snippet getrusage
	getrusage(${1:who})
	
# prlimit() from the resource module
snippet prlimit
	prlimit(${1:pid}, ${2:resource[}, ${3:limits]})
	
# setrlimit() from the resource module
snippet setrlimit
	setrlimit(${1:resource,})
	
# complete() from the rlcompleter module
snippet complete
	complete(${1:text,})
	
# run_module() from the runpy module
snippet run_module
	run_module(${1:mod_name}, ${2:init_globals=None}, ${3:run_name=None}, ${4:alter_sys=False})
	
# run_path() from the runpy module
snippet run_path
	run_path(${1:file_path,})
	
# cancel() from the sched module
snippet cancel
	cancel(${1:event})
	
# empty() from the sched module
snippet empty
	empty(${1:})
	
# enter() from the sched module
snippet enter
	enter(${1:delay}, ${2:priority}, ${3:action}, ${4:argument=}, ${5:})
	
# enterabs() from the sched module
snippet enterabs
	enterabs(${1:time}, ${2:priority}, ${3:action}, ${4:argument=}, ${5:})
	
# queue() from the sched module
snippet queue
	queue()
	
# run() from the sched module
snippet run
	run(${1:blocking=True})
	
# scheduler() from the sched module
snippet scheduler
	scheduler(${1:timefunc=time.monotonic,})
	
# PIPE_BUF from the select module
snippet PIPE_BUF
	PIPE_BUF
	
# close() from the select module
snippet close
	close(${1:})
	
# closed() from the select module
snippet closed
	closed()
	
# control() from the select module
snippet control
	control(${1:changelist}, ${2:max_events[}, ${3:timeout=None]})
	
# data() from the select module
snippet data
	data()
	
# devpoll() from the select module
snippet devpoll
	devpoll(${1:})
	
# epoll() from the select module
snippet epoll
	epoll(${1:sizehint=-1}, ${2:flags=0})
	
# error() from the select module
snippet error
	error()
	
# fflags() from the select module
snippet fflags
	fflags()
	
# fileno() from the select module
snippet fileno
	fileno(${1:})
	
# filter() from the select module
snippet filter
	filter()
	
# flags() from the select module
snippet flags
	flags()
	
# fromfd() from the select module
snippet fromfd
	fromfd(${1:fd})
	
# ident() from the select module
snippet ident
	ident()
	
# kevent() from the select module
snippet kevent
	kevent(${1:ident}, ${2:filter=KQ_FILTER_READ}, ${3:flags=KQ_EV_ADD}, ${4:fflags=0}, ${5:data=0}, ${6:udata=0})
	
# kqueue() from the select module
snippet kqueue
	kqueue(${1:})
	
# modify() from the select module
snippet modify
	modify(${1:fd[}, ${2:eventmask]})
	
# poll() from the select module
snippet poll
	poll(${1:})
	
# register() from the select module
snippet register
	register(${1:fd[}, ${2:eventmask]})
	
# select() from the select module
snippet select
	select(${1:rlist}, ${2:wlist}, ${3:xlist[}, ${4:timeout]})
	
# udata() from the select module
snippet udata
	udata()
	
# unregister() from the select module
snippet unregister
	unregister(${1:fd})
	
# BaseSelector from the selectors module
snippet BaseSelector
	BaseSelector
	
# DefaultSelector from the selectors module
snippet DefaultSelector
	DefaultSelector
	
# DevpollSelector from the selectors module
snippet DevpollSelector
	DevpollSelector
	
# EpollSelector from the selectors module
snippet EpollSelector
	EpollSelector
	
# KqueueSelector from the selectors module
snippet KqueueSelector
	KqueueSelector
	
# PollSelector from the selectors module
snippet PollSelector
	PollSelector
	
# SelectSelector from the selectors module
snippet SelectSelector
	SelectSelector
	
# SelectorKey from the selectors module
snippet SelectorKey
	SelectorKey
	
# BsdDbShelf from the shelve module
snippet BsdDbShelf
	BsdDbShelf(${1:dict}, ${2:protocol=None}, ${3:writeback=False}, ${4:keyencoding='utf-8'})
	
# DbfilenameShelf from the shelve module
snippet DbfilenameShelf
	DbfilenameShelf(${1:filename}, ${2:flag='c'}, ${3:protocol=None}, ${4:writeback=False})
	
# Shelf from the shelve module
snippet Shelf
	Shelf(${1:dict}, ${2:protocol=None}, ${3:writeback=False}, ${4:keyencoding='utf-8'})
	
# close() from the shelve module
snippet close
	close(${1:})
	
# open() from the shelve module
snippet open
	open(${1:filename}, ${2:flag='c'}, ${3:protocol=None}, ${4:writeback=False})
	
# sync() from the shelve module
snippet sync
	sync(${1:})
	
# commenters() from the shlex module
snippet commenters
	commenters()
	
# debug() from the shlex module
snippet debug
	debug()
	
# eof() from the shlex module
snippet eof
	eof()
	
# error_leader() from the shlex module
snippet error_leader
	error_leader(${1:infile=None}, ${2:lineno=None})
	
# escape() from the shlex module
snippet escape
	escape()
	
# escapedquotes() from the shlex module
snippet escapedquotes
	escapedquotes()
	
# get_token() from the shlex module
snippet get_token
	get_token(${1:})
	
# infile() from the shlex module
snippet infile
	infile()
	
# instream() from the shlex module
snippet instream
	instream()
	
# lineno() from the shlex module
snippet lineno
	lineno()
	
# pop_source() from the shlex module
snippet pop_source
	pop_source(${1:})
	
# push_source() from the shlex module
snippet push_source
	push_source(${1:newstream}, ${2:newfile=None})
	
# push_token() from the shlex module
snippet push_token
	push_token(${1:str})
	
# quote() from the shlex module
snippet quote
	quote(${1:s})
	
# quotes() from the shlex module
snippet quotes
	quotes()
	
# read_token() from the shlex module
snippet read_token
	read_token(${1:})
	
# shlex() from the shlex module
snippet shlex
	shlex(${1:instream=None}, ${2:infile=None}, ${3:posix=False})
	
# source() from the shlex module
snippet source
	source()
	
# sourcehook() from the shlex module
snippet sourcehook
	sourcehook(${1:filename})
	
# split() from the shlex module
snippet split
	split(${1:s}, ${2:comments=False}, ${3:posix=True})
	
# token() from the shlex module
snippet token
	token()
	
# whitespace() from the shlex module
snippet whitespace
	whitespace()
	
# whitespace_split() from the shlex module
snippet whitespace_split
	whitespace_split()
	
# wordchars() from the shlex module
snippet wordchars
	wordchars()
	
# Error from the shutil module
snippet Error
	Error
	
# SameFileError from the shutil module
snippet SameFileError
	SameFileError
	
# avoids_symlink_attacks() from the shutil module
snippet avoids_symlink_attacks
	avoids_symlink_attacks()
	
# chown() from the shutil module
snippet chown
	chown(${1:path}, ${2:user=None}, ${3:group=None})
	
# copy2() from the shutil module
snippet copy2
	copy2(${1:src}, ${2:dst}, ${3:*}, ${4:follow_symlinks=True})
	
# copy() from the shutil module
snippet copy
	copy(${1:src}, ${2:dst}, ${3:*}, ${4:follow_symlinks=True})
	
# copyfile() from the shutil module
snippet copyfile
	copyfile(${1:src}, ${2:dst}, ${3:*}, ${4:follow_symlinks=True})
	
# copyfileobj() from the shutil module
snippet copyfileobj
	copyfileobj(${1:fsrc}, ${2:fdst[}, ${3:length]})
	
# copymode() from the shutil module
snippet copymode
	copymode(${1:src}, ${2:dst}, ${3:*}, ${4:follow_symlinks=True})
	
# copystat() from the shutil module
snippet copystat
	copystat(${1:src}, ${2:dst}, ${3:*}, ${4:follow_symlinks=True})
	
# copytree() from the shutil module
snippet copytree
	copytree(${1:src}, ${2:dst}, ${3:symlinks=False}, ${4:ignore=None}, ${5:copy_function=copy2}, ${6:ignore_dangling_symlinks=False})
	
# disk_usage() from the shutil module
snippet disk_usage
	disk_usage(${1:path})
	
# get_archive_formats() from the shutil module
snippet get_archive_formats
	get_archive_formats(${1:})
	
# get_terminal_size() from the shutil module
snippet get_terminal_size
	get_terminal_size(${1:fallback=}, ${2:columns}, ${3:lines})
	
# get_unpack_formats() from the shutil module
snippet get_unpack_formats
	get_unpack_formats(${1:})
	
# ignore_patterns() from the shutil module
snippet ignore_patterns
	ignore_patterns(${1:*patterns})
	
# make_archive() from the shutil module
snippet make_archive
	make_archive(${1:base_name}, ${2:format[}, ${3:root_dir[}, ${4:base_dir[}, ${5:verbose[}, ${6:dry_run[}, ${7:owner[}, ${8:group[}, ${9:logger]]]]]]]})
	
# move() from the shutil module
snippet move
	move(${1:src}, ${2:dst}, ${3:copy_function=copy2})
	
# register_archive_format() from the shutil module
snippet register_archive_format
	register_archive_format(${1:name}, ${2:function[}, ${3:extra_args[}, ${4:description]]})
	
# register_unpack_format() from the shutil module
snippet register_unpack_format
	register_unpack_format(${1:name}, ${2:extensions}, ${3:function[}, ${4:extra_args[}, ${5:description]]})
	
# rmtree() from the shutil module
snippet rmtree
	rmtree(${1:path}, ${2:ignore_errors=False}, ${3:onerror=None})
	
# unpack_archive() from the shutil module
snippet unpack_archive
	unpack_archive(${1:filename[}, ${2:extract_dir[}, ${3:format]]})
	
# unregister_archive_format() from the shutil module
snippet unregister_archive_format
	unregister_archive_format(${1:name})
	
# unregister_unpack_format() from the shutil module
snippet unregister_unpack_format
	unregister_unpack_format(${1:name})
	
# which() from the shutil module
snippet which
	which(${1:cmd,})
	
# CTRL_BREAK_EVENT from the signal module
snippet CTRL_BREAK_EVENT
	CTRL_BREAK_EVENT
	
# CTRL_C_EVENT from the signal module
snippet CTRL_C_EVENT
	CTRL_C_EVENT
	
# ITIMER_PROF from the signal module
snippet ITIMER_PROF
	ITIMER_PROF
	
# ITIMER_REAL from the signal module
snippet ITIMER_REAL
	ITIMER_REAL
	
# ITIMER_VIRTUAL from the signal module
snippet ITIMER_VIRTUAL
	ITIMER_VIRTUAL
	
# ItimerError from the signal module
snippet ItimerError
	ItimerError
	
# NSIG from the signal module
snippet NSIG
	NSIG
	
# SIG_BLOCK from the signal module
snippet SIG_BLOCK
	SIG_BLOCK
	
# SIG_DFL from the signal module
snippet SIG_DFL
	SIG_DFL
	
# SIG_IGN from the signal module
snippet SIG_IGN
	SIG_IGN
	
# SIG_SETMASK from the signal module
snippet SIG_SETMASK
	SIG_SETMASK
	
# SIG_UNBLOCK from the signal module
snippet SIG_UNBLOCK
	SIG_UNBLOCK
	
# alarm() from the signal module
snippet alarm
	alarm(${1:time})
	
# getitimer() from the signal module
snippet getitimer
	getitimer(${1:which})
	
# getsignal() from the signal module
snippet getsignal
	getsignal(${1:signalnum})
	
# pause() from the signal module
snippet pause
	pause(${1:})
	
# pthread_kill() from the signal module
snippet pthread_kill
	pthread_kill(${1:thread_id}, ${2:signalnum})
	
# pthread_sigmask() from the signal module
snippet pthread_sigmask
	pthread_sigmask(${1:how}, ${2:mask})
	
# set_wakeup_fd() from the signal module
snippet set_wakeup_fd
	set_wakeup_fd(${1:fd})
	
# setitimer() from the signal module
snippet setitimer
	setitimer(${1:which}, ${2:seconds[}, ${3:interval]})
	
# siginterrupt() from the signal module
snippet siginterrupt
	siginterrupt(${1:signalnum}, ${2:flag})
	
# signal() from the signal module
snippet signal
	signal(${1:signalnum}, ${2:handler})
	
# sigpending() from the signal module
snippet sigpending
	sigpending(${1:})
	
# sigtimedwait() from the signal module
snippet sigtimedwait
	sigtimedwait(${1:sigset}, ${2:timeout})
	
# sigwait() from the signal module
snippet sigwait
	sigwait(${1:sigset})
	
# sigwaitinfo() from the signal module
snippet sigwaitinfo
	sigwaitinfo(${1:sigset})
	
# ENABLE_USER_SITE from the site module
snippet ENABLE_USER_SITE
	ENABLE_USER_SITE
	
# PREFIXES from the site module
snippet PREFIXES
	PREFIXES
	
# USER_BASE from the site module
snippet USER_BASE
	USER_BASE
	
# USER_SITE from the site module
snippet USER_SITE
	USER_SITE
	
# addsitedir() from the site module
snippet addsitedir
	addsitedir(${1:sitedir}, ${2:known_paths=None})
	
# getsitepackages() from the site module
snippet getsitepackages
	getsitepackages(${1:})
	
# getuserbase() from the site module
snippet getuserbase
	getuserbase(${1:})
	
# getusersitepackages() from the site module
snippet getusersitepackages
	getusersitepackages(${1:})
	
# main() from the site module
snippet main
	main(${1:})
	
# DebuggingServer from the smtpd module
snippet DebuggingServer
	DebuggingServer(${1:localaddr}, ${2:remoteaddr})
	
# MailmanProxy from the smtpd module
snippet MailmanProxy
	MailmanProxy(${1:localaddr}, ${2:remoteaddr})
	
# PureProxy from the smtpd module
snippet PureProxy
	PureProxy(${1:localaddr}, ${2:remoteaddr})
	
# SMTPChannel from the smtpd module
snippet SMTPChannel
	SMTPChannel(${1:server}, ${2:conn}, ${3:addr}, ${4:data_size_limit=33554432}, ${5:map=None}, ${6:enable_SMTPUTF8=False}, ${7:decode_data=True})
	
# SMTPServer from the smtpd module
snippet SMTPServer
	SMTPServer(${1:localaddr,})
	
# LMTP from the smtplib module
snippet LMTP
	LMTP(${1:host=''}, ${2:port=LMTP_PORT}, ${3:local_hostname=None}, ${4:source_address=None})
	
# SMTP from the smtplib module
snippet SMTP
	SMTP(${1:host=''}, ${2:port=0}, ${3:local_hostname=None}, ${4:[timeout}, ${5:]source_address=None})
	
# SMTPAuthenticationError from the smtplib module
snippet SMTPAuthenticationError
	SMTPAuthenticationError
	
# SMTPConnectError from the smtplib module
snippet SMTPConnectError
	SMTPConnectError
	
# SMTPDataError from the smtplib module
snippet SMTPDataError
	SMTPDataError
	
# SMTPException from the smtplib module
snippet SMTPException
	SMTPException
	
# SMTPHeloError from the smtplib module
snippet SMTPHeloError
	SMTPHeloError
	
# SMTPNotSupportedError from the smtplib module
snippet SMTPNotSupportedError
	SMTPNotSupportedError
	
# SMTPRecipientsRefused from the smtplib module
snippet SMTPRecipientsRefused
	SMTPRecipientsRefused
	
# SMTPResponseException from the smtplib module
snippet SMTPResponseException
	SMTPResponseException
	
# SMTPSenderRefused from the smtplib module
snippet SMTPSenderRefused
	SMTPSenderRefused
	
# SMTPServerDisconnected from the smtplib module
snippet SMTPServerDisconnected
	SMTPServerDisconnected
	
# SMTP_SSL from the smtplib module
snippet SMTP_SSL
	SMTP_SSL(${1:host=''}, ${2:port=0}, ${3:local_hostname=None}, ${4:keyfile=None}, ${5:certfile=None}, ${6:[timeout}, ${7:]context=None}, ${8:source_address=None})
	
# auth() from the smtplib module
snippet auth
	auth(${1:mechanism}, ${2:authobject}, ${3:*}, ${4:initial_response_ok=True})
	
# connect() from the smtplib module
snippet connect
	connect(${1:host='localhost'}, ${2:port=0})
	
# docmd() from the smtplib module
snippet docmd
	docmd(${1:cmd}, ${2:args=''})
	
# ehlo() from the smtplib module
snippet ehlo
	ehlo(${1:name=''})
	
# ehlo_or_helo_if_needed() from the smtplib module
snippet ehlo_or_helo_if_needed
	ehlo_or_helo_if_needed(${1:})
	
# has_extn() from the smtplib module
snippet has_extn
	has_extn(${1:name})
	
# helo() from the smtplib module
snippet helo
	helo(${1:name=''})
	
# login() from the smtplib module
snippet login
	login(${1:user}, ${2:password}, ${3:*}, ${4:initial_response_ok=True})
	
# quit() from the smtplib module
snippet quit
	quit(${1:})
	
# send_message() from the smtplib module
snippet send_message
	send_message(${1:msg}, ${2:from_addr=None}, ${3:to_addrs=None}, ${4:mail_options=[]}, ${5:rcpt_options=[]})
	
# sendmail() from the smtplib module
snippet sendmail
	sendmail(${1:from_addr}, ${2:to_addrs}, ${3:msg}, ${4:mail_options=[]}, ${5:rcpt_options=[]})
	
# set_debuglevel() from the smtplib module
snippet set_debuglevel
	set_debuglevel(${1:level})
	
# starttls() from the smtplib module
snippet starttls
	starttls(${1:keyfile=None}, ${2:certfile=None}, ${3:context=None})
	
# verify() from the smtplib module
snippet verify
	verify(${1:address})
	
# what() from the sndhdr module
snippet what
	what(${1:filename})
	
# whathdr() from the sndhdr module
snippet whathdr
	whathdr(${1:filename})
	
# AF_CAN from the socket module
snippet AF_CAN
	AF_CAN
	
# AF_INET6 from the socket module
snippet AF_INET6
	AF_INET6
	
# AF_INET from the socket module
snippet AF_INET
	AF_INET
	
# AF_LINK from the socket module
snippet AF_LINK
	AF_LINK
	
# AF_RDS from the socket module
snippet AF_RDS
	AF_RDS
	
# AF_UNIX from the socket module
snippet AF_UNIX
	AF_UNIX
	
# BDADDR_ANY from the socket module
snippet BDADDR_ANY
	BDADDR_ANY
	
# BDADDR_LOCAL from the socket module
snippet BDADDR_LOCAL
	BDADDR_LOCAL
	
# CAN_BCM from the socket module
snippet CAN_BCM
	CAN_BCM
	
# CAN_RAW_FD_FRAMES from the socket module
snippet CAN_RAW_FD_FRAMES
	CAN_RAW_FD_FRAMES
	
# CMSG_LEN from the socket module
snippet CMSG_LEN
	CMSG_LEN(${1:length})
	
# CMSG_SPACE from the socket module
snippet CMSG_SPACE
	CMSG_SPACE(${1:length})
	
# HCI_DATA_DIR from the socket module
snippet HCI_DATA_DIR
	HCI_DATA_DIR
	
# HCI_FILTER from the socket module
snippet HCI_FILTER
	HCI_FILTER
	
# HCI_TIME_STAMP from the socket module
snippet HCI_TIME_STAMP
	HCI_TIME_STAMP
	
# PF_CAN from the socket module
snippet PF_CAN
	PF_CAN
	
# PF_RDS from the socket module
snippet PF_RDS
	PF_RDS
	
# SOCK_CLOEXEC from the socket module
snippet SOCK_CLOEXEC
	SOCK_CLOEXEC
	
# SOCK_DGRAM from the socket module
snippet SOCK_DGRAM
	SOCK_DGRAM
	
# SOCK_NONBLOCK from the socket module
snippet SOCK_NONBLOCK
	SOCK_NONBLOCK
	
# SOCK_RAW from the socket module
snippet SOCK_RAW
	SOCK_RAW
	
# SOCK_RDM from the socket module
snippet SOCK_RDM
	SOCK_RDM
	
# SOCK_SEQPACKET from the socket module
snippet SOCK_SEQPACKET
	SOCK_SEQPACKET
	
# SOCK_STREAM from the socket module
snippet SOCK_STREAM
	SOCK_STREAM
	
# SOL_RDS from the socket module
snippet SOL_RDS
	SOL_RDS
	
# SOMAXCONN from the socket module
snippet SOMAXCONN
	SOMAXCONN
	
# SocketType from the socket module
snippet SocketType
	SocketType
	
# accept() from the socket module
snippet accept
	accept(${1:})
	
# bind() from the socket module
snippet bind
	bind(${1:address})
	
# close() from the socket module
snippet close
	close(${1:})
	
# connect() from the socket module
snippet connect
	connect(${1:address})
	
# connect_ex() from the socket module
snippet connect_ex
	connect_ex(${1:address})
	
# create_connection() from the socket module
snippet create_connection
	create_connection(${1:address[}, ${2:timeout[}, ${3:source_address]]})
	
# detach() from the socket module
snippet detach
	detach(${1:})
	
# dup() from the socket module
snippet dup
	dup(${1:})
	
# error() from the socket module
snippet error
	error()
	
# family() from the socket module
snippet family
	family()
	
# fileno() from the socket module
snippet fileno
	fileno(${1:})
	
# fromfd() from the socket module
snippet fromfd
	fromfd(${1:fd}, ${2:family}, ${3:type}, ${4:proto=0})
	
# fromshare() from the socket module
snippet fromshare
	fromshare(${1:data})
	
# gaierror() from the socket module
snippet gaierror
	gaierror()
	
# get_inheritable() from the socket module
snippet get_inheritable
	get_inheritable(${1:})
	
# getaddrinfo() from the socket module
snippet getaddrinfo
	getaddrinfo(${1:host}, ${2:port}, ${3:family=0}, ${4:type=0}, ${5:proto=0}, ${6:flags=0})
	
# getdefaulttimeout() from the socket module
snippet getdefaulttimeout
	getdefaulttimeout(${1:})
	
# getfqdn() from the socket module
snippet getfqdn
	getfqdn(${1:[name]})
	
# gethostbyaddr() from the socket module
snippet gethostbyaddr
	gethostbyaddr(${1:ip_address})
	
# gethostbyname() from the socket module
snippet gethostbyname
	gethostbyname(${1:hostname})
	
# gethostbyname_ex() from the socket module
snippet gethostbyname_ex
	gethostbyname_ex(${1:hostname})
	
# gethostname() from the socket module
snippet gethostname
	gethostname(${1:})
	
# getnameinfo() from the socket module
snippet getnameinfo
	getnameinfo(${1:sockaddr}, ${2:flags})
	
# getpeername() from the socket module
snippet getpeername
	getpeername(${1:})
	
# getprotobyname() from the socket module
snippet getprotobyname
	getprotobyname(${1:protocolname})
	
# getservbyname() from the socket module
snippet getservbyname
	getservbyname(${1:servicename[}, ${2:protocolname]})
	
# getservbyport() from the socket module
snippet getservbyport
	getservbyport(${1:port[}, ${2:protocolname]})
	
# getsockname() from the socket module
snippet getsockname
	getsockname(${1:})
	
# getsockopt() from the socket module
snippet getsockopt
	getsockopt(${1:level}, ${2:optname[}, ${3:buflen]})
	
# gettimeout() from the socket module
snippet gettimeout
	gettimeout(${1:})
	
# has_ipv6() from the socket module
snippet has_ipv6
	has_ipv6()
	
# herror() from the socket module
snippet herror
	herror()
	
# htonl() from the socket module
snippet htonl
	htonl(${1:x})
	
# htons() from the socket module
snippet htons
	htons(${1:x})
	
# if_indextoname() from the socket module
snippet if_indextoname
	if_indextoname(${1:if_index})
	
# if_nameindex() from the socket module
snippet if_nameindex
	if_nameindex(${1:})
	
# if_nametoindex() from the socket module
snippet if_nametoindex
	if_nametoindex(${1:if_name})
	
# inet_aton() from the socket module
snippet inet_aton
	inet_aton(${1:ip_string})
	
# inet_ntoa() from the socket module
snippet inet_ntoa
	inet_ntoa(${1:packed_ip})
	
# inet_ntop() from the socket module
snippet inet_ntop
	inet_ntop(${1:address_family}, ${2:packed_ip})
	
# inet_pton() from the socket module
snippet inet_pton
	inet_pton(${1:address_family}, ${2:ip_string})
	
# ioctl() from the socket module
snippet ioctl
	ioctl(${1:control}, ${2:option})
	
# listen() from the socket module
snippet listen
	listen(${1:[backlog]})
	
# makefile() from the socket module
snippet makefile
	makefile(${1:mode='r'}, ${2:buffering=None}, ${3:*}, ${4:encoding=None}, ${5:errors=None}, ${6:newline=None})
	
# ntohl() from the socket module
snippet ntohl
	ntohl(${1:x})
	
# ntohs() from the socket module
snippet ntohs
	ntohs(${1:x})
	
# proto() from the socket module
snippet proto
	proto()
	
# recv() from the socket module
snippet recv
	recv(${1:bufsize[}, ${2:flags]})
	
# recv_into() from the socket module
snippet recv_into
	recv_into(${1:buffer[}, ${2:nbytes[}, ${3:flags]]})
	
# recvfrom() from the socket module
snippet recvfrom
	recvfrom(${1:bufsize[}, ${2:flags]})
	
# recvfrom_into() from the socket module
snippet recvfrom_into
	recvfrom_into(${1:buffer[}, ${2:nbytes[}, ${3:flags]]})
	
# recvmsg() from the socket module
snippet recvmsg
	recvmsg(${1:bufsize[}, ${2:ancbufsize[}, ${3:flags]]})
	
# recvmsg_into() from the socket module
snippet recvmsg_into
	recvmsg_into(${1:buffers[}, ${2:ancbufsize[}, ${3:flags]]})
	
# send() from the socket module
snippet send
	send(${1:bytes[}, ${2:flags]})
	
# sendall() from the socket module
snippet sendall
	sendall(${1:bytes[}, ${2:flags]})
	
# sendfile() from the socket module
snippet sendfile
	sendfile(${1:file}, ${2:offset=0}, ${3:count=None})
	
# sendmsg() from the socket module
snippet sendmsg
	sendmsg(${1:buffers[}, ${2:ancdata[}, ${3:flags[}, ${4:address]]]})
	
# sendto() from the socket module
snippet sendto
	sendto(${1:bytes}, ${2:flags}, ${3:address})
	
# set_inheritable() from the socket module
snippet set_inheritable
	set_inheritable(${1:inheritable})
	
# setblocking() from the socket module
snippet setblocking
	setblocking(${1:flag})
	
# setdefaulttimeout() from the socket module
snippet setdefaulttimeout
	setdefaulttimeout(${1:timeout})
	
# sethostname() from the socket module
snippet sethostname
	sethostname(${1:name})
	
# setsockopt() from the socket module
snippet setsockopt
	setsockopt(${1:level}, ${2:optname}, ${3:value})
	
# settimeout() from the socket module
snippet settimeout
	settimeout(${1:value})
	
# share() from the socket module
snippet share
	share(${1:process_id})
	
# shutdown() from the socket module
snippet shutdown
	shutdown(${1:how})
	
# socket() from the socket module
snippet socket
	socket(${1:family=AF_INET}, ${2:type=SOCK_STREAM}, ${3:proto=0}, ${4:fileno=None})
	
# socketpair() from the socket module
snippet socketpair
	socketpair(${1:[family[}, ${2:type[}, ${3:proto]]]})
	
# timeout() from the socket module
snippet timeout
	timeout()
	
# type() from the socket module
snippet type
	type()
	
# BaseRequestHandler from the socketserver module
snippet BaseRequestHandler
	BaseRequestHandler
	
# BaseServer from the socketserver module
snippet BaseServer
	BaseServer(${1:server_address}, ${2:RequestHandlerClass})
	
# DatagramRequestHandler from the socketserver module
snippet DatagramRequestHandler
	DatagramRequestHandler
	
# ForkingMixIn from the socketserver module
snippet ForkingMixIn
	ForkingMixIn
	
# ForkingTCPServer from the socketserver module
snippet ForkingTCPServer
	ForkingTCPServer
	
# ForkingUDPServer from the socketserver module
snippet ForkingUDPServer
	ForkingUDPServer
	
# StreamRequestHandler from the socketserver module
snippet StreamRequestHandler
	StreamRequestHandler
	
# TCPServer from the socketserver module
snippet TCPServer
	TCPServer(${1:server_address}, ${2:RequestHandlerClass}, ${3:bind_and_activate=True})
	
# ThreadingMixIn from the socketserver module
snippet ThreadingMixIn
	ThreadingMixIn
	
# ThreadingTCPServer from the socketserver module
snippet ThreadingTCPServer
	ThreadingTCPServer
	
# ThreadingUDPServer from the socketserver module
snippet ThreadingUDPServer
	ThreadingUDPServer
	
# UDPServer from the socketserver module
snippet UDPServer
	UDPServer(${1:server_address}, ${2:RequestHandlerClass}, ${3:bind_and_activate=True})
	
# UnixDatagramServer from the socketserver module
snippet UnixDatagramServer
	UnixDatagramServer(${1:server_address}, ${2:RequestHandlerClass}, ${3:bind_and_activate=True})
	
# UnixStreamServer from the socketserver module
snippet UnixStreamServer
	UnixStreamServer(${1:server_address,})
	
# getspall() from the spwd module
snippet getspall
	getspall(${1:})
	
# getspnam() from the spwd module
snippet getspnam
	getspnam(${1:name})
	
# Connection from the sqlite3 module
snippet Connection
	Connection
	
# Cursor from the sqlite3 module
snippet Cursor
	Cursor
	
# PARSE_COLNAMES from the sqlite3 module
snippet PARSE_COLNAMES
	PARSE_COLNAMES
	
# PARSE_DECLTYPES from the sqlite3 module
snippet PARSE_DECLTYPES
	PARSE_DECLTYPES
	
# Row from the sqlite3 module
snippet Row
	Row
	
# complete_statement() from the sqlite3 module
snippet complete_statement
	complete_statement(${1:sql})
	
# connect() from the sqlite3 module
snippet connect
	connect(${1:database[}, ${2:timeout}, ${3:detect_types}, ${4:isolation_level}, ${5:check_same_thread}, ${6:factory}, ${7:cached_statements}, ${8:uri]})
	
# enable_callback_tracebacks() from the sqlite3 module
snippet enable_callback_tracebacks
	enable_callback_tracebacks(${1:flag})
	
# register_adapter() from the sqlite3 module
snippet register_adapter
	register_adapter(${1:type}, ${2:callable})
	
# register_converter() from the sqlite3 module
snippet register_converter
	register_converter(${1:typename}, ${2:callable})
	
# sqlite_version() from the sqlite3 module
snippet sqlite_version
	sqlite_version()
	
# sqlite_version_info() from the sqlite3 module
snippet sqlite_version_info
	sqlite_version_info()
	
# version() from the sqlite3 module
snippet version
	version()
	
# version_info() from the sqlite3 module
snippet version_info
	version_info()
	
# ALERT_DESCRIPTION_HANDSHAKE_FAILURE from the ssl module
snippet ALERT_DESCRIPTION_HANDSHAKE_FAILURE
	ALERT_DESCRIPTION_HANDSHAKE_FAILURE
	
# ALERT_DESCRIPTION_INTERNAL_ERROR from the ssl module
snippet ALERT_DESCRIPTION_INTERNAL_ERROR
	ALERT_DESCRIPTION_INTERNAL_ERROR
	
# CERT_NONE from the ssl module
snippet CERT_NONE
	CERT_NONE
	
# CERT_OPTIONAL from the ssl module
snippet CERT_OPTIONAL
	CERT_OPTIONAL
	
# CERT_REQUIRED from the ssl module
snippet CERT_REQUIRED
	CERT_REQUIRED
	
# CHANNEL_BINDING_TYPES from the ssl module
snippet CHANNEL_BINDING_TYPES
	CHANNEL_BINDING_TYPES
	
# CLIENT_AUTH from the ssl module
snippet CLIENT_AUTH
	CLIENT_AUTH
	
# CertificateError from the ssl module
snippet CertificateError
	CertificateError
	
# DER_cert_to_PEM_cert from the ssl module
snippet DER_cert_to_PEM_cert
	DER_cert_to_PEM_cert(${1:DER_cert_bytes})
	
# HAS_ALPN from the ssl module
snippet HAS_ALPN
	HAS_ALPN
	
# HAS_ECDH from the ssl module
snippet HAS_ECDH
	HAS_ECDH
	
# HAS_NPN from the ssl module
snippet HAS_NPN
	HAS_NPN
	
# HAS_SNI from the ssl module
snippet HAS_SNI
	HAS_SNI
	
# MemoryBIO from the ssl module
snippet MemoryBIO
	MemoryBIO
	
# OPENSSL_VERSION from the ssl module
snippet OPENSSL_VERSION
	OPENSSL_VERSION
	
# OPENSSL_VERSION_INFO from the ssl module
snippet OPENSSL_VERSION_INFO
	OPENSSL_VERSION_INFO
	
# OPENSSL_VERSION_NUMBER from the ssl module
snippet OPENSSL_VERSION_NUMBER
	OPENSSL_VERSION_NUMBER
	
# OP_ALL from the ssl module
snippet OP_ALL
	OP_ALL
	
# OP_CIPHER_SERVER_PREFERENCE from the ssl module
snippet OP_CIPHER_SERVER_PREFERENCE
	OP_CIPHER_SERVER_PREFERENCE
	
# OP_NO_COMPRESSION from the ssl module
snippet OP_NO_COMPRESSION
	OP_NO_COMPRESSION
	
# OP_NO_SSLv2 from the ssl module
snippet OP_NO_SSLv2
	OP_NO_SSLv2
	
# OP_NO_SSLv3 from the ssl module
snippet OP_NO_SSLv3
	OP_NO_SSLv3
	
# OP_NO_TLSv1 from the ssl module
snippet OP_NO_TLSv1
	OP_NO_TLSv1
	
# OP_NO_TLSv1_1 from the ssl module
snippet OP_NO_TLSv1_1
	OP_NO_TLSv1_1
	
# OP_NO_TLSv1_2 from the ssl module
snippet OP_NO_TLSv1_2
	OP_NO_TLSv1_2
	
# OP_SINGLE_DH_USE from the ssl module
snippet OP_SINGLE_DH_USE
	OP_SINGLE_DH_USE
	
# OP_SINGLE_ECDH_USE from the ssl module
snippet OP_SINGLE_ECDH_USE
	OP_SINGLE_ECDH_USE
	
# PEM_cert_to_DER_cert from the ssl module
snippet PEM_cert_to_DER_cert
	PEM_cert_to_DER_cert(${1:PEM_cert_string})
	
# PROTOCOL_SSLv23 from the ssl module
snippet PROTOCOL_SSLv23
	PROTOCOL_SSLv23
	
# PROTOCOL_SSLv2 from the ssl module
snippet PROTOCOL_SSLv2
	PROTOCOL_SSLv2
	
# PROTOCOL_SSLv3 from the ssl module
snippet PROTOCOL_SSLv3
	PROTOCOL_SSLv3
	
# PROTOCOL_TLSv1 from the ssl module
snippet PROTOCOL_TLSv1
	PROTOCOL_TLSv1
	
# PROTOCOL_TLSv1_1 from the ssl module
snippet PROTOCOL_TLSv1_1
	PROTOCOL_TLSv1_1
	
# PROTOCOL_TLSv1_2 from the ssl module
snippet PROTOCOL_TLSv1_2
	PROTOCOL_TLSv1_2
	
# RAND_add from the ssl module
snippet RAND_add
	RAND_add(${1:bytes}, ${2:entropy})
	
# RAND_bytes from the ssl module
snippet RAND_bytes
	RAND_bytes(${1:num})
	
# RAND_egd from the ssl module
snippet RAND_egd
	RAND_egd(${1:path})
	
# RAND_pseudo_bytes from the ssl module
snippet RAND_pseudo_bytes
	RAND_pseudo_bytes(${1:num})
	
# RAND_status from the ssl module
snippet RAND_status
	RAND_status(${1:})
	
# SERVER_AUTH from the ssl module
snippet SERVER_AUTH
	SERVER_AUTH
	
# SSLContext from the ssl module
snippet SSLContext
	SSLContext(${1:protocol})
	
# SSLEOFError from the ssl module
snippet SSLEOFError
	SSLEOFError
	
# SSLError from the ssl module
snippet SSLError
	SSLError
	
# SSLObject from the ssl module
snippet SSLObject
	SSLObject
	
# SSLSocket from the ssl module
snippet SSLSocket
	SSLSocket(${1:socket.socket})
	
# SSLSyscallError from the ssl module
snippet SSLSyscallError
	SSLSyscallError
	
# SSLWantReadError from the ssl module
snippet SSLWantReadError
	SSLWantReadError
	
# SSLWantWriteError from the ssl module
snippet SSLWantWriteError
	SSLWantWriteError
	
# SSLZeroReturnError from the ssl module
snippet SSLZeroReturnError
	SSLZeroReturnError
	
# VERIFY_CRL_CHECK_CHAIN from the ssl module
snippet VERIFY_CRL_CHECK_CHAIN
	VERIFY_CRL_CHECK_CHAIN
	
# VERIFY_CRL_CHECK_LEAF from the ssl module
snippet VERIFY_CRL_CHECK_LEAF
	VERIFY_CRL_CHECK_LEAF
	
# VERIFY_DEFAULT from the ssl module
snippet VERIFY_DEFAULT
	VERIFY_DEFAULT
	
# VERIFY_X509_STRICT from the ssl module
snippet VERIFY_X509_STRICT
	VERIFY_X509_STRICT
	
# VERIFY_X509_TRUSTED_FIRST from the ssl module
snippet VERIFY_X509_TRUSTED_FIRST
	VERIFY_X509_TRUSTED_FIRST
	
# cert_store_stats() from the ssl module
snippet cert_store_stats
	cert_store_stats(${1:})
	
# cert_time_to_seconds() from the ssl module
snippet cert_time_to_seconds
	cert_time_to_seconds(${1:cert_time})
	
# check_hostname() from the ssl module
snippet check_hostname
	check_hostname()
	
# cipher() from the ssl module
snippet cipher
	cipher(${1:})
	
# compression() from the ssl module
snippet compression
	compression(${1:})
	
# context() from the ssl module
snippet context
	context()
	
# create_default_context() from the ssl module
snippet create_default_context
	create_default_context(${1:purpose=Purpose.SERVER_AUTH}, ${2:cafile=None}, ${3:capath=None}, ${4:cadata=None})
	
# do_handshake() from the ssl module
snippet do_handshake
	do_handshake(${1:})
	
# enum_certificates() from the ssl module
snippet enum_certificates
	enum_certificates(${1:store_name})
	
# enum_crls() from the ssl module
snippet enum_crls
	enum_crls(${1:store_name})
	
# get_ca_certs() from the ssl module
snippet get_ca_certs
	get_ca_certs(${1:binary_form=False})
	
# get_channel_binding() from the ssl module
snippet get_channel_binding
	get_channel_binding(${1:cb_type="tls-unique"})
	
# get_default_verify_paths() from the ssl module
snippet get_default_verify_paths
	get_default_verify_paths(${1:})
	
# get_server_certificate() from the ssl module
snippet get_server_certificate
	get_server_certificate(${1:addr}, ${2:ssl_version=PROTOCOL_SSLv23}, ${3:ca_certs=None})
	
# getpeercert() from the ssl module
snippet getpeercert
	getpeercert(${1:binary_form=False})
	
# load_cert_chain() from the ssl module
snippet load_cert_chain
	load_cert_chain(${1:certfile}, ${2:keyfile=None}, ${3:password=None})
	
# load_default_certs() from the ssl module
snippet load_default_certs
	load_default_certs(${1:purpose=Purpose.SERVER_AUTH})
	
# load_dh_params() from the ssl module
snippet load_dh_params
	load_dh_params(${1:dhfile})
	
# load_verify_locations() from the ssl module
snippet load_verify_locations
	load_verify_locations(${1:cafile=None}, ${2:capath=None}, ${3:cadata=None})
	
# match_hostname() from the ssl module
snippet match_hostname
	match_hostname(${1:cert}, ${2:hostname})
	
# options() from the ssl module
snippet options
	options()
	
# pending() from the ssl module
snippet pending
	pending(${1:})
	
# protocol() from the ssl module
snippet protocol
	protocol()
	
# read() from the ssl module
snippet read
	read(${1:len=0}, ${2:buffer=None})
	
# selected_alpn_protocol() from the ssl module
snippet selected_alpn_protocol
	selected_alpn_protocol(${1:})
	
# selected_npn_protocol() from the ssl module
snippet selected_npn_protocol
	selected_npn_protocol(${1:})
	
# server_hostname() from the ssl module
snippet server_hostname
	server_hostname()
	
# server_side() from the ssl module
snippet server_side
	server_side()
	
# session_stats() from the ssl module
snippet session_stats
	session_stats(${1:})
	
# set_alpn_protocols() from the ssl module
snippet set_alpn_protocols
	set_alpn_protocols(${1:protocols})
	
# set_ciphers() from the ssl module
snippet set_ciphers
	set_ciphers(${1:ciphers})
	
# set_default_verify_paths() from the ssl module
snippet set_default_verify_paths
	set_default_verify_paths(${1:})
	
# set_ecdh_curve() from the ssl module
snippet set_ecdh_curve
	set_ecdh_curve(${1:curve_name})
	
# set_npn_protocols() from the ssl module
snippet set_npn_protocols
	set_npn_protocols(${1:protocols})
	
# set_servername_callback() from the ssl module
snippet set_servername_callback
	set_servername_callback(${1:server_name_callback})
	
# shared_ciphers() from the ssl module
snippet shared_ciphers
	shared_ciphers(${1:})
	
# unwrap() from the ssl module
snippet unwrap
	unwrap(${1:})
	
# verify_flags() from the ssl module
snippet verify_flags
	verify_flags()
	
# verify_mode() from the ssl module
snippet verify_mode
	verify_mode()
	
# version() from the ssl module
snippet version
	version(${1:})
	
# wrap_bio() from the ssl module
snippet wrap_bio
	wrap_bio(${1:incoming}, ${2:outgoing}, ${3:server_side=False}, ${4:server_hostname=None})
	
# wrap_socket() from the ssl module
snippet wrap_socket
	wrap_socket(${1:sock}, ${2:server_side=False}, ${3:do_handshake_on_connect=True}, ${4:suppress_ragged_eofs=True}, ${5:server_hostname=None})
	
# write() from the ssl module
snippet write
	write(${1:buf})
	
# FILE_ATTRIBUTE_ARCHIVE from the stat module
snippet FILE_ATTRIBUTE_ARCHIVE
	FILE_ATTRIBUTE_ARCHIVE
	
# FILE_ATTRIBUTE_COMPRESSED from the stat module
snippet FILE_ATTRIBUTE_COMPRESSED
	FILE_ATTRIBUTE_COMPRESSED
	
# FILE_ATTRIBUTE_DEVICE from the stat module
snippet FILE_ATTRIBUTE_DEVICE
	FILE_ATTRIBUTE_DEVICE
	
# FILE_ATTRIBUTE_DIRECTORY from the stat module
snippet FILE_ATTRIBUTE_DIRECTORY
	FILE_ATTRIBUTE_DIRECTORY
	
# FILE_ATTRIBUTE_ENCRYPTED from the stat module
snippet FILE_ATTRIBUTE_ENCRYPTED
	FILE_ATTRIBUTE_ENCRYPTED
	
# FILE_ATTRIBUTE_HIDDEN from the stat module
snippet FILE_ATTRIBUTE_HIDDEN
	FILE_ATTRIBUTE_HIDDEN
	
# FILE_ATTRIBUTE_INTEGRITY_STREAM from the stat module
snippet FILE_ATTRIBUTE_INTEGRITY_STREAM
	FILE_ATTRIBUTE_INTEGRITY_STREAM
	
# FILE_ATTRIBUTE_NORMAL from the stat module
snippet FILE_ATTRIBUTE_NORMAL
	FILE_ATTRIBUTE_NORMAL
	
# FILE_ATTRIBUTE_NOT_CONTENT_INDEXED from the stat module
snippet FILE_ATTRIBUTE_NOT_CONTENT_INDEXED
	FILE_ATTRIBUTE_NOT_CONTENT_INDEXED
	
# FILE_ATTRIBUTE_NO_SCRUB_DATA from the stat module
snippet FILE_ATTRIBUTE_NO_SCRUB_DATA
	FILE_ATTRIBUTE_NO_SCRUB_DATA
	
# FILE_ATTRIBUTE_OFFLINE from the stat module
snippet FILE_ATTRIBUTE_OFFLINE
	FILE_ATTRIBUTE_OFFLINE
	
# FILE_ATTRIBUTE_READONLY from the stat module
snippet FILE_ATTRIBUTE_READONLY
	FILE_ATTRIBUTE_READONLY
	
# FILE_ATTRIBUTE_REPARSE_POINT from the stat module
snippet FILE_ATTRIBUTE_REPARSE_POINT
	FILE_ATTRIBUTE_REPARSE_POINT
	
# FILE_ATTRIBUTE_SPARSE_FILE from the stat module
snippet FILE_ATTRIBUTE_SPARSE_FILE
	FILE_ATTRIBUTE_SPARSE_FILE
	
# FILE_ATTRIBUTE_SYSTEM from the stat module
snippet FILE_ATTRIBUTE_SYSTEM
	FILE_ATTRIBUTE_SYSTEM
	
# FILE_ATTRIBUTE_TEMPORARY from the stat module
snippet FILE_ATTRIBUTE_TEMPORARY
	FILE_ATTRIBUTE_TEMPORARY
	
# FILE_ATTRIBUTE_VIRTUAL from the stat module
snippet FILE_ATTRIBUTE_VIRTUAL
	FILE_ATTRIBUTE_VIRTUAL
	
# SF_APPEND from the stat module
snippet SF_APPEND
	SF_APPEND
	
# SF_ARCHIVED from the stat module
snippet SF_ARCHIVED
	SF_ARCHIVED
	
# SF_IMMUTABLE from the stat module
snippet SF_IMMUTABLE
	SF_IMMUTABLE
	
# SF_NOUNLINK from the stat module
snippet SF_NOUNLINK
	SF_NOUNLINK
	
# SF_SNAPSHOT from the stat module
snippet SF_SNAPSHOT
	SF_SNAPSHOT
	
# ST_ATIME from the stat module
snippet ST_ATIME
	ST_ATIME
	
# ST_CTIME from the stat module
snippet ST_CTIME
	ST_CTIME
	
# ST_DEV from the stat module
snippet ST_DEV
	ST_DEV
	
# ST_GID from the stat module
snippet ST_GID
	ST_GID
	
# ST_INO from the stat module
snippet ST_INO
	ST_INO
	
# ST_MODE from the stat module
snippet ST_MODE
	ST_MODE
	
# ST_MTIME from the stat module
snippet ST_MTIME
	ST_MTIME
	
# ST_NLINK from the stat module
snippet ST_NLINK
	ST_NLINK
	
# ST_SIZE from the stat module
snippet ST_SIZE
	ST_SIZE
	
# ST_UID from the stat module
snippet ST_UID
	ST_UID
	
# S_ENFMT from the stat module
snippet S_ENFMT
	S_ENFMT
	
# S_IEXEC from the stat module
snippet S_IEXEC
	S_IEXEC
	
# S_IFBLK from the stat module
snippet S_IFBLK
	S_IFBLK
	
# S_IFCHR from the stat module
snippet S_IFCHR
	S_IFCHR
	
# S_IFDIR from the stat module
snippet S_IFDIR
	S_IFDIR
	
# S_IFDOOR from the stat module
snippet S_IFDOOR
	S_IFDOOR
	
# S_IFIFO from the stat module
snippet S_IFIFO
	S_IFIFO
	
# S_IFLNK from the stat module
snippet S_IFLNK
	S_IFLNK
	
# S_IFMT from the stat module
snippet S_IFMT
	S_IFMT(${1:mode})
	
# S_IFPORT from the stat module
snippet S_IFPORT
	S_IFPORT
	
# S_IFREG from the stat module
snippet S_IFREG
	S_IFREG
	
# S_IFSOCK from the stat module
snippet S_IFSOCK
	S_IFSOCK
	
# S_IFWHT from the stat module
snippet S_IFWHT
	S_IFWHT
	
# S_IMODE from the stat module
snippet S_IMODE
	S_IMODE(${1:mode})
	
# S_IREAD from the stat module
snippet S_IREAD
	S_IREAD
	
# S_IRGRP from the stat module
snippet S_IRGRP
	S_IRGRP
	
# S_IROTH from the stat module
snippet S_IROTH
	S_IROTH
	
# S_IRUSR from the stat module
snippet S_IRUSR
	S_IRUSR
	
# S_IRWXG from the stat module
snippet S_IRWXG
	S_IRWXG
	
# S_IRWXO from the stat module
snippet S_IRWXO
	S_IRWXO
	
# S_IRWXU from the stat module
snippet S_IRWXU
	S_IRWXU
	
# S_ISBLK from the stat module
snippet S_ISBLK
	S_ISBLK(${1:mode})
	
# S_ISCHR from the stat module
snippet S_ISCHR
	S_ISCHR(${1:mode})
	
# S_ISDIR from the stat module
snippet S_ISDIR
	S_ISDIR(${1:mode})
	
# S_ISDOOR from the stat module
snippet S_ISDOOR
	S_ISDOOR(${1:mode})
	
# S_ISFIFO from the stat module
snippet S_ISFIFO
	S_ISFIFO(${1:mode})
	
# S_ISGID from the stat module
snippet S_ISGID
	S_ISGID
	
# S_ISLNK from the stat module
snippet S_ISLNK
	S_ISLNK(${1:mode})
	
# S_ISPORT from the stat module
snippet S_ISPORT
	S_ISPORT(${1:mode})
	
# S_ISREG from the stat module
snippet S_ISREG
	S_ISREG(${1:mode})
	
# S_ISSOCK from the stat module
snippet S_ISSOCK
	S_ISSOCK(${1:mode})
	
# S_ISUID from the stat module
snippet S_ISUID
	S_ISUID
	
# S_ISVTX from the stat module
snippet S_ISVTX
	S_ISVTX
	
# S_ISWHT from the stat module
snippet S_ISWHT
	S_ISWHT(${1:mode})
	
# S_IWGRP from the stat module
snippet S_IWGRP
	S_IWGRP
	
# S_IWOTH from the stat module
snippet S_IWOTH
	S_IWOTH
	
# S_IWRITE from the stat module
snippet S_IWRITE
	S_IWRITE
	
# S_IWUSR from the stat module
snippet S_IWUSR
	S_IWUSR
	
# S_IXGRP from the stat module
snippet S_IXGRP
	S_IXGRP
	
# S_IXOTH from the stat module
snippet S_IXOTH
	S_IXOTH
	
# S_IXUSR from the stat module
snippet S_IXUSR
	S_IXUSR
	
# UF_APPEND from the stat module
snippet UF_APPEND
	UF_APPEND
	
# UF_COMPRESSED from the stat module
snippet UF_COMPRESSED
	UF_COMPRESSED
	
# UF_HIDDEN from the stat module
snippet UF_HIDDEN
	UF_HIDDEN
	
# UF_IMMUTABLE from the stat module
snippet UF_IMMUTABLE
	UF_IMMUTABLE
	
# UF_NODUMP from the stat module
snippet UF_NODUMP
	UF_NODUMP
	
# UF_NOUNLINK from the stat module
snippet UF_NOUNLINK
	UF_NOUNLINK
	
# UF_OPAQUE from the stat module
snippet UF_OPAQUE
	UF_OPAQUE
	
# filemode() from the stat module
snippet filemode
	filemode(${1:mode})
	
# StatisticsError from the statistics module
snippet StatisticsError
	StatisticsError
	
# mean() from the statistics module
snippet mean
	mean(${1:data})
	
# median() from the statistics module
snippet median
	median(${1:data})
	
# median_grouped() from the statistics module
snippet median_grouped
	median_grouped(${1:data}, ${2:interval=1})
	
# median_high() from the statistics module
snippet median_high
	median_high(${1:data})
	
# median_low() from the statistics module
snippet median_low
	median_low(${1:data})
	
# mode() from the statistics module
snippet mode
	mode(${1:data})
	
# pstdev() from the statistics module
snippet pstdev
	pstdev(${1:data}, ${2:mu=None})
	
# pvariance() from the statistics module
snippet pvariance
	pvariance(${1:data}, ${2:mu=None})
	
# stdev() from the statistics module
snippet stdev
	stdev(${1:data}, ${2:xbar=None})
	
# variance() from the statistics module
snippet variance
	variance(${1:data,})
	
# Formatter from the string module
snippet Formatter
	Formatter
	
# Template from the string module
snippet Template
	Template(${1:template})
	
# ascii_letters() from the string module
snippet ascii_letters
	ascii_letters()
	
# ascii_lowercase() from the string module
snippet ascii_lowercase
	ascii_lowercase()
	
# ascii_uppercase() from the string module
snippet ascii_uppercase
	ascii_uppercase()
	
# capwords() from the string module
snippet capwords
	capwords(${1:s}, ${2:sep=None})
	
# digits() from the string module
snippet digits
	digits()
	
# hexdigits() from the string module
snippet hexdigits
	hexdigits()
	
# octdigits() from the string module
snippet octdigits
	octdigits()
	
# printable() from the string module
snippet printable
	printable()
	
# punctuation() from the string module
snippet punctuation
	punctuation()
	
# whitespace() from the string module
snippet whitespace
	whitespace()
	
# in_table_a1() from the stringprep module
snippet in_table_a1
	in_table_a1(${1:code})
	
# in_table_b1() from the stringprep module
snippet in_table_b1
	in_table_b1(${1:code})
	
# in_table_c11() from the stringprep module
snippet in_table_c11
	in_table_c11(${1:code})
	
# in_table_c11_c12() from the stringprep module
snippet in_table_c11_c12
	in_table_c11_c12(${1:code})
	
# in_table_c12() from the stringprep module
snippet in_table_c12
	in_table_c12(${1:code})
	
# in_table_c21() from the stringprep module
snippet in_table_c21
	in_table_c21(${1:code})
	
# in_table_c21_c22() from the stringprep module
snippet in_table_c21_c22
	in_table_c21_c22(${1:code})
	
# in_table_c22() from the stringprep module
snippet in_table_c22
	in_table_c22(${1:code})
	
# in_table_c3() from the stringprep module
snippet in_table_c3
	in_table_c3(${1:code})
	
# in_table_c4() from the stringprep module
snippet in_table_c4
	in_table_c4(${1:code})
	
# in_table_c5() from the stringprep module
snippet in_table_c5
	in_table_c5(${1:code})
	
# in_table_c6() from the stringprep module
snippet in_table_c6
	in_table_c6(${1:code})
	
# in_table_c7() from the stringprep module
snippet in_table_c7
	in_table_c7(${1:code})
	
# in_table_c8() from the stringprep module
snippet in_table_c8
	in_table_c8(${1:code})
	
# in_table_c9() from the stringprep module
snippet in_table_c9
	in_table_c9(${1:code})
	
# in_table_d1() from the stringprep module
snippet in_table_d1
	in_table_d1(${1:code})
	
# in_table_d2() from the stringprep module
snippet in_table_d2
	in_table_d2(${1:code})
	
# map_table_b2() from the stringprep module
snippet map_table_b2
	map_table_b2(${1:code})
	
# map_table_b3() from the stringprep module
snippet map_table_b3
	map_table_b3(${1:code})
	
# Struct from the struct module
snippet Struct
	Struct(${1:format})
	
# calcsize() from the struct module
snippet calcsize
	calcsize(${1:fmt})
	
# error() from the struct module
snippet error
	error()
	
# iter_unpack() from the struct module
snippet iter_unpack
	iter_unpack(${1:fmt}, ${2:buffer})
	
# pack() from the struct module
snippet pack
	pack(${1:fmt}, ${2:v1}, ${3:v2}, ${4:...})
	
# pack_into() from the struct module
snippet pack_into
	pack_into(${1:fmt}, ${2:buffer}, ${3:offset}, ${4:v1}, ${5:v2}, ${6:...})
	
# unpack() from the struct module
snippet unpack
	unpack(${1:fmt}, ${2:buffer})
	
# unpack_from() from the struct module
snippet unpack_from
	unpack_from(${1:fmt,})
	
# CREATE_NEW_CONSOLE from the subprocess module
snippet CREATE_NEW_CONSOLE
	CREATE_NEW_CONSOLE
	
# CREATE_NEW_PROCESS_GROUP from the subprocess module
snippet CREATE_NEW_PROCESS_GROUP
	CREATE_NEW_PROCESS_GROUP
	
# CalledProcessError from the subprocess module
snippet CalledProcessError
	CalledProcessError
	
# CompletedProcess from the subprocess module
snippet CompletedProcess
	CompletedProcess
	
# DEVNULL from the subprocess module
snippet DEVNULL
	DEVNULL
	
# PIPE from the subprocess module
snippet PIPE
	PIPE
	
# Popen from the subprocess module
snippet Popen
	Popen(${1:args}, ${2:bufsize=-1}, ${3:executable=None}, ${4:stdin=None}, ${5:stdout=None}, ${6:stderr=None}, ${7:preexec_fn=None}, ${8:close_fds=True}, ${9:shell=False}, ${10:cwd=None}, ${11:env=None}, ${12:universal_newlines=False}, ${13:startupinfo=None}, ${14:creationflags=0}, ${15:restore_signals=True}, ${16:start_new_session=False}, ${17:pass_fds=}, ${18:})
	
# STARTF_USESHOWWINDOW from the subprocess module
snippet STARTF_USESHOWWINDOW
	STARTF_USESHOWWINDOW
	
# STARTF_USESTDHANDLES from the subprocess module
snippet STARTF_USESTDHANDLES
	STARTF_USESTDHANDLES
	
# STARTUPINFO from the subprocess module
snippet STARTUPINFO
	STARTUPINFO
	
# STDOUT from the subprocess module
snippet STDOUT
	STDOUT
	
# STD_ERROR_HANDLE from the subprocess module
snippet STD_ERROR_HANDLE
	STD_ERROR_HANDLE
	
# STD_INPUT_HANDLE from the subprocess module
snippet STD_INPUT_HANDLE
	STD_INPUT_HANDLE
	
# STD_OUTPUT_HANDLE from the subprocess module
snippet STD_OUTPUT_HANDLE
	STD_OUTPUT_HANDLE
	
# SW_HIDE from the subprocess module
snippet SW_HIDE
	SW_HIDE
	
# SubprocessError from the subprocess module
snippet SubprocessError
	SubprocessError
	
# TimeoutExpired from the subprocess module
snippet TimeoutExpired
	TimeoutExpired
	
# args() from the subprocess module
snippet args
	args()
	
# call() from the subprocess module
snippet call
	call(${1:args}, ${2:*}, ${3:stdin=None}, ${4:stdout=None}, ${5:stderr=None}, ${6:shell=False}, ${7:timeout=None})
	
# check_call() from the subprocess module
snippet check_call
	check_call(${1:args}, ${2:*}, ${3:stdin=None}, ${4:stdout=None}, ${5:stderr=None}, ${6:shell=False}, ${7:timeout=None})
	
# check_output() from the subprocess module
snippet check_output
	check_output(${1:args}, ${2:*}, ${3:stdin=None}, ${4:stderr=None}, ${5:shell=False}, ${6:universal_newlines=False}, ${7:timeout=None})
	
# communicate() from the subprocess module
snippet communicate
	communicate(${1:input=None}, ${2:timeout=None})
	
# getoutput() from the subprocess module
snippet getoutput
	getoutput(${1:cmd})
	
# getstatusoutput() from the subprocess module
snippet getstatusoutput
	getstatusoutput(${1:cmd})
	
# kill() from the subprocess module
snippet kill
	kill(${1:})
	
# pid() from the subprocess module
snippet pid
	pid()
	
# poll() from the subprocess module
snippet poll
	poll(${1:})
	
# returncode() from the subprocess module
snippet returncode
	returncode()
	
# run() from the subprocess module
snippet run
	run(${1:args}, ${2:*}, ${3:stdin=None}, ${4:input=None}, ${5:stdout=None}, ${6:stderr=None}, ${7:shell=False}, ${8:timeout=None}, ${9:check=False})
	
# send_signal() from the subprocess module
snippet send_signal
	send_signal(${1:signal})
	
# stderr() from the subprocess module
snippet stderr
	stderr()
	
# stdin() from the subprocess module
snippet stdin
	stdin()
	
# stdout() from the subprocess module
snippet stdout
	stdout()
	
# terminate() from the subprocess module
snippet terminate
	terminate(${1:})
	
# wait() from the subprocess module
snippet wait
	wait(${1:timeout=None})
	
# AUDIO_FILE_ENCODING_ADPCM_G721 from the sunau module
snippet AUDIO_FILE_ENCODING_ADPCM_G721
	AUDIO_FILE_ENCODING_ADPCM_G721
	
# AUDIO_FILE_ENCODING_ADPCM_G722 from the sunau module
snippet AUDIO_FILE_ENCODING_ADPCM_G722
	AUDIO_FILE_ENCODING_ADPCM_G722
	
# AUDIO_FILE_ENCODING_ADPCM_G723_3 from the sunau module
snippet AUDIO_FILE_ENCODING_ADPCM_G723_3
	AUDIO_FILE_ENCODING_ADPCM_G723_3
	
# AUDIO_FILE_ENCODING_ADPCM_G723_5 from the sunau module
snippet AUDIO_FILE_ENCODING_ADPCM_G723_5
	AUDIO_FILE_ENCODING_ADPCM_G723_5
	
# AUDIO_FILE_ENCODING_ALAW_8 from the sunau module
snippet AUDIO_FILE_ENCODING_ALAW_8
	AUDIO_FILE_ENCODING_ALAW_8
	
# AUDIO_FILE_ENCODING_DOUBLE from the sunau module
snippet AUDIO_FILE_ENCODING_DOUBLE
	AUDIO_FILE_ENCODING_DOUBLE
	
# AUDIO_FILE_ENCODING_FLOAT from the sunau module
snippet AUDIO_FILE_ENCODING_FLOAT
	AUDIO_FILE_ENCODING_FLOAT
	
# AUDIO_FILE_ENCODING_LINEAR_16 from the sunau module
snippet AUDIO_FILE_ENCODING_LINEAR_16
	AUDIO_FILE_ENCODING_LINEAR_16
	
# AUDIO_FILE_ENCODING_LINEAR_24 from the sunau module
snippet AUDIO_FILE_ENCODING_LINEAR_24
	AUDIO_FILE_ENCODING_LINEAR_24
	
# AUDIO_FILE_ENCODING_LINEAR_32 from the sunau module
snippet AUDIO_FILE_ENCODING_LINEAR_32
	AUDIO_FILE_ENCODING_LINEAR_32
	
# AUDIO_FILE_ENCODING_LINEAR_8 from the sunau module
snippet AUDIO_FILE_ENCODING_LINEAR_8
	AUDIO_FILE_ENCODING_LINEAR_8
	
# AUDIO_FILE_ENCODING_MULAW_8 from the sunau module
snippet AUDIO_FILE_ENCODING_MULAW_8
	AUDIO_FILE_ENCODING_MULAW_8
	
# AUDIO_FILE_MAGIC from the sunau module
snippet AUDIO_FILE_MAGIC
	AUDIO_FILE_MAGIC
	
# Error from the sunau module
snippet Error
	Error
	
# close() from the sunau module
snippet close
	close(${1:})
	
# getcompname() from the sunau module
snippet getcompname
	getcompname(${1:})
	
# getcomptype() from the sunau module
snippet getcomptype
	getcomptype(${1:})
	
# getframerate() from the sunau module
snippet getframerate
	getframerate(${1:})
	
# getmark() from the sunau module
snippet getmark
	getmark(${1:id})
	
# getmarkers() from the sunau module
snippet getmarkers
	getmarkers(${1:})
	
# getnchannels() from the sunau module
snippet getnchannels
	getnchannels(${1:})
	
# getnframes() from the sunau module
snippet getnframes
	getnframes(${1:})
	
# getparams() from the sunau module
snippet getparams
	getparams(${1:})
	
# getsampwidth() from the sunau module
snippet getsampwidth
	getsampwidth(${1:})
	
# open() from the sunau module
snippet open
	open(${1:file}, ${2:mode})
	
# openfp() from the sunau module
snippet openfp
	openfp(${1:file}, ${2:mode})
	
# readframes() from the sunau module
snippet readframes
	readframes(${1:n})
	
# rewind() from the sunau module
snippet rewind
	rewind(${1:})
	
# setcomptype() from the sunau module
snippet setcomptype
	setcomptype(${1:type}, ${2:name})
	
# setframerate() from the sunau module
snippet setframerate
	setframerate(${1:n})
	
# setnchannels() from the sunau module
snippet setnchannels
	setnchannels(${1:n})
	
# setnframes() from the sunau module
snippet setnframes
	setnframes(${1:n})
	
# setparams() from the sunau module
snippet setparams
	setparams(${1:tuple})
	
# setpos() from the sunau module
snippet setpos
	setpos(${1:pos})
	
# setsampwidth() from the sunau module
snippet setsampwidth
	setsampwidth(${1:n})
	
# tell() from the sunau module
snippet tell
	tell(${1:})
	
# writeframes() from the sunau module
snippet writeframes
	writeframes(${1:data})
	
# writeframesraw() from the sunau module
snippet writeframesraw
	writeframesraw(${1:data})
	
# sym_name() from the symbol module
snippet sym_name
	sym_name()
	
# Class from the symtable module
snippet Class
	Class
	
# Function from the symtable module
snippet Function
	Function
	
# Symbol from the symtable module
snippet Symbol
	Symbol
	
# SymbolTable from the symtable module
snippet SymbolTable
	SymbolTable
	
# symtable() from the symtable module
snippet symtable
	symtable(${1:code,})
	
# __displayhook__() from the sys module
snippet __displayhook__
	__displayhook__()
	
# __excepthook__() from the sys module
snippet __excepthook__
	__excepthook__()
	
# __interactivehook__() from the sys module
snippet __interactivehook__
	__interactivehook__()
	
# __stderr__() from the sys module
snippet __stderr__
	__stderr__()
	
# __stdin__() from the sys module
snippet __stdin__
	__stdin__()
	
# __stdout__() from the sys module
snippet __stdout__
	__stdout__()
	
# _clear_type_cache() from the sys module
snippet _clear_type_cache
	_clear_type_cache(${1:})
	
# _current_frames() from the sys module
snippet _current_frames
	_current_frames(${1:})
	
# _debugmallocstats() from the sys module
snippet _debugmallocstats
	_debugmallocstats(${1:})
	
# _getframe() from the sys module
snippet _getframe
	_getframe(${1:[depth]})
	
# _xoptions() from the sys module
snippet _xoptions
	_xoptions()
	
# abiflags() from the sys module
snippet abiflags
	abiflags()
	
# api_version() from the sys module
snippet api_version
	api_version()
	
# argv() from the sys module
snippet argv
	argv()
	
# base_exec_prefix() from the sys module
snippet base_exec_prefix
	base_exec_prefix()
	
# base_prefix() from the sys module
snippet base_prefix
	base_prefix()
	
# builtin_module_names() from the sys module
snippet builtin_module_names
	builtin_module_names()
	
# byteorder() from the sys module
snippet byteorder
	byteorder()
	
# call_tracing() from the sys module
snippet call_tracing
	call_tracing(${1:func}, ${2:args})
	
# copyright() from the sys module
snippet copyright
	copyright()
	
# displayhook() from the sys module
snippet displayhook
	displayhook(${1:value})
	
# dllhandle() from the sys module
snippet dllhandle
	dllhandle()
	
# dont_write_bytecode() from the sys module
snippet dont_write_bytecode
	dont_write_bytecode()
	
# exc_info() from the sys module
snippet exc_info
	exc_info(${1:})
	
# excepthook() from the sys module
snippet excepthook
	excepthook(${1:type}, ${2:value}, ${3:traceback})
	
# exec_prefix() from the sys module
snippet exec_prefix
	exec_prefix()
	
# executable() from the sys module
snippet executable
	executable()
	
# exit() from the sys module
snippet exit
	exit(${1:[arg]})
	
# flags() from the sys module
snippet flags
	flags()
	
# float_info() from the sys module
snippet float_info
	float_info()
	
# float_repr_style() from the sys module
snippet float_repr_style
	float_repr_style()
	
# get_coroutine_wrapper() from the sys module
snippet get_coroutine_wrapper
	get_coroutine_wrapper(${1:})
	
# getallocatedblocks() from the sys module
snippet getallocatedblocks
	getallocatedblocks(${1:})
	
# getcheckinterval() from the sys module
snippet getcheckinterval
	getcheckinterval(${1:})
	
# getdefaultencoding() from the sys module
snippet getdefaultencoding
	getdefaultencoding(${1:})
	
# getdlopenflags() from the sys module
snippet getdlopenflags
	getdlopenflags(${1:})
	
# getfilesystemencoding() from the sys module
snippet getfilesystemencoding
	getfilesystemencoding(${1:})
	
# getprofile() from the sys module
snippet getprofile
	getprofile(${1:})
	
# getrecursionlimit() from the sys module
snippet getrecursionlimit
	getrecursionlimit(${1:})
	
# getrefcount() from the sys module
snippet getrefcount
	getrefcount(${1:object})
	
# getsizeof() from the sys module
snippet getsizeof
	getsizeof(${1:object[}, ${2:default]})
	
# getswitchinterval() from the sys module
snippet getswitchinterval
	getswitchinterval(${1:})
	
# gettrace() from the sys module
snippet gettrace
	gettrace(${1:})
	
# getwindowsversion() from the sys module
snippet getwindowsversion
	getwindowsversion(${1:})
	
# hash_info() from the sys module
snippet hash_info
	hash_info()
	
# hexversion() from the sys module
snippet hexversion
	hexversion()
	
# implementation() from the sys module
snippet implementation
	implementation()
	
# int_info() from the sys module
snippet int_info
	int_info()
	
# intern() from the sys module
snippet intern
	intern(${1:string})
	
# is_finalizing() from the sys module
snippet is_finalizing
	is_finalizing(${1:})
	
# last_traceback() from the sys module
snippet last_traceback
	last_traceback()
	
# last_type() from the sys module
snippet last_type
	last_type()
	
# last_value() from the sys module
snippet last_value
	last_value()
	
# maxsize() from the sys module
snippet maxsize
	maxsize()
	
# maxunicode() from the sys module
snippet maxunicode
	maxunicode()
	
# meta_path() from the sys module
snippet meta_path
	meta_path()
	
# modules() from the sys module
snippet modules
	modules()
	
# path() from the sys module
snippet path
	path()
	
# path_hooks() from the sys module
snippet path_hooks
	path_hooks()
	
# path_importer_cache() from the sys module
snippet path_importer_cache
	path_importer_cache()
	
# platform() from the sys module
snippet platform
	platform()
	
# prefix() from the sys module
snippet prefix
	prefix()
	
# ps1() from the sys module
snippet ps1
	ps1()
	
# ps2() from the sys module
snippet ps2
	ps2()
	
# set_coroutine_wrapper() from the sys module
snippet set_coroutine_wrapper
	set_coroutine_wrapper(${1:wrapper})
	
# setcheckinterval() from the sys module
snippet setcheckinterval
	setcheckinterval(${1:interval})
	
# setdlopenflags() from the sys module
snippet setdlopenflags
	setdlopenflags(${1:n})
	
# setprofile() from the sys module
snippet setprofile
	setprofile(${1:profilefunc})
	
# setrecursionlimit() from the sys module
snippet setrecursionlimit
	setrecursionlimit(${1:limit})
	
# setswitchinterval() from the sys module
snippet setswitchinterval
	setswitchinterval(${1:interval})
	
# settrace() from the sys module
snippet settrace
	settrace(${1:tracefunc})
	
# settscdump() from the sys module
snippet settscdump
	settscdump(${1:on_flag})
	
# stderr() from the sys module
snippet stderr
	stderr()
	
# stdin() from the sys module
snippet stdin
	stdin()
	
# stdout() from the sys module
snippet stdout
	stdout()
	
# thread_info() from the sys module
snippet thread_info
	thread_info()
	
# tracebacklimit() from the sys module
snippet tracebacklimit
	tracebacklimit()
	
# version() from the sys module
snippet version
	version()
	
# version_info() from the sys module
snippet version_info
	version_info()
	
# warnoptions() from the sys module
snippet warnoptions
	warnoptions()
	
# winver() from the sys module
snippet winver
	winver()
	
# get_config_h_filename() from the sysconfig module
snippet get_config_h_filename
	get_config_h_filename(${1:})
	
# get_config_var() from the sysconfig module
snippet get_config_var
	get_config_var(${1:name})
	
# get_config_vars() from the sysconfig module
snippet get_config_vars
	get_config_vars(${1:*args})
	
# get_makefile_filename() from the sysconfig module
snippet get_makefile_filename
	get_makefile_filename(${1:})
	
# get_path() from the sysconfig module
snippet get_path
	get_path(${1:name[}, ${2:scheme[}, ${3:vars[}, ${4:expand]]]})
	
# get_path_names() from the sysconfig module
snippet get_path_names
	get_path_names(${1:})
	
# get_paths() from the sysconfig module
snippet get_paths
	get_paths(${1:[scheme[}, ${2:vars[}, ${3:expand]]]})
	
# get_platform() from the sysconfig module
snippet get_platform
	get_platform(${1:})
	
# get_python_version() from the sysconfig module
snippet get_python_version
	get_python_version(${1:})
	
# get_scheme_names() from the sysconfig module
snippet get_scheme_names
	get_scheme_names(${1:})
	
# is_python_build() from the sysconfig module
snippet is_python_build
	is_python_build(${1:})
	
# parse_config_h() from the sysconfig module
snippet parse_config_h
	parse_config_h(${1:fp[,})
	
# closelog() from the syslog module
snippet closelog
	closelog(${1:})
	
# openlog() from the syslog module
snippet openlog
	openlog(${1:[ident[}, ${2:logoption[}, ${3:facility]]]})
	
# setlogmask() from the syslog module
snippet setlogmask
	setlogmask(${1:maskpri})
	
# syslog() from the syslog module
snippet syslog
	syslog(${1:priority,})
	
# NannyNag from the tabnanny module
snippet NannyNag
	NannyNag
	
# check() from the tabnanny module
snippet check
	check(${1:file_or_dir})
	
# filename_only() from the tabnanny module
snippet filename_only
	filename_only()
	
# tokeneater() from the tabnanny module
snippet tokeneater
	tokeneater(${1:type}, ${2:token}, ${3:start}, ${4:end}, ${5:line})
	
# verbose() from the tabnanny module
snippet verbose
	verbose()
	
# CompressionError from the tarfile module
snippet CompressionError
	CompressionError
	
# DEFAULT_FORMAT from the tarfile module
snippet DEFAULT_FORMAT
	DEFAULT_FORMAT
	
# ENCODING from the tarfile module
snippet ENCODING
	ENCODING
	
# ExtractError from the tarfile module
snippet ExtractError
	ExtractError
	
# GNU_FORMAT from the tarfile module
snippet GNU_FORMAT
	GNU_FORMAT
	
# HeaderError from the tarfile module
snippet HeaderError
	HeaderError
	
# PAX_FORMAT from the tarfile module
snippet PAX_FORMAT
	PAX_FORMAT
	
# ReadError from the tarfile module
snippet ReadError
	ReadError
	
# StreamError from the tarfile module
snippet StreamError
	StreamError
	
# TarError from the tarfile module
snippet TarError
	TarError
	
# TarFile from the tarfile module
snippet TarFile
	TarFile(${1:name=None}, ${2:mode='r'}, ${3:fileobj=None}, ${4:format=DEFAULT_FORMAT}, ${5:tarinfo=TarInfo}, ${6:dereference=False}, ${7:ignore_zeros=False}, ${8:encoding=ENCODING}, ${9:errors='surrogateescape'}, ${10:pax_headers=None}, ${11:debug=0}, ${12:errorlevel=0})
	
# TarInfo from the tarfile module
snippet TarInfo
	TarInfo(${1:name=""})
	
# USTAR_FORMAT from the tarfile module
snippet USTAR_FORMAT
	USTAR_FORMAT
	
# add() from the tarfile module
snippet add
	add(${1:name}, ${2:arcname=None}, ${3:recursive=True}, ${4:exclude=None}, ${5:*}, ${6:filter=None})
	
# addfile() from the tarfile module
snippet addfile
	addfile(${1:tarinfo}, ${2:fileobj=None})
	
# close() from the tarfile module
snippet close
	close(${1:})
	
# extract() from the tarfile module
snippet extract
	extract(${1:member}, ${2:path=""}, ${3:set_attrs=True}, ${4:*}, ${5:numeric_owner=False})
	
# extractall() from the tarfile module
snippet extractall
	extractall(${1:path="."}, ${2:members=None}, ${3:*}, ${4:numeric_owner=False})
	
# extractfile() from the tarfile module
snippet extractfile
	extractfile(${1:member})
	
# frombuf() from the tarfile module
snippet frombuf
	frombuf(${1:buf}, ${2:encoding}, ${3:errors})
	
# fromtarfile() from the tarfile module
snippet fromtarfile
	fromtarfile(${1:tarfile})
	
# getmember() from the tarfile module
snippet getmember
	getmember(${1:name})
	
# getmembers() from the tarfile module
snippet getmembers
	getmembers(${1:})
	
# getnames() from the tarfile module
snippet getnames
	getnames(${1:})
	
# gettarinfo() from the tarfile module
snippet gettarinfo
	gettarinfo(${1:name=None}, ${2:arcname=None}, ${3:fileobj=None})
	
# gid() from the tarfile module
snippet gid
	gid()
	
# gname() from the tarfile module
snippet gname
	gname()
	
# is_tarfile() from the tarfile module
snippet is_tarfile
	is_tarfile(${1:name})
	
# isblk() from the tarfile module
snippet isblk
	isblk(${1:})
	
# ischr() from the tarfile module
snippet ischr
	ischr(${1:})
	
# isdev() from the tarfile module
snippet isdev
	isdev(${1:})
	
# isdir() from the tarfile module
snippet isdir
	isdir(${1:})
	
# isfifo() from the tarfile module
snippet isfifo
	isfifo(${1:})
	
# isfile() from the tarfile module
snippet isfile
	isfile(${1:})
	
# islnk() from the tarfile module
snippet islnk
	islnk(${1:})
	
# isreg() from the tarfile module
snippet isreg
	isreg(${1:})
	
# issym() from the tarfile module
snippet issym
	issym(${1:})
	
# linkname() from the tarfile module
snippet linkname
	linkname()
	
# list() from the tarfile module
snippet list
	list(${1:verbose=True}, ${2:*}, ${3:members=None})
	
# mode() from the tarfile module
snippet mode
	mode()
	
# mtime() from the tarfile module
snippet mtime
	mtime()
	
# name() from the tarfile module
snippet name
	name()
	
# next() from the tarfile module
snippet next
	next(${1:})
	
# open() from the tarfile module
snippet open
	open(${1:name=None}, ${2:mode='r'}, ${3:fileobj=None}, ${4:bufsize=10240}, ${5:**kwargs})
	
# pax_headers() from the tarfile module
snippet pax_headers
	pax_headers()
	
# size() from the tarfile module
snippet size
	size()
	
# tobuf() from the tarfile module
snippet tobuf
	tobuf(${1:format=DEFAULT_FORMAT}, ${2:encoding=ENCODING}, ${3:errors='surrogateescape'})
	
# type() from the tarfile module
snippet type
	type()
	
# uid() from the tarfile module
snippet uid
	uid()
	
# uname() from the tarfile module
snippet uname
	uname()
	
# Telnet from the telnetlib module
snippet Telnet
	Telnet(${1:host=None}, ${2:port=0[}, ${3:timeout]})
	
# close() from the telnetlib module
snippet close
	close(${1:})
	
# expect() from the telnetlib module
snippet expect
	expect(${1:list}, ${2:timeout=None})
	
# fileno() from the telnetlib module
snippet fileno
	fileno(${1:})
	
# get_socket() from the telnetlib module
snippet get_socket
	get_socket(${1:})
	
# interact() from the telnetlib module
snippet interact
	interact(${1:})
	
# msg() from the telnetlib module
snippet msg
	msg(${0:msg}, ${2:*args})
	
# mt_interact() from the telnetlib module
snippet mt_interact
	mt_interact(${1:})
	
# open() from the telnetlib module
snippet open
	open(${1:host}, ${2:port=0[}, ${3:timeout]})
	
# read_all() from the telnetlib module
snippet read_all
	read_all(${1:})
	
# read_eager() from the telnetlib module
snippet read_eager
	read_eager(${1:})
	
# read_lazy() from the telnetlib module
snippet read_lazy
	read_lazy(${1:})
	
# read_sb_data() from the telnetlib module
snippet read_sb_data
	read_sb_data(${1:})
	
# read_some() from the telnetlib module
snippet read_some
	read_some(${1:})
	
# read_until() from the telnetlib module
snippet read_until
	read_until(${1:expected}, ${2:timeout=None})
	
# read_very_eager() from the telnetlib module
snippet read_very_eager
	read_very_eager(${1:})
	
# read_very_lazy() from the telnetlib module
snippet read_very_lazy
	read_very_lazy(${1:})
	
# set_debuglevel() from the telnetlib module
snippet set_debuglevel
	set_debuglevel(${1:debuglevel})
	
# set_option_negotiation_callback() from the telnetlib module
snippet set_option_negotiation_callback
	set_option_negotiation_callback(${1:callback})
	
# write() from the telnetlib module
snippet write
	write(${1:buffer})
	
# NamedTemporaryFile from the tempfile module
snippet NamedTemporaryFile
	NamedTemporaryFile(${1:mode='w+b'}, ${2:buffering=None}, ${3:encoding=None}, ${4:newline=None}, ${5:suffix=None}, ${6:prefix=None}, ${7:dir=None}, ${8:delete=True})
	
# SpooledTemporaryFile from the tempfile module
snippet SpooledTemporaryFile
	SpooledTemporaryFile(${1:max_size=0}, ${2:mode='w+b'}, ${3:buffering=None}, ${4:encoding=None}, ${5:newline=None}, ${6:suffix=None}, ${7:prefix=None}, ${8:dir=None})
	
# TemporaryDirectory from the tempfile module
snippet TemporaryDirectory
	TemporaryDirectory(${1:suffix=None}, ${2:prefix=None}, ${3:dir=None})
	
# TemporaryFile from the tempfile module
snippet TemporaryFile
	TemporaryFile(${1:mode='w+b'}, ${2:buffering=None}, ${3:encoding=None}, ${4:newline=None}, ${5:suffix=None}, ${6:prefix=None}, ${7:dir=None})
	
# gettempdir() from the tempfile module
snippet gettempdir
	gettempdir(${1:})
	
# gettempdirb() from the tempfile module
snippet gettempdirb
	gettempdirb(${1:})
	
# gettempprefix() from the tempfile module
snippet gettempprefix
	gettempprefix(${1:})
	
# gettempprefixb() from the tempfile module
snippet gettempprefixb
	gettempprefixb(${1:})
	
# mkdtemp() from the tempfile module
snippet mkdtemp
	mkdtemp(${1:suffix=None}, ${2:prefix=None}, ${3:dir=None})
	
# mkstemp() from the tempfile module
snippet mkstemp
	mkstemp(${1:suffix=None}, ${2:prefix=None}, ${3:dir=None}, ${4:text=False})
	
# mktemp() from the tempfile module
snippet mktemp
	mktemp(${1:suffix=''}, ${2:prefix='tmp'}, ${3:dir=None})
	
# tempdir() from the tempfile module
snippet tempdir
	tempdir()
	
# tcdrain() from the termios module
snippet tcdrain
	tcdrain(${1:fd})
	
# tcflow() from the termios module
snippet tcflow
	tcflow(${1:fd}, ${2:action})
	
# tcflush() from the termios module
snippet tcflush
	tcflush(${1:fd}, ${2:queue})
	
# tcgetattr() from the termios module
snippet tcgetattr
	tcgetattr(${1:fd})
	
# tcsendbreak() from the termios module
snippet tcsendbreak
	tcsendbreak(${1:fd}, ${2:duration})
	
# tcsetattr() from the termios module
snippet tcsetattr
	tcsetattr(${1:fd,})
	
# EnvironmentVarGuard from the test module
snippet EnvironmentVarGuard
	EnvironmentVarGuard
	
# ResourceDenied from the test module
snippet ResourceDenied
	ResourceDenied
	
# SuppressCrashReport from the test module
snippet SuppressCrashReport
	SuppressCrashReport
	
# TESTFN from the test module
snippet TESTFN
	TESTFN
	
# TestFailed from the test module
snippet TestFailed
	TestFailed
	
# TransientResource from the test module
snippet TransientResource
	TransientResource(${1:exc}, ${2:**kwargs})
	
# WarningsRecorder from the test module
snippet WarningsRecorder
	WarningsRecorder
	
# anticipate_failure() from the test module
snippet anticipate_failure
	anticipate_failure(${1:condition})
	
# bind_port() from the test module
snippet bind_port
	bind_port(${1:sock}, ${2:host=HOST})
	
# can_symlink() from the test module
snippet can_symlink
	can_symlink(${1:})
	
# captured_stderr() from the test module
snippet captured_stderr
	captured_stderr(${1:})
	
# captured_stdin() from the test module
snippet captured_stdin
	captured_stdin(${1:})
	
# captured_stdout() from the test module
snippet captured_stdout
	captured_stdout(${1:})
	
# change_cwd() from the test module
snippet change_cwd
	change_cwd(${1:path}, ${2:quiet=False})
	
# check_warnings() from the test module
snippet check_warnings
	check_warnings(${1:*filters}, ${2:quiet=True})
	
# find_unused_port() from the test module
snippet find_unused_port
	find_unused_port(${1:family=socket.AF_INET}, ${2:socktype=socket.SOCK_STREAM})
	
# findfile() from the test module
snippet findfile
	findfile(${1:filename}, ${2:subdir=None})
	
# forget() from the test module
snippet forget
	forget(${1:module_name})
	
# import_fresh_module() from the test module
snippet import_fresh_module
	import_fresh_module(${1:name}, ${2:fresh=}, ${3:})
	
# import_module() from the test module
snippet import_module
	import_module(${1:name}, ${2:deprecated=False})
	
# is_jython() from the test module
snippet is_jython
	is_jython()
	
# is_resource_enabled() from the test module
snippet is_resource_enabled
	is_resource_enabled(${1:resource})
	
# load_package_tests() from the test module
snippet load_package_tests
	load_package_tests(${1:pkg_dir}, ${2:loader}, ${3:standard_tests}, ${4:pattern})
	
# make_bad_fd() from the test module
snippet make_bad_fd
	make_bad_fd(${1:})
	
# requires() from the test module
snippet requires
	requires(${1:resource}, ${2:msg=None})
	
# run_doctest() from the test module
snippet run_doctest
	run_doctest(${1:module}, ${2:verbosity=None})
	
# run_unittest() from the test module
snippet run_unittest
	run_unittest(${1:*classes})
	
# run_with_locale() from the test module
snippet run_with_locale
	run_with_locale(${1:catstr}, ${2:*locales})
	
# set() from the test module
snippet set
	set(${1:envvar}, ${2:value})
	
# skip_unless_symlink() from the test module
snippet skip_unless_symlink
	skip_unless_symlink()
	
# temp_cwd() from the test module
snippet temp_cwd
	temp_cwd(${1:name='tempcwd'}, ${2:quiet=False})
	
# temp_dir() from the test module
snippet temp_dir
	temp_dir(${1:path=None}, ${2:quiet=False})
	
# temp_umask() from the test module
snippet temp_umask
	temp_umask(${1:umask})
	
# unset() from the test module
snippet unset
	unset(${1:envvar})
	
# verbose() from the test module
snippet verbose
	verbose()
	
# EnvironmentVarGuard from the test.support module
snippet EnvironmentVarGuard
	EnvironmentVarGuard
	
# ResourceDenied from the test.support module
snippet ResourceDenied
	ResourceDenied
	
# SuppressCrashReport from the test.support module
snippet SuppressCrashReport
	SuppressCrashReport
	
# TESTFN from the test.support module
snippet TESTFN
	TESTFN
	
# TestFailed from the test.support module
snippet TestFailed
	TestFailed
	
# TransientResource from the test.support module
snippet TransientResource
	TransientResource(${1:exc}, ${2:**kwargs})
	
# WarningsRecorder from the test.support module
snippet WarningsRecorder
	WarningsRecorder
	
# anticipate_failure() from the test.support module
snippet anticipate_failure
	anticipate_failure(${1:condition})
	
# bind_port() from the test.support module
snippet bind_port
	bind_port(${1:sock}, ${2:host=HOST})
	
# can_symlink() from the test.support module
snippet can_symlink
	can_symlink(${1:})
	
# captured_stderr() from the test.support module
snippet captured_stderr
	captured_stderr(${1:})
	
# captured_stdin() from the test.support module
snippet captured_stdin
	captured_stdin(${1:})
	
# captured_stdout() from the test.support module
snippet captured_stdout
	captured_stdout(${1:})
	
# change_cwd() from the test.support module
snippet change_cwd
	change_cwd(${1:path}, ${2:quiet=False})
	
# check_warnings() from the test.support module
snippet check_warnings
	check_warnings(${1:*filters}, ${2:quiet=True})
	
# find_unused_port() from the test.support module
snippet find_unused_port
	find_unused_port(${1:family=socket.AF_INET}, ${2:socktype=socket.SOCK_STREAM})
	
# findfile() from the test.support module
snippet findfile
	findfile(${1:filename}, ${2:subdir=None})
	
# forget() from the test.support module
snippet forget
	forget(${1:module_name})
	
# import_fresh_module() from the test.support module
snippet import_fresh_module
	import_fresh_module(${1:name}, ${2:fresh=}, ${3:})
	
# import_module() from the test.support module
snippet import_module
	import_module(${1:name}, ${2:deprecated=False})
	
# is_jython() from the test.support module
snippet is_jython
	is_jython()
	
# is_resource_enabled() from the test.support module
snippet is_resource_enabled
	is_resource_enabled(${1:resource})
	
# load_package_tests() from the test.support module
snippet load_package_tests
	load_package_tests(${1:pkg_dir}, ${2:loader}, ${3:standard_tests}, ${4:pattern})
	
# make_bad_fd() from the test.support module
snippet make_bad_fd
	make_bad_fd(${1:})
	
# requires() from the test.support module
snippet requires
	requires(${1:resource}, ${2:msg=None})
	
# run_doctest() from the test.support module
snippet run_doctest
	run_doctest(${1:module}, ${2:verbosity=None})
	
# run_unittest() from the test.support module
snippet run_unittest
	run_unittest(${1:*classes})
	
# run_with_locale() from the test.support module
snippet run_with_locale
	run_with_locale(${1:catstr}, ${2:*locales})
	
# set() from the test.support module
snippet set
	set(${1:envvar}, ${2:value})
	
# skip_unless_symlink() from the test.support module
snippet skip_unless_symlink
	skip_unless_symlink()
	
# temp_cwd() from the test.support module
snippet temp_cwd
	temp_cwd(${1:name='tempcwd'}, ${2:quiet=False})
	
# temp_dir() from the test.support module
snippet temp_dir
	temp_dir(${1:path=None}, ${2:quiet=False})
	
# temp_umask() from the test.support module
snippet temp_umask
	temp_umask(${1:umask})
	
# unset() from the test.support module
snippet unset
	unset(${1:envvar})
	
# verbose() from the test.support module
snippet verbose
	verbose()
	
# TextWrapper from the textwrap module
snippet TextWrapper
	TextWrapper(${1:**kwargs})
	
# dedent() from the textwrap module
snippet dedent
	dedent(${1:text})
	
# fill() from the textwrap module
snippet fill
	fill(${1:text}, ${2:width=70}, ${3:**kwargs})
	
# indent() from the textwrap module
snippet indent
	indent(${1:text}, ${2:prefix}, ${3:predicate=None})
	
# shorten() from the textwrap module
snippet shorten
	shorten(${1:text}, ${2:width}, ${3:**kwargs})
	
# wrap() from the textwrap module
snippet wrap
	wrap(${1:text,})
	
# Barrier from the threading module
snippet Barrier
	Barrier(${1:parties}, ${2:action=None}, ${3:timeout=None})
	
# BoundedSemaphore from the threading module
snippet BoundedSemaphore
	BoundedSemaphore(${1:value=1})
	
# BrokenBarrierError from the threading module
snippet BrokenBarrierError
	BrokenBarrierError
	
# Condition from the threading module
snippet Condition
	Condition(${1:lock=None})
	
# Event from the threading module
snippet Event
	Event
	
# Lock from the threading module
snippet Lock
	Lock
	
# RLock from the threading module
snippet RLock
	RLock
	
# Semaphore from the threading module
snippet Semaphore
	Semaphore(${1:value=1})
	
# TIMEOUT_MAX from the threading module
snippet TIMEOUT_MAX
	TIMEOUT_MAX
	
# Thread from the threading module
snippet Thread
	Thread(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})
	
# Timer from the threading module
snippet Timer
	Timer(${1:interval}, ${2:function}, ${3:args=None}, ${4:kwargs=None})
	
# active_count() from the threading module
snippet active_count
	active_count(${1:})
	
# current_thread() from the threading module
snippet current_thread
	current_thread(${1:})
	
# enumerate() from the threading module
snippet enumerate
	enumerate(${1:})
	
# get_ident() from the threading module
snippet get_ident
	get_ident(${1:})
	
# local() from the threading module
snippet local
	local()
	
# main_thread() from the threading module
snippet main_thread
	main_thread(${1:})
	
# setprofile() from the threading module
snippet setprofile
	setprofile(${1:func})
	
# settrace() from the threading module
snippet settrace
	settrace(${1:func})
	
# stack_size() from the threading module
snippet stack_size
	stack_size(${1:[size]})
	
# CLOCK_HIGHRES from the time module
snippet CLOCK_HIGHRES
	CLOCK_HIGHRES
	
# CLOCK_MONOTONIC from the time module
snippet CLOCK_MONOTONIC
	CLOCK_MONOTONIC
	
# CLOCK_MONOTONIC_RAW from the time module
snippet CLOCK_MONOTONIC_RAW
	CLOCK_MONOTONIC_RAW
	
# CLOCK_PROCESS_CPUTIME_ID from the time module
snippet CLOCK_PROCESS_CPUTIME_ID
	CLOCK_PROCESS_CPUTIME_ID
	
# CLOCK_REALTIME from the time module
snippet CLOCK_REALTIME
	CLOCK_REALTIME
	
# CLOCK_THREAD_CPUTIME_ID from the time module
snippet CLOCK_THREAD_CPUTIME_ID
	CLOCK_THREAD_CPUTIME_ID
	
# altzone() from the time module
snippet altzone
	altzone()
	
# asctime() from the time module
snippet asctime
	asctime(${1:[t]})
	
# clock() from the time module
snippet clock
	clock(${1:})
	
# clock_getres() from the time module
snippet clock_getres
	clock_getres(${1:clk_id})
	
# clock_gettime() from the time module
snippet clock_gettime
	clock_gettime(${1:clk_id})
	
# clock_settime() from the time module
snippet clock_settime
	clock_settime(${1:clk_id}, ${2:time})
	
# ctime() from the time module
snippet ctime
	ctime(${1:[secs]})
	
# daylight() from the time module
snippet daylight
	daylight()
	
# get_clock_info() from the time module
snippet get_clock_info
	get_clock_info(${1:name})
	
# gmtime() from the time module
snippet gmtime
	gmtime(${1:[secs]})
	
# localtime() from the time module
snippet localtime
	localtime(${1:[secs]})
	
# mktime() from the time module
snippet mktime
	mktime(${1:t})
	
# monotonic() from the time module
snippet monotonic
	monotonic(${1:})
	
# perf_counter() from the time module
snippet perf_counter
	perf_counter(${1:})
	
# process_time() from the time module
snippet process_time
	process_time(${1:})
	
# sleep() from the time module
snippet sleep
	sleep(${1:secs})
	
# strftime() from the time module
snippet strftime
	strftime(${1:format[}, ${2:t]})
	
# strptime() from the time module
snippet strptime
	strptime(${1:string[}, ${2:format]})
	
# struct_time() from the time module
snippet struct_time
	struct_time()
	
# time() from the time module
snippet time
	time(${1:})
	
# timezone() from the time module
snippet timezone
	timezone()
	
# tzname() from the time module
snippet tzname
	tzname()
	
# tzset() from the time module
snippet tzset
	tzset(${1:})
	
# Timer from the timeit module
snippet Timer
	Timer(${1:stmt='pass'}, ${2:setup='pass'}, ${3:timer=}, ${4:globals=None})
	
# default_timer() from the timeit module
snippet default_timer
	default_timer(${1:})
	
# repeat() from the timeit module
snippet repeat
	repeat(${1:stmt='pass'}, ${2:setup='pass'}, ${3:timer=}, ${4:repeat=3}, ${5:number=1000000}, ${6:globals=None})
	
# timeit() from the timeit module
snippet timeit
	timeit(${1:stmt='pass',})
	
# EXCEPTION from the tkinter module
snippet EXCEPTION
	EXCEPTION
	
# READABLE from the tkinter module
snippet READABLE
	READABLE
	
# Tcl from the tkinter module
snippet Tcl
	Tcl(${1:screenName=None}, ${2:baseName=None}, ${3:className='Tk'}, ${4:useTk=0})
	
# Tk from the tkinter module
snippet Tk
	Tk(${1:screenName=None}, ${2:baseName=None}, ${3:className='Tk'}, ${4:useTk=1})
	
# WRITABLE from the tkinter module
snippet WRITABLE
	WRITABLE
	
# createfilehandler() from the tkinter module
snippet createfilehandler
	createfilehandler(${1:file}, ${2:mask}, ${3:func})
	
# deletefilehandler() from the tkinter module
snippet deletefilehandler
	deletefilehandler(${1:file})
	
# frame() from the tkinter.scrolledtext module
snippet frame
	frame()
	
# vbar() from the tkinter.scrolledtext module
snippet vbar
	vbar()
	
# Balloon from the tkinter.tix module
snippet Balloon
	Balloon
	
# ButtonBox from the tkinter.tix module
snippet ButtonBox
	ButtonBox
	
# CheckList from the tkinter.tix module
snippet CheckList
	CheckList
	
# ComboBox from the tkinter.tix module
snippet ComboBox
	ComboBox
	
# Control from the tkinter.tix module
snippet Control
	Control
	
# DirList from the tkinter.tix module
snippet DirList
	DirList
	
# DirSelectBox from the tkinter.tix module
snippet DirSelectBox
	DirSelectBox
	
# DirSelectDialog from the tkinter.tix module
snippet DirSelectDialog
	DirSelectDialog
	
# DirTree from the tkinter.tix module
snippet DirTree
	DirTree
	
# ExFileSelectBox from the tkinter.tix module
snippet ExFileSelectBox
	ExFileSelectBox
	
# FileEntry from the tkinter.tix module
snippet FileEntry
	FileEntry
	
# FileSelectBox from the tkinter.tix module
snippet FileSelectBox
	FileSelectBox
	
# Form from the tkinter.tix module
snippet Form
	Form
	
# HList from the tkinter.tix module
snippet HList
	HList
	
# InputOnly from the tkinter.tix module
snippet InputOnly
	InputOnly
	
# LabelEntry from the tkinter.tix module
snippet LabelEntry
	LabelEntry
	
# LabelFrame from the tkinter.tix module
snippet LabelFrame
	LabelFrame
	
# ListNoteBook from the tkinter.tix module
snippet ListNoteBook
	ListNoteBook
	
# Meter from the tkinter.tix module
snippet Meter
	Meter
	
# NoteBook from the tkinter.tix module
snippet NoteBook
	NoteBook
	
# OptionMenu from the tkinter.tix module
snippet OptionMenu
	OptionMenu
	
# PanedWindow from the tkinter.tix module
snippet PanedWindow
	PanedWindow
	
# PopupMenu from the tkinter.tix module
snippet PopupMenu
	PopupMenu
	
# Select from the tkinter.tix module
snippet Select
	Select
	
# StdButtonBox from the tkinter.tix module
snippet StdButtonBox
	StdButtonBox
	
# TList from the tkinter.tix module
snippet TList
	TList
	
# Tk from the tkinter.tix module
snippet Tk
	Tk(${1:screenName=None}, ${2:baseName=None}, ${3:className='Tix'})
	
# Tree from the tkinter.tix module
snippet Tree
	Tree
	
# tixCommand() from the tkinter.tix module
snippet tixCommand
	tixCommand()
	
# tix_addbitmapdir() from the tkinter.tix module
snippet tix_addbitmapdir
	tix_addbitmapdir(${1:directory})
	
# tix_cget() from the tkinter.tix module
snippet tix_cget
	tix_cget(${1:option})
	
# tix_configure() from the tkinter.tix module
snippet tix_configure
	tix_configure(${1:cnf=None}, ${2:**kw})
	
# tix_filedialog() from the tkinter.tix module
snippet tix_filedialog
	tix_filedialog(${1:[dlgclass]})
	
# tix_getbitmap() from the tkinter.tix module
snippet tix_getbitmap
	tix_getbitmap(${1:name})
	
# tix_getimage() from the tkinter.tix module
snippet tix_getimage
	tix_getimage(${1:self}, ${2:name})
	
# tix_option_get() from the tkinter.tix module
snippet tix_option_get
	tix_option_get(${1:name})
	
# tix_resetoptions() from the tkinter.tix module
snippet tix_resetoptions
	tix_resetoptions(${1:newScheme,})
	
# Combobox from the tkinter.ttk module
snippet Combobox
	Combobox
	
# Notebook from the tkinter.ttk module
snippet Notebook
	Notebook
	
# Progressbar from the tkinter.ttk module
snippet Progressbar
	Progressbar
	
# Style from the tkinter.ttk module
snippet Style
	Style
	
# Treeview from the tkinter.ttk module
snippet Treeview
	Treeview
	
# Widget from the tkinter.ttk module
snippet Widget
	Widget
	
# AMPER from the token module
snippet AMPER
	AMPER
	
# AMPEREQUAL from the token module
snippet AMPEREQUAL
	AMPEREQUAL
	
# ASYNC from the token module
snippet ASYNC
	ASYNC
	
# AT from the token module
snippet AT
	AT
	
# ATEQUAL from the token module
snippet ATEQUAL
	ATEQUAL
	
# AWAIT from the token module
snippet AWAIT
	AWAIT
	
# CIRCUMFLEX from the token module
snippet CIRCUMFLEX
	CIRCUMFLEX
	
# CIRCUMFLEXEQUAL from the token module
snippet CIRCUMFLEXEQUAL
	CIRCUMFLEXEQUAL
	
# COLON from the token module
snippet COLON
	COLON
	
# COMMA from the token module
snippet COMMA
	COMMA
	
# DEDENT from the token module
snippet DEDENT
	DEDENT
	
# DOT from the token module
snippet DOT
	DOT
	
# DOUBLESLASH from the token module
snippet DOUBLESLASH
	DOUBLESLASH
	
# DOUBLESLASHEQUAL from the token module
snippet DOUBLESLASHEQUAL
	DOUBLESLASHEQUAL
	
# DOUBLESTAR from the token module
snippet DOUBLESTAR
	DOUBLESTAR
	
# DOUBLESTAREQUAL from the token module
snippet DOUBLESTAREQUAL
	DOUBLESTAREQUAL
	
# ELLIPSIS from the token module
snippet ELLIPSIS
	ELLIPSIS
	
# ENDMARKER from the token module
snippet ENDMARKER
	ENDMARKER
	
# EQEQUAL from the token module
snippet EQEQUAL
	EQEQUAL
	
# EQUAL from the token module
snippet EQUAL
	EQUAL
	
# ERRORTOKEN from the token module
snippet ERRORTOKEN
	ERRORTOKEN
	
# GREATER from the token module
snippet GREATER
	GREATER
	
# GREATEREQUAL from the token module
snippet GREATEREQUAL
	GREATEREQUAL
	
# INDENT from the token module
snippet INDENT
	INDENT
	
# ISEOF from the token module
snippet ISEOF
	ISEOF(${1:x})
	
# ISNONTERMINAL from the token module
snippet ISNONTERMINAL
	ISNONTERMINAL(${1:x})
	
# ISTERMINAL from the token module
snippet ISTERMINAL
	ISTERMINAL(${1:x})
	
# LBRACE from the token module
snippet LBRACE
	LBRACE
	
# LEFTSHIFT from the token module
snippet LEFTSHIFT
	LEFTSHIFT
	
# LEFTSHIFTEQUAL from the token module
snippet LEFTSHIFTEQUAL
	LEFTSHIFTEQUAL
	
# LESS from the token module
snippet LESS
	LESS
	
# LESSEQUAL from the token module
snippet LESSEQUAL
	LESSEQUAL
	
# LPAR from the token module
snippet LPAR
	LPAR
	
# LSQB from the token module
snippet LSQB
	LSQB
	
# MINEQUAL from the token module
snippet MINEQUAL
	MINEQUAL
	
# MINUS from the token module
snippet MINUS
	MINUS
	
# NAME from the token module
snippet NAME
	NAME
	
# NEWLINE from the token module
snippet NEWLINE
	NEWLINE
	
# NOTEQUAL from the token module
snippet NOTEQUAL
	NOTEQUAL
	
# NT_OFFSET from the token module
snippet NT_OFFSET
	NT_OFFSET
	
# NUMBER from the token module
snippet NUMBER
	NUMBER
	
# N_TOKENS from the token module
snippet N_TOKENS
	N_TOKENS
	
# OP from the token module
snippet OP
	OP
	
# PERCENT from the token module
snippet PERCENT
	PERCENT
	
# PERCENTEQUAL from the token module
snippet PERCENTEQUAL
	PERCENTEQUAL
	
# PLUS from the token module
snippet PLUS
	PLUS
	
# PLUSEQUAL from the token module
snippet PLUSEQUAL
	PLUSEQUAL
	
# RARROW from the token module
snippet RARROW
	RARROW
	
# RBRACE from the token module
snippet RBRACE
	RBRACE
	
# RIGHTSHIFT from the token module
snippet RIGHTSHIFT
	RIGHTSHIFT
	
# RIGHTSHIFTEQUAL from the token module
snippet RIGHTSHIFTEQUAL
	RIGHTSHIFTEQUAL
	
# RPAR from the token module
snippet RPAR
	RPAR
	
# RSQB from the token module
snippet RSQB
	RSQB
	
# SEMI from the token module
snippet SEMI
	SEMI
	
# SLASH from the token module
snippet SLASH
	SLASH
	
# SLASHEQUAL from the token module
snippet SLASHEQUAL
	SLASHEQUAL
	
# STAR from the token module
snippet STAR
	STAR
	
# STAREQUAL from the token module
snippet STAREQUAL
	STAREQUAL
	
# STRING from the token module
snippet STRING
	STRING
	
# TILDE from the token module
snippet TILDE
	TILDE
	
# VBAR from the token module
snippet VBAR
	VBAR
	
# VBAREQUAL from the token module
snippet VBAREQUAL
	VBAREQUAL
	
# tok_name() from the token module
snippet tok_name
	tok_name()
	
# COMMENT from the tokenize module
snippet COMMENT
	COMMENT
	
# ENCODING from the tokenize module
snippet ENCODING
	ENCODING
	
# NL from the tokenize module
snippet NL
	NL
	
# TokenError from the tokenize module
snippet TokenError
	TokenError
	
# detect_encoding() from the tokenize module
snippet detect_encoding
	detect_encoding(${1:readline})
	
# open() from the tokenize module
snippet open
	open(${1:filename})
	
# tokenize() from the tokenize module
snippet tokenize
	tokenize(${1:readline})
	
# untokenize() from the tokenize module
snippet untokenize
	untokenize(${1:iterable})
	
# CoverageResults from the trace module
snippet CoverageResults
	CoverageResults
	
# Trace from the trace module
snippet Trace
	Trace(${1:count=1,})
	
# FrameSummary from the traceback module
snippet FrameSummary
	FrameSummary(${1:filename}, ${2:lineno}, ${3:name}, ${4:lookup_line=True}, ${5:locals=None}, ${6:line=None})
	
# StackSummary from the traceback module
snippet StackSummary
	StackSummary
	
# TracebackException from the traceback module
snippet TracebackException
	TracebackException(${1:exc_type}, ${2:exc_value}, ${3:exc_traceback}, ${4:*}, ${5:limit=None}, ${6:lookup_lines=True}, ${7:capture_locals=False})
	
# clear_frames() from the traceback module
snippet clear_frames
	clear_frames(${1:tb})
	
# extract_stack() from the traceback module
snippet extract_stack
	extract_stack(${1:f=None}, ${2:limit=None})
	
# extract_tb() from the traceback module
snippet extract_tb
	extract_tb(${1:tb}, ${2:limit=None})
	
# format_exc() from the traceback module
snippet format_exc
	format_exc(${1:limit=None}, ${2:chain=True})
	
# format_exception() from the traceback module
snippet format_exception
	format_exception(${1:etype}, ${2:value}, ${3:tb}, ${4:limit=None}, ${5:chain=True})
	
# format_exception_only() from the traceback module
snippet format_exception_only
	format_exception_only(${1:etype}, ${2:value})
	
# format_list() from the traceback module
snippet format_list
	format_list(${1:extracted_list})
	
# format_stack() from the traceback module
snippet format_stack
	format_stack(${1:f=None}, ${2:limit=None})
	
# format_tb() from the traceback module
snippet format_tb
	format_tb(${1:tb}, ${2:limit=None})
	
# print_exc() from the traceback module
snippet print_exc
	print_exc(${1:limit=None}, ${2:file=None}, ${3:chain=True})
	
# print_exception() from the traceback module
snippet print_exception
	print_exception(${1:etype}, ${2:value}, ${3:tb}, ${4:limit=None}, ${5:file=None}, ${6:chain=True})
	
# print_last() from the traceback module
snippet print_last
	print_last(${1:limit=None}, ${2:file=None}, ${3:chain=True})
	
# print_stack() from the traceback module
snippet print_stack
	print_stack(${1:f=None}, ${2:limit=None}, ${3:file=None})
	
# print_tb() from the traceback module
snippet print_tb
	print_tb(${1:tb}, ${2:limit=None}, ${3:file=None})
	
# walk_stack() from the traceback module
snippet walk_stack
	walk_stack(${1:f})
	
# walk_tb() from the traceback module
snippet walk_tb
	walk_tb(${1:tb})
	
# Filter from the tracemalloc module
snippet Filter
	Filter(${1:inclusive: bool}, ${2:filename_pattern: str}, ${3:lineno: int=None}, ${4:all_frames: bool=False})
	
# Frame from the tracemalloc module
snippet Frame
	Frame
	
# Snapshot from the tracemalloc module
snippet Snapshot
	Snapshot
	
# Statistic from the tracemalloc module
snippet Statistic
	Statistic
	
# StatisticDiff from the tracemalloc module
snippet StatisticDiff
	StatisticDiff
	
# Trace from the tracemalloc module
snippet Trace
	Trace
	
# Traceback from the tracemalloc module
snippet Traceback
	Traceback
	
# clear_traces() from the tracemalloc module
snippet clear_traces
	clear_traces(${1:})
	
# get_object_traceback() from the tracemalloc module
snippet get_object_traceback
	get_object_traceback(${1:obj})
	
# get_traceback_limit() from the tracemalloc module
snippet get_traceback_limit
	get_traceback_limit(${1:})
	
# get_traced_memory() from the tracemalloc module
snippet get_traced_memory
	get_traced_memory(${1:})
	
# get_tracemalloc_memory() from the tracemalloc module
snippet get_tracemalloc_memory
	get_tracemalloc_memory(${1:})
	
# is_tracing() from the tracemalloc module
snippet is_tracing
	is_tracing(${1:})
	
# start() from the tracemalloc module
snippet start
	start(${1:nframe: int=1})
	
# stop() from the tracemalloc module
snippet stop
	stop(${1:})
	
# take_snapshot() from the tracemalloc module
snippet take_snapshot
	take_snapshot(${1:})
	
# setcbreak() from the tty module
snippet setcbreak
	setcbreak(${1:fd}, ${2:when=termios.TCSAFLUSH})
	
# setraw() from the tty module
snippet setraw
	setraw(${1:fd,})
	
# RawPen from the turtle module
snippet RawPen
	RawPen(${1:canvas})
	
# RawTurtle from the turtle module
snippet RawTurtle
	RawTurtle(${1:canvas})
	
# Screen from the turtle module
snippet Screen
	Screen
	
# ScrolledCanvas from the turtle module
snippet ScrolledCanvas
	ScrolledCanvas(${1:master})
	
# Shape from the turtle module
snippet Shape
	Shape(${1:type_}, ${2:data})
	
# Turtle from the turtle module
snippet Turtle
	Turtle
	
# TurtleScreen from the turtle module
snippet TurtleScreen
	TurtleScreen(${1:cv})
	
# Vec2D from the turtle module
snippet Vec2D
	Vec2D(${1:x}, ${2:y})
	
# addshape() from the turtle module
snippet addshape
	addshape(${1:name}, ${2:shape=None})
	
# back() from the turtle module
snippet back
	back(${1:distance})
	
# backward() from the turtle module
snippet backward
	backward(${1:distance})
	
# begin_fill() from the turtle module
snippet begin_fill
	begin_fill(${1:})
	
# begin_poly() from the turtle module
snippet begin_poly
	begin_poly(${1:})
	
# bgcolor() from the turtle module
snippet bgcolor
	bgcolor(${1:*args})
	
# bgpic() from the turtle module
snippet bgpic
	bgpic(${1:picname=None})
	
# bk() from the turtle module
snippet bk
	bk(${1:distance})
	
# bye() from the turtle module
snippet bye
	bye(${1:})
	
# circle() from the turtle module
snippet circle
	circle(${1:radius}, ${2:extent=None}, ${3:steps=None})
	
# clear() from the turtle module
snippet clear
	clear(${1:})
	
# clearstamp() from the turtle module
snippet clearstamp
	clearstamp(${1:stampid})
	
# clearstamps() from the turtle module
snippet clearstamps
	clearstamps(${1:n=None})
	
# clone() from the turtle module
snippet clone
	clone(${1:})
	
# color() from the turtle module
snippet color
	color(${1:*args})
	
# colormode() from the turtle module
snippet colormode
	colormode(${1:cmode=None})
	
# degrees() from the turtle module
snippet degrees
	degrees(${1:fullcircle=360.0})
	
# delay() from the turtle module
snippet delay
	delay(${1:delay=None})
	
# distance() from the turtle module
snippet distance
	distance(${1:x}, ${2:y=None})
	
# done() from the turtle module
snippet done
	done(${1:})
	
# dot() from the turtle module
snippet dot
	dot(${1:size=None}, ${2:*color})
	
# down() from the turtle module
snippet down
	down(${1:})
	
# end_fill() from the turtle module
snippet end_fill
	end_fill(${1:})
	
# end_poly() from the turtle module
snippet end_poly
	end_poly(${1:})
	
# exitonclick() from the turtle module
snippet exitonclick
	exitonclick(${1:})
	
# fd() from the turtle module
snippet fd
	fd(${1:distance})
	
# fillcolor() from the turtle module
snippet fillcolor
	fillcolor(${1:*args})
	
# filling() from the turtle module
snippet filling
	filling(${1:})
	
# forward() from the turtle module
snippet forward
	forward(${1:distance})
	
# get_poly() from the turtle module
snippet get_poly
	get_poly(${1:})
	
# get_shapepoly() from the turtle module
snippet get_shapepoly
	get_shapepoly(${1:})
	
# getcanvas() from the turtle module
snippet getcanvas
	getcanvas(${1:})
	
# getpen() from the turtle module
snippet getpen
	getpen(${1:})
	
# getscreen() from the turtle module
snippet getscreen
	getscreen(${1:})
	
# getshapes() from the turtle module
snippet getshapes
	getshapes(${1:})
	
# getturtle() from the turtle module
snippet getturtle
	getturtle(${1:})
	
# goto() from the turtle module
snippet goto
	goto(${1:x}, ${2:y=None})
	
# heading() from the turtle module
snippet heading
	heading(${1:})
	
# hideturtle() from the turtle module
snippet hideturtle
	hideturtle(${1:})
	
# home() from the turtle module
snippet home
	home(${1:})
	
# ht() from the turtle module
snippet ht
	ht(${1:})
	
# isdown() from the turtle module
snippet isdown
	isdown(${1:})
	
# isvisible() from the turtle module
snippet isvisible
	isvisible(${1:})
	
# left() from the turtle module
snippet left
	left(${1:angle})
	
# listen() from the turtle module
snippet listen
	listen(${1:xdummy=None}, ${2:ydummy=None})
	
# lt() from the turtle module
snippet lt
	lt(${1:angle})
	
# mainloop() from the turtle module
snippet mainloop
	mainloop(${1:})
	
# mode() from the turtle module
snippet mode
	mode(${1:mode=None})
	
# numinput() from the turtle module
snippet numinput
	numinput(${1:title}, ${2:prompt}, ${3:default=None}, ${4:minval=None}, ${5:maxval=None})
	
# onclick() from the turtle module
snippet onclick
	onclick(${1:fun}, ${2:btn=1}, ${3:add=None})
	
# ondrag() from the turtle module
snippet ondrag
	ondrag(${1:fun}, ${2:btn=1}, ${3:add=None})
	
# onkey() from the turtle module
snippet onkey
	onkey(${1:fun}, ${2:key})
	
# onkeypress() from the turtle module
snippet onkeypress
	onkeypress(${1:fun}, ${2:key=None})
	
# onkeyrelease() from the turtle module
snippet onkeyrelease
	onkeyrelease(${1:fun}, ${2:key})
	
# onrelease() from the turtle module
snippet onrelease
	onrelease(${1:fun}, ${2:btn=1}, ${3:add=None})
	
# ontimer() from the turtle module
snippet ontimer
	ontimer(${1:fun}, ${2:t=0})
	
# pd() from the turtle module
snippet pd
	pd(${1:})
	
# pen() from the turtle module
snippet pen
	pen(${1:pen=None}, ${2:**pendict})
	
# pencolor() from the turtle module
snippet pencolor
	pencolor(${1:*args})
	
# pendown() from the turtle module
snippet pendown
	pendown(${1:})
	
# pensize() from the turtle module
snippet pensize
	pensize(${1:width=None})
	
# penup() from the turtle module
snippet penup
	penup(${1:})
	
# pos() from the turtle module
snippet pos
	pos(${1:})
	
# position() from the turtle module
snippet position
	position(${1:})
	
# pu() from the turtle module
snippet pu
	pu(${1:})
	
# radians() from the turtle module
snippet radians
	radians(${1:})
	
# register_shape() from the turtle module
snippet register_shape
	register_shape(${1:name}, ${2:shape=None})
	
# reset() from the turtle module
snippet reset
	reset(${1:})
	
# resizemode() from the turtle module
snippet resizemode
	resizemode(${1:rmode=None})
	
# right() from the turtle module
snippet right
	right(${1:angle})
	
# rt() from the turtle module
snippet rt
	rt(${1:angle})
	
# screensize() from the turtle module
snippet screensize
	screensize(${1:canvwidth=None}, ${2:canvheight=None}, ${3:bg=None})
	
# seth() from the turtle module
snippet seth
	seth(${1:to_angle})
	
# setheading() from the turtle module
snippet setheading
	setheading(${1:to_angle})
	
# setpos() from the turtle module
snippet setpos
	setpos(${1:x}, ${2:y=None})
	
# setposition() from the turtle module
snippet setposition
	setposition(${1:x}, ${2:y=None})
	
# settiltangle() from the turtle module
snippet settiltangle
	settiltangle(${1:angle})
	
# setundobuffer() from the turtle module
snippet setundobuffer
	setundobuffer(${1:size})
	
# setup() from the turtle module
snippet setup
	setup(${1:width=_CFG["width"]}, ${2:height=_CFG["height"]}, ${3:startx=_CFG["leftright"]}, ${4:starty=_CFG["topbottom"]})
	
# setworldcoordinates() from the turtle module
snippet setworldcoordinates
	setworldcoordinates(${1:llx}, ${2:lly}, ${3:urx}, ${4:ury})
	
# setx() from the turtle module
snippet setx
	setx(${1:x})
	
# sety() from the turtle module
snippet sety
	sety(${1:y})
	
# shape() from the turtle module
snippet shape
	shape(${1:name=None})
	
# shapesize() from the turtle module
snippet shapesize
	shapesize(${1:stretch_wid=None}, ${2:stretch_len=None}, ${3:outline=None})
	
# shapetransform() from the turtle module
snippet shapetransform
	shapetransform(${1:t11=None}, ${2:t12=None}, ${3:t21=None}, ${4:t22=None})
	
# shearfactor() from the turtle module
snippet shearfactor
	shearfactor(${1:shear=None})
	
# showturtle() from the turtle module
snippet showturtle
	showturtle(${1:})
	
# speed() from the turtle module
snippet speed
	speed(${1:speed=None})
	
# st() from the turtle module
snippet st
	st(${1:})
	
# stamp() from the turtle module
snippet stamp
	stamp(${1:})
	
# textinput() from the turtle module
snippet textinput
	textinput(${1:title}, ${2:prompt})
	
# tilt() from the turtle module
snippet tilt
	tilt(${1:angle})
	
# tiltangle() from the turtle module
snippet tiltangle
	tiltangle(${1:angle=None})
	
# title() from the turtle module
snippet title
	title(${1:titlestring})
	
# towards() from the turtle module
snippet towards
	towards(${1:x}, ${2:y=None})
	
# tracer() from the turtle module
snippet tracer
	tracer(${1:n=None}, ${2:delay=None})
	
# turtles() from the turtle module
snippet turtles
	turtles(${1:})
	
# turtlesize() from the turtle module
snippet turtlesize
	turtlesize(${1:stretch_wid=None}, ${2:stretch_len=None}, ${3:outline=None})
	
# undo() from the turtle module
snippet undo
	undo(${1:})
	
# undobufferentries() from the turtle module
snippet undobufferentries
	undobufferentries(${1:})
	
# up() from the turtle module
snippet up
	up(${1:})
	
# update() from the turtle module
snippet update
	update(${1:})
	
# width() from the turtle module
snippet width
	width(${1:width=None})
	
# window_height() from the turtle module
snippet window_height
	window_height(${1:})
	
# window_width() from the turtle module
snippet window_width
	window_width(${1:})
	
# write() from the turtle module
snippet write
	write(${1:arg}, ${2:move=False}, ${3:align="left"}, ${4:font=}, ${5:"Arial"}, ${6:8}, ${7:"normal"})
	
# write_docstringdict() from the turtle module
snippet write_docstringdict
	write_docstringdict(${1:filename="turtle_docstringdict"})
	
# xcor() from the turtle module
snippet xcor
	xcor(${1:})
	
# ycor() from the turtle module
snippet ycor
	ycor(${1:})
	
# RawPen from the turtledemo module
snippet RawPen
	RawPen(${1:canvas})
	
# RawTurtle from the turtledemo module
snippet RawTurtle
	RawTurtle(${1:canvas})
	
# Screen from the turtledemo module
snippet Screen
	Screen
	
# ScrolledCanvas from the turtledemo module
snippet ScrolledCanvas
	ScrolledCanvas(${1:master})
	
# Shape from the turtledemo module
snippet Shape
	Shape(${1:type_}, ${2:data})
	
# Turtle from the turtledemo module
snippet Turtle
	Turtle
	
# TurtleScreen from the turtledemo module
snippet TurtleScreen
	TurtleScreen(${1:cv})
	
# Vec2D from the turtledemo module
snippet Vec2D
	Vec2D(${1:x}, ${2:y})
	
# addshape() from the turtledemo module
snippet addshape
	addshape(${1:name}, ${2:shape=None})
	
# back() from the turtledemo module
snippet back
	back(${1:distance})
	
# backward() from the turtledemo module
snippet backward
	backward(${1:distance})
	
# begin_fill() from the turtledemo module
snippet begin_fill
	begin_fill(${1:})
	
# begin_poly() from the turtledemo module
snippet begin_poly
	begin_poly(${1:})
	
# bgcolor() from the turtledemo module
snippet bgcolor
	bgcolor(${1:*args})
	
# bgpic() from the turtledemo module
snippet bgpic
	bgpic(${1:picname=None})
	
# bk() from the turtledemo module
snippet bk
	bk(${1:distance})
	
# bye() from the turtledemo module
snippet bye
	bye(${1:})
	
# circle() from the turtledemo module
snippet circle
	circle(${1:radius}, ${2:extent=None}, ${3:steps=None})
	
# clear() from the turtledemo module
snippet clear
	clear(${1:})
	
# clearstamp() from the turtledemo module
snippet clearstamp
	clearstamp(${1:stampid})
	
# clearstamps() from the turtledemo module
snippet clearstamps
	clearstamps(${1:n=None})
	
# clone() from the turtledemo module
snippet clone
	clone(${1:})
	
# color() from the turtledemo module
snippet color
	color(${1:*args})
	
# colormode() from the turtledemo module
snippet colormode
	colormode(${1:cmode=None})
	
# degrees() from the turtledemo module
snippet degrees
	degrees(${1:fullcircle=360.0})
	
# delay() from the turtledemo module
snippet delay
	delay(${1:delay=None})
	
# distance() from the turtledemo module
snippet distance
	distance(${1:x}, ${2:y=None})
	
# done() from the turtledemo module
snippet done
	done(${1:})
	
# dot() from the turtledemo module
snippet dot
	dot(${1:size=None}, ${2:*color})
	
# down() from the turtledemo module
snippet down
	down(${1:})
	
# end_fill() from the turtledemo module
snippet end_fill
	end_fill(${1:})
	
# end_poly() from the turtledemo module
snippet end_poly
	end_poly(${1:})
	
# exitonclick() from the turtledemo module
snippet exitonclick
	exitonclick(${1:})
	
# fd() from the turtledemo module
snippet fd
	fd(${1:distance})
	
# fillcolor() from the turtledemo module
snippet fillcolor
	fillcolor(${1:*args})
	
# filling() from the turtledemo module
snippet filling
	filling(${1:})
	
# forward() from the turtledemo module
snippet forward
	forward(${1:distance})
	
# get_poly() from the turtledemo module
snippet get_poly
	get_poly(${1:})
	
# get_shapepoly() from the turtledemo module
snippet get_shapepoly
	get_shapepoly(${1:})
	
# getcanvas() from the turtledemo module
snippet getcanvas
	getcanvas(${1:})
	
# getpen() from the turtledemo module
snippet getpen
	getpen(${1:})
	
# getscreen() from the turtledemo module
snippet getscreen
	getscreen(${1:})
	
# getshapes() from the turtledemo module
snippet getshapes
	getshapes(${1:})
	
# getturtle() from the turtledemo module
snippet getturtle
	getturtle(${1:})
	
# goto() from the turtledemo module
snippet goto
	goto(${1:x}, ${2:y=None})
	
# heading() from the turtledemo module
snippet heading
	heading(${1:})
	
# hideturtle() from the turtledemo module
snippet hideturtle
	hideturtle(${1:})
	
# home() from the turtledemo module
snippet home
	home(${1:})
	
# ht() from the turtledemo module
snippet ht
	ht(${1:})
	
# isdown() from the turtledemo module
snippet isdown
	isdown(${1:})
	
# isvisible() from the turtledemo module
snippet isvisible
	isvisible(${1:})
	
# left() from the turtledemo module
snippet left
	left(${1:angle})
	
# listen() from the turtledemo module
snippet listen
	listen(${1:xdummy=None}, ${2:ydummy=None})
	
# lt() from the turtledemo module
snippet lt
	lt(${1:angle})
	
# mainloop() from the turtledemo module
snippet mainloop
	mainloop(${1:})
	
# mode() from the turtledemo module
snippet mode
	mode(${1:mode=None})
	
# numinput() from the turtledemo module
snippet numinput
	numinput(${1:title}, ${2:prompt}, ${3:default=None}, ${4:minval=None}, ${5:maxval=None})
	
# onclick() from the turtledemo module
snippet onclick
	onclick(${1:fun}, ${2:btn=1}, ${3:add=None})
	
# ondrag() from the turtledemo module
snippet ondrag
	ondrag(${1:fun}, ${2:btn=1}, ${3:add=None})
	
# onkey() from the turtledemo module
snippet onkey
	onkey(${1:fun}, ${2:key})
	
# onkeypress() from the turtledemo module
snippet onkeypress
	onkeypress(${1:fun}, ${2:key=None})
	
# onkeyrelease() from the turtledemo module
snippet onkeyrelease
	onkeyrelease(${1:fun}, ${2:key})
	
# onrelease() from the turtledemo module
snippet onrelease
	onrelease(${1:fun}, ${2:btn=1}, ${3:add=None})
	
# ontimer() from the turtledemo module
snippet ontimer
	ontimer(${1:fun}, ${2:t=0})
	
# pd() from the turtledemo module
snippet pd
	pd(${1:})
	
# pen() from the turtledemo module
snippet pen
	pen(${1:pen=None}, ${2:**pendict})
	
# pencolor() from the turtledemo module
snippet pencolor
	pencolor(${1:*args})
	
# pendown() from the turtledemo module
snippet pendown
	pendown(${1:})
	
# pensize() from the turtledemo module
snippet pensize
	pensize(${1:width=None})
	
# penup() from the turtledemo module
snippet penup
	penup(${1:})
	
# pos() from the turtledemo module
snippet pos
	pos(${1:})
	
# position() from the turtledemo module
snippet position
	position(${1:})
	
# pu() from the turtledemo module
snippet pu
	pu(${1:})
	
# radians() from the turtledemo module
snippet radians
	radians(${1:})
	
# register_shape() from the turtledemo module
snippet register_shape
	register_shape(${1:name}, ${2:shape=None})
	
# reset() from the turtledemo module
snippet reset
	reset(${1:})
	
# resizemode() from the turtledemo module
snippet resizemode
	resizemode(${1:rmode=None})
	
# right() from the turtledemo module
snippet right
	right(${1:angle})
	
# rt() from the turtledemo module
snippet rt
	rt(${1:angle})
	
# screensize() from the turtledemo module
snippet screensize
	screensize(${1:canvwidth=None}, ${2:canvheight=None}, ${3:bg=None})
	
# seth() from the turtledemo module
snippet seth
	seth(${1:to_angle})
	
# setheading() from the turtledemo module
snippet setheading
	setheading(${1:to_angle})
	
# setpos() from the turtledemo module
snippet setpos
	setpos(${1:x}, ${2:y=None})
	
# setposition() from the turtledemo module
snippet setposition
	setposition(${1:x}, ${2:y=None})
	
# settiltangle() from the turtledemo module
snippet settiltangle
	settiltangle(${1:angle})
	
# setundobuffer() from the turtledemo module
snippet setundobuffer
	setundobuffer(${1:size})
	
# setup() from the turtledemo module
snippet setup
	setup(${1:width=_CFG["width"]}, ${2:height=_CFG["height"]}, ${3:startx=_CFG["leftright"]}, ${4:starty=_CFG["topbottom"]})
	
# setworldcoordinates() from the turtledemo module
snippet setworldcoordinates
	setworldcoordinates(${1:llx}, ${2:lly}, ${3:urx}, ${4:ury})
	
# setx() from the turtledemo module
snippet setx
	setx(${1:x})
	
# sety() from the turtledemo module
snippet sety
	sety(${1:y})
	
# shape() from the turtledemo module
snippet shape
	shape(${1:name=None})
	
# shapesize() from the turtledemo module
snippet shapesize
	shapesize(${1:stretch_wid=None}, ${2:stretch_len=None}, ${3:outline=None})
	
# shapetransform() from the turtledemo module
snippet shapetransform
	shapetransform(${1:t11=None}, ${2:t12=None}, ${3:t21=None}, ${4:t22=None})
	
# shearfactor() from the turtledemo module
snippet shearfactor
	shearfactor(${1:shear=None})
	
# showturtle() from the turtledemo module
snippet showturtle
	showturtle(${1:})
	
# speed() from the turtledemo module
snippet speed
	speed(${1:speed=None})
	
# st() from the turtledemo module
snippet st
	st(${1:})
	
# stamp() from the turtledemo module
snippet stamp
	stamp(${1:})
	
# textinput() from the turtledemo module
snippet textinput
	textinput(${1:title}, ${2:prompt})
	
# tilt() from the turtledemo module
snippet tilt
	tilt(${1:angle})
	
# tiltangle() from the turtledemo module
snippet tiltangle
	tiltangle(${1:angle=None})
	
# title() from the turtledemo module
snippet title
	title(${1:titlestring})
	
# towards() from the turtledemo module
snippet towards
	towards(${1:x}, ${2:y=None})
	
# tracer() from the turtledemo module
snippet tracer
	tracer(${1:n=None}, ${2:delay=None})
	
# turtles() from the turtledemo module
snippet turtles
	turtles(${1:})
	
# turtlesize() from the turtledemo module
snippet turtlesize
	turtlesize(${1:stretch_wid=None}, ${2:stretch_len=None}, ${3:outline=None})
	
# undo() from the turtledemo module
snippet undo
	undo(${1:})
	
# undobufferentries() from the turtledemo module
snippet undobufferentries
	undobufferentries(${1:})
	
# up() from the turtledemo module
snippet up
	up(${1:})
	
# update() from the turtledemo module
snippet update
	update(${1:})
	
# width() from the turtledemo module
snippet width
	width(${1:width=None})
	
# window_height() from the turtledemo module
snippet window_height
	window_height(${1:})
	
# window_width() from the turtledemo module
snippet window_width
	window_width(${1:})
	
# write() from the turtledemo module
snippet write
	write(${1:arg}, ${2:move=False}, ${3:align="left"}, ${4:font=}, ${5:"Arial"}, ${6:8}, ${7:"normal"})
	
# write_docstringdict() from the turtledemo module
snippet write_docstringdict
	write_docstringdict(${1:filename="turtle_docstringdict"})
	
# xcor() from the turtledemo module
snippet xcor
	xcor(${1:})
	
# ycor() from the turtledemo module
snippet ycor
	ycor(${1:})
	
# BuiltinFunctionType from the types module
snippet BuiltinFunctionType
	BuiltinFunctionType
	
# BuiltinMethodType from the types module
snippet BuiltinMethodType
	BuiltinMethodType
	
# CodeType from the types module
snippet CodeType
	CodeType
	
# CoroutineType from the types module
snippet CoroutineType
	CoroutineType
	
# DynamicClassAttribute from the types module
snippet DynamicClassAttribute
	DynamicClassAttribute(${1:fget=None}, ${2:fset=None}, ${3:fdel=None}, ${4:doc=None})
	
# FrameType from the types module
snippet FrameType
	FrameType
	
# FunctionType from the types module
snippet FunctionType
	FunctionType
	
# GeneratorType from the types module
snippet GeneratorType
	GeneratorType
	
# GetSetDescriptorType from the types module
snippet GetSetDescriptorType
	GetSetDescriptorType
	
# LambdaType from the types module
snippet LambdaType
	LambdaType
	
# MappingProxyType from the types module
snippet MappingProxyType
	MappingProxyType(${1:mapping})
	
# MemberDescriptorType from the types module
snippet MemberDescriptorType
	MemberDescriptorType
	
# MethodType from the types module
snippet MethodType
	MethodType
	
# ModuleType from the types module
snippet ModuleType
	ModuleType(${1:name}, ${2:doc=None})
	
# SimpleNamespace from the types module
snippet SimpleNamespace
	SimpleNamespace
	
# TracebackType from the types module
snippet TracebackType
	TracebackType
	
# coroutine() from the types module
snippet coroutine
	coroutine(${1:gen_func})
	
# new_class() from the types module
snippet new_class
	new_class(${1:name}, ${2:bases=}, ${3:})
	
# prepare_class() from the types module
snippet prepare_class
	prepare_class(${1:name,})
	
# AbstractSet from the typing module
snippet AbstractSet
	AbstractSet(${1:set}, ${2:MutableSet[T]})
	
# Any from the typing module
snippet Any
	Any
	
# ByteString from the typing module
snippet ByteString
	ByteString(${1:Sequence[int]})
	
# Callable from the typing module
snippet Callable
	Callable
	
# Container from the typing module
snippet Container
	Container(${1:Generic[T_co]})
	
# Dict from the typing module
snippet Dict
	Dict(${1:dict}, ${2:MutableMapping[KT}, ${3:VT]})
	
# Generator from the typing module
snippet Generator
	Generator(${1:Iterator[T_co]}, ${2:Generic[T_co}, ${3:T_contra}, ${4:V_co]})
	
# Generic from the typing module
snippet Generic
	Generic
	
# ItemsView from the typing module
snippet ItemsView
	ItemsView(${1:MappingView}, ${2:Generic[KT_co}, ${3:VT_co]})
	
# Iterable from the typing module
snippet Iterable
	Iterable(${1:Generic[T_co]})
	
# Iterator from the typing module
snippet Iterator
	Iterator(${1:Iterable[T_co]})
	
# KeysView from the typing module
snippet KeysView
	KeysView(${1:MappingView[KT_co]}, ${2:AbstractSet[KT_co]})
	
# List from the typing module
snippet List
	List(${1:list}, ${2:MutableSequence[T]})
	
# Mapping from the typing module
snippet Mapping
	Mapping(${1:Sized}, ${2:Iterable[KT]}, ${3:Container[KT]}, ${4:Generic[VT_co]})
	
# MappingView from the typing module
snippet MappingView
	MappingView(${1:Sized}, ${2:Iterable[T_co]})
	
# MutableMapping from the typing module
snippet MutableMapping
	MutableMapping(${1:Mapping[KT}, ${2:VT]})
	
# MutableSequence from the typing module
snippet MutableSequence
	MutableSequence(${1:Sequence[T]})
	
# MutableSet from the typing module
snippet MutableSet
	MutableSet(${1:AbstractSet[T]})
	
# NamedTuple from the typing module
snippet NamedTuple
	NamedTuple(${1:typename}, ${2:fields})
	
# Optional from the typing module
snippet Optional
	Optional
	
# Reversible from the typing module
snippet Reversible
	Reversible
	
# Sequence from the typing module
snippet Sequence
	Sequence(${1:Sized}, ${2:Iterable[T_co]}, ${3:Container[T_co]})
	
# SupportsAbs from the typing module
snippet SupportsAbs
	SupportsAbs
	
# SupportsFloat from the typing module
snippet SupportsFloat
	SupportsFloat
	
# SupportsInt from the typing module
snippet SupportsInt
	SupportsInt
	
# SupportsRound from the typing module
snippet SupportsRound
	SupportsRound
	
# Tuple from the typing module
snippet Tuple
	Tuple
	
# TypeVar from the typing module
snippet TypeVar
	TypeVar
	
# Union from the typing module
snippet Union
	Union
	
# ValuesView from the typing module
snippet ValuesView
	ValuesView(${1:MappingView[VT_co]})
	
# cast() from the typing module
snippet cast
	cast(${1:typ}, ${2:val})
	
# get_type_hints() from the typing module
snippet get_type_hints
	get_type_hints(${1:obj})
	
# io() from the typing module
snippet io
	io()
	
# no_type_check() from the typing module
snippet no_type_check
	no_type_check(${1:arg})
	
# no_type_check_decorator() from the typing module
snippet no_type_check_decorator
	no_type_check_decorator(${1:decorator})
	
# re() from the typing module
snippet re
	re()
	
# bidirectional() from the unicodedata module
snippet bidirectional
	bidirectional(${1:chr})
	
# category() from the unicodedata module
snippet category
	category(${1:chr})
	
# combining() from the unicodedata module
snippet combining
	combining(${1:chr})
	
# decimal() from the unicodedata module
snippet decimal
	decimal(${1:chr[}, ${2:default]})
	
# decomposition() from the unicodedata module
snippet decomposition
	decomposition(${1:chr})
	
# digit() from the unicodedata module
snippet digit
	digit(${1:chr[}, ${2:default]})
	
# east_asian_width() from the unicodedata module
snippet east_asian_width
	east_asian_width(${1:chr})
	
# lookup() from the unicodedata module
snippet lookup
	lookup(${1:name})
	
# mirrored() from the unicodedata module
snippet mirrored
	mirrored(${1:chr})
	
# name() from the unicodedata module
snippet name
	name(${1:chr[}, ${2:default]})
	
# normalize() from the unicodedata module
snippet normalize
	normalize(${1:form}, ${2:unistr})
	
# numeric() from the unicodedata module
snippet numeric
	numeric(${1:chr[}, ${2:default]})
	
# ucd_3_2_0() from the unicodedata module
snippet ucd_3_2_0
	ucd_3_2_0()
	
# unidata_version() from the unicodedata module
snippet unidata_version
	unidata_version()
	
# FunctionTestCase from the unittest module
snippet FunctionTestCase
	FunctionTestCase(${1:testFunc}, ${2:setUp=None}, ${3:tearDown=None}, ${4:description=None})
	
# SkipTest from the unittest module
snippet SkipTest
	SkipTest(${1:reason})
	
# TestCase from the unittest module
snippet TestCase
	TestCase(${1:methodName='runTest'})
	
# TestLoader from the unittest module
snippet TestLoader
	TestLoader
	
# TestResult from the unittest module
snippet TestResult
	TestResult
	
# TestSuite from the unittest module
snippet TestSuite
	TestSuite(${1:tests=}, ${2:})
	
# TextTestResult from the unittest module
snippet TextTestResult
	TextTestResult(${1:stream}, ${2:descriptions}, ${3:verbosity})
	
# TextTestRunner from the unittest module
snippet TextTestRunner
	TextTestRunner(${1:stream=None}, ${2:descriptions=True}, ${3:verbosity=1}, ${4:failfast=False}, ${5:buffer=False}, ${6:resultclass=None}, ${7:warnings=None}, ${8:*}, ${9:tb_locals=False})
	
# defaultTestLoader() from the unittest module
snippet defaultTestLoader
	defaultTestLoader()
	
# expectedFailure() from the unittest module
snippet expectedFailure
	expectedFailure()
	
# installHandler() from the unittest module
snippet installHandler
	installHandler(${1:})
	
# main() from the unittest module
snippet main
	main(${1:module='__main__'}, ${2:defaultTest=None}, ${3:argv=None}, ${4:testRunner=None}, ${5:testLoader=unittest.defaultTestLoader}, ${6:exit=True}, ${7:verbosity=1}, ${8:failfast=None}, ${9:catchbreak=None}, ${10:buffer=None}, ${11:warnings=None})
	
# registerResult() from the unittest module
snippet registerResult
	registerResult(${1:result})
	
# removeHandler() from the unittest module
snippet removeHandler
	removeHandler(${1:function=None})
	
# removeResult() from the unittest module
snippet removeResult
	removeResult(${1:result})
	
# skip() from the unittest module
snippet skip
	skip(${1:reason})
	
# skipIf() from the unittest module
snippet skipIf
	skipIf(${1:condition}, ${2:reason})
	
# skipUnless() from the unittest module
snippet skipUnless
	skipUnless(${1:condition,})
	
# ANY from the unittest.mock module
snippet ANY
	ANY
	
# DEFAULT from the unittest.mock module
snippet DEFAULT
	DEFAULT
	
# FILTER_DIR from the unittest.mock module
snippet FILTER_DIR
	FILTER_DIR
	
# MagicMock from the unittest.mock module
snippet MagicMock
	MagicMock(${1:*args}, ${2:**kw})
	
# Mock from the unittest.mock module
snippet Mock
	Mock(${1:spec=None}, ${2:side_effect=None}, ${3:return_value=DEFAULT}, ${4:wraps=None}, ${5:name=None}, ${6:spec_set=None}, ${7:unsafe=False}, ${8:**kwargs})
	
# NonCallableMagicMock from the unittest.mock module
snippet NonCallableMagicMock
	NonCallableMagicMock(${1:*args}, ${2:**kw})
	
# NonCallableMock from the unittest.mock module
snippet NonCallableMock
	NonCallableMock(${1:spec=None}, ${2:wraps=None}, ${3:name=None}, ${4:spec_set=None}, ${5:**kwargs})
	
# PropertyMock from the unittest.mock module
snippet PropertyMock
	PropertyMock(${1:*args}, ${2:**kwargs})
	
# call() from the unittest.mock module
snippet call
	call(${1:*args}, ${2:**kwargs})
	
# call_list() from the unittest.mock module
snippet call_list
	call_list(${1:})
	
# create_autospec() from the unittest.mock module
snippet create_autospec
	create_autospec(${1:spec}, ${2:spec_set=False}, ${3:instance=False}, ${4:**kwargs})
	
# dict() from the unittest.mock module
snippet dict
	dict(${1:in_dict}, ${2:values=}, ${3:})
	
# mock_open() from the unittest.mock module
snippet mock_open
	mock_open(${1:mock=None}, ${2:read_data=None})
	
# multiple() from the unittest.mock module
snippet multiple
	multiple(${1:target}, ${2:spec=None}, ${3:create=False}, ${4:spec_set=None}, ${5:autospec=None}, ${6:new_callable=None}, ${7:**kwargs})
	
# object() from the unittest.mock module
snippet object
	object(${1:target}, ${2:attribute}, ${3:new=DEFAULT}, ${4:spec=None}, ${5:create=False}, ${6:spec_set=None}, ${7:autospec=None}, ${8:new_callable=None}, ${9:**kwargs})
	
# patch() from the unittest.mock module
snippet patch
	patch(${1:target}, ${2:new=DEFAULT}, ${3:spec=None}, ${4:create=False}, ${5:spec_set=None}, ${6:autospec=None}, ${7:new_callable=None}, ${8:**kwargs})
	
# sentinel() from the unittest.mock module
snippet sentinel
	sentinel()
	
# stopall() from the unittest.mock module
snippet stopall
	stopall(${1:})
	
# ContentTooShortError from the urllib.error module
snippet ContentTooShortError
	ContentTooShortError(${1:msg}, ${2:content})
	
# HTTPError from the urllib.error module
snippet HTTPError
	HTTPError
	
# URLError from the urllib.error module
snippet URLError
	URLError
	
# DefragResult from the urllib.parse module
snippet DefragResult
	DefragResult(${1:url}, ${2:fragment})
	
# DefragResultBytes from the urllib.parse module
snippet DefragResultBytes
	DefragResultBytes(${1:url}, ${2:fragment})
	
# ParseResult from the urllib.parse module
snippet ParseResult
	ParseResult(${1:scheme}, ${2:netloc}, ${3:path}, ${4:params}, ${5:query}, ${6:fragment})
	
# ParseResultBytes from the urllib.parse module
snippet ParseResultBytes
	ParseResultBytes(${1:scheme}, ${2:netloc}, ${3:path}, ${4:params}, ${5:query}, ${6:fragment})
	
# SplitResult from the urllib.parse module
snippet SplitResult
	SplitResult(${1:scheme}, ${2:netloc}, ${3:path}, ${4:query}, ${5:fragment})
	
# SplitResultBytes from the urllib.parse module
snippet SplitResultBytes
	SplitResultBytes(${1:scheme}, ${2:netloc}, ${3:path}, ${4:query}, ${5:fragment})
	
# geturl() from the urllib.parse module
snippet geturl
	geturl(${1:})
	
# parse_qs() from the urllib.parse module
snippet parse_qs
	parse_qs(${1:qs}, ${2:keep_blank_values=False}, ${3:strict_parsing=False}, ${4:encoding='utf-8'}, ${5:errors='replace'})
	
# parse_qsl() from the urllib.parse module
snippet parse_qsl
	parse_qsl(${1:qs}, ${2:keep_blank_values=False}, ${3:strict_parsing=False}, ${4:encoding='utf-8'}, ${5:errors='replace'})
	
# quote() from the urllib.parse module
snippet quote
	quote(${1:string}, ${2:safe='/'}, ${3:encoding=None}, ${4:errors=None})
	
# quote_from_bytes() from the urllib.parse module
snippet quote_from_bytes
	quote_from_bytes(${1:bytes}, ${2:safe='/'})
	
# quote_plus() from the urllib.parse module
snippet quote_plus
	quote_plus(${1:string}, ${2:safe=''}, ${3:encoding=None}, ${4:errors=None})
	
# unquote() from the urllib.parse module
snippet unquote
	unquote(${1:string}, ${2:encoding='utf-8'}, ${3:errors='replace'})
	
# unquote_plus() from the urllib.parse module
snippet unquote_plus
	unquote_plus(${1:string}, ${2:encoding='utf-8'}, ${3:errors='replace'})
	
# unquote_to_bytes() from the urllib.parse module
snippet unquote_to_bytes
	unquote_to_bytes(${1:string})
	
# urldefrag() from the urllib.parse module
snippet urldefrag
	urldefrag(${1:url})
	
# urlencode() from the urllib.parse module
snippet urlencode
	urlencode(${1:query}, ${2:doseq=False}, ${3:safe=''}, ${4:encoding=None}, ${5:errors=None}, ${6:quote_via=quote_plus})
	
# urljoin() from the urllib.parse module
snippet urljoin
	urljoin(${1:base}, ${2:url}, ${3:allow_fragments=True})
	
# urlparse() from the urllib.parse module
snippet urlparse
	urlparse(${1:urlstring}, ${2:scheme=''}, ${3:allow_fragments=True})
	
# urlsplit() from the urllib.parse module
snippet urlsplit
	urlsplit(${1:urlstring}, ${2:scheme=''}, ${3:allow_fragments=True})
	
# urlunparse() from the urllib.parse module
snippet urlunparse
	urlunparse(${1:parts})
	
# urlunsplit() from the urllib.parse module
snippet urlunsplit
	urlunsplit(${1:parts})
	
# AbstractBasicAuthHandler from the urllib.request module
snippet AbstractBasicAuthHandler
	AbstractBasicAuthHandler(${1:password_mgr=None})
	
# AbstractDigestAuthHandler from the urllib.request module
snippet AbstractDigestAuthHandler
	AbstractDigestAuthHandler(${1:password_mgr=None})
	
# BaseHandler from the urllib.request module
snippet BaseHandler
	BaseHandler
	
# CacheFTPHandler from the urllib.request module
snippet CacheFTPHandler
	CacheFTPHandler
	
# DataHandler from the urllib.request module
snippet DataHandler
	DataHandler
	
# FTPHandler from the urllib.request module
snippet FTPHandler
	FTPHandler
	
# FancyURLopener from the urllib.request module
snippet FancyURLopener
	FancyURLopener(${1:...})
	
# FileHandler from the urllib.request module
snippet FileHandler
	FileHandler
	
# HTTPBasicAuthHandler from the urllib.request module
snippet HTTPBasicAuthHandler
	HTTPBasicAuthHandler(${1:password_mgr=None})
	
# HTTPCookieProcessor from the urllib.request module
snippet HTTPCookieProcessor
	HTTPCookieProcessor(${1:cookiejar=None})
	
# HTTPDefaultErrorHandler from the urllib.request module
snippet HTTPDefaultErrorHandler
	HTTPDefaultErrorHandler
	
# HTTPDigestAuthHandler from the urllib.request module
snippet HTTPDigestAuthHandler
	HTTPDigestAuthHandler(${1:password_mgr=None})
	
# HTTPErrorProcessor from the urllib.request module
snippet HTTPErrorProcessor
	HTTPErrorProcessor
	
# HTTPHandler from the urllib.request module
snippet HTTPHandler
	HTTPHandler
	
# HTTPPasswordMgr from the urllib.request module
snippet HTTPPasswordMgr
	HTTPPasswordMgr
	
# HTTPPasswordMgrWithDefaultRealm from the urllib.request module
snippet HTTPPasswordMgrWithDefaultRealm
	HTTPPasswordMgrWithDefaultRealm
	
# HTTPPasswordMgrWithPriorAuth from the urllib.request module
snippet HTTPPasswordMgrWithPriorAuth
	HTTPPasswordMgrWithPriorAuth
	
# HTTPRedirectHandler from the urllib.request module
snippet HTTPRedirectHandler
	HTTPRedirectHandler
	
# HTTPSHandler from the urllib.request module
snippet HTTPSHandler
	HTTPSHandler(${1:debuglevel=0}, ${2:context=None}, ${3:check_hostname=None})
	
# OpenerDirector from the urllib.request module
snippet OpenerDirector
	OpenerDirector
	
# ProxyBasicAuthHandler from the urllib.request module
snippet ProxyBasicAuthHandler
	ProxyBasicAuthHandler(${1:password_mgr=None})
	
# ProxyDigestAuthHandler from the urllib.request module
snippet ProxyDigestAuthHandler
	ProxyDigestAuthHandler(${1:password_mgr=None})
	
# ProxyHandler from the urllib.request module
snippet ProxyHandler
	ProxyHandler(${1:proxies=None})
	
# Request from the urllib.request module
snippet Request
	Request(${1:url}, ${2:data=None}, ${3:headers={}}, ${4:origin_req_host=None}, ${5:unverifiable=False}, ${6:method=None})
	
# URLopener from the urllib.request module
snippet URLopener
	URLopener(${1:proxies=None}, ${2:**x509})
	
# UnknownHandler from the urllib.request module
snippet UnknownHandler
	UnknownHandler
	
# add_handler() from the urllib.request module
snippet add_handler
	add_handler(${1:handler})
	
# add_header() from the urllib.request module
snippet add_header
	add_header(${1:key}, ${2:val})
	
# add_parent() from the urllib.request module
snippet add_parent
	add_parent(${1:director})
	
# add_password() from the urllib.request module
snippet add_password
	add_password(${1:realm}, ${2:uri}, ${3:user}, ${4:passwd})
	
# add_unredirected_header() from the urllib.request module
snippet add_unredirected_header
	add_unredirected_header(${1:key}, ${2:header})
	
# build_opener() from the urllib.request module
snippet build_opener
	build_opener(${1:[handler}, ${2:...]})
	
# close() from the urllib.request module
snippet close
	close(${1:})
	
# cookiejar() from the urllib.request module
snippet cookiejar
	cookiejar()
	
# data() from the urllib.request module
snippet data
	data()
	
# data_open() from the urllib.request module
snippet data_open
	data_open(${1:req})
	
# default_open() from the urllib.request module
snippet default_open
	default_open(${1:req})
	
# error() from the urllib.request module
snippet error
	error(${1:proto}, ${2:*args})
	
# file_open() from the urllib.request module
snippet file_open
	file_open(${1:req})
	
# find_user_password() from the urllib.request module
snippet find_user_password
	find_user_password(${1:realm}, ${2:authuri})
	
# ftp_open() from the urllib.request module
snippet ftp_open
	ftp_open(${1:req})
	
# full_url() from the urllib.request module
snippet full_url
	full_url()
	
# get_full_url() from the urllib.request module
snippet get_full_url
	get_full_url(${1:})
	
# get_header() from the urllib.request module
snippet get_header
	get_header(${1:header_name}, ${2:default=None})
	
# get_method() from the urllib.request module
snippet get_method
	get_method(${1:})
	
# getproxies() from the urllib.request module
snippet getproxies
	getproxies(${1:})
	
# has_header() from the urllib.request module
snippet has_header
	has_header(${1:header})
	
# header_items() from the urllib.request module
snippet header_items
	header_items(${1:})
	
# host() from the urllib.request module
snippet host
	host()
	
# http_error_301() from the urllib.request module
snippet http_error_301
	http_error_301(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_302() from the urllib.request module
snippet http_error_302
	http_error_302(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_303() from the urllib.request module
snippet http_error_303
	http_error_303(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_307() from the urllib.request module
snippet http_error_307
	http_error_307(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_401() from the urllib.request module
snippet http_error_401
	http_error_401(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_407() from the urllib.request module
snippet http_error_407
	http_error_407(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_auth_reqed() from the urllib.request module
snippet http_error_auth_reqed
	http_error_auth_reqed(${1:authreq}, ${2:host}, ${3:req}, ${4:headers})
	
# http_error_default() from the urllib.request module
snippet http_error_default
	http_error_default(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_nnn() from the urllib.request module
snippet http_error_nnn
	http_error_nnn(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_open() from the urllib.request module
snippet http_open
	http_open(${1:req})
	
# http_response() from the urllib.request module
snippet http_response
	http_response(${1:})
	
# https_open() from the urllib.request module
snippet https_open
	https_open(${1:req})
	
# https_response() from the urllib.request module
snippet https_response
	https_response(${1:})
	
# install_opener() from the urllib.request module
snippet install_opener
	install_opener(${1:opener})
	
# is_authenticated() from the urllib.request module
snippet is_authenticated
	is_authenticated(${1:self}, ${2:authuri})
	
# method() from the urllib.request module
snippet method
	method()
	
# open() from the urllib.request module
snippet open
	open(${1:url}, ${2:data=None[}, ${3:timeout]})
	
# origin_req_host() from the urllib.request module
snippet origin_req_host
	origin_req_host()
	
# parent() from the urllib.request module
snippet parent
	parent()
	
# pathname2url() from the urllib.request module
snippet pathname2url
	pathname2url(${1:path})
	
# protocol_open() from the urllib.request module
snippet protocol_open
	protocol_open(${1:request})
	
# protocol_request() from the urllib.request module
snippet protocol_request
	protocol_request(${1:req})
	
# protocol_response() from the urllib.request module
snippet protocol_response
	protocol_response(${1:req}, ${2:response})
	
# redirect_request() from the urllib.request module
snippet redirect_request
	redirect_request(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs}, ${6:newurl})
	
# remove_header() from the urllib.request module
snippet remove_header
	remove_header(${1:header})
	
# selector() from the urllib.request module
snippet selector
	selector()
	
# setMaxConns() from the urllib.request module
snippet setMaxConns
	setMaxConns(${1:m})
	
# setTimeout() from the urllib.request module
snippet setTimeout
	setTimeout(${1:t})
	
# set_proxy() from the urllib.request module
snippet set_proxy
	set_proxy(${1:host}, ${2:type})
	
# type() from the urllib.request module
snippet type
	type()
	
# unknown_open() from the urllib.request module
snippet unknown_open
	unknown_open(${1:})
	
# unverifiable() from the urllib.request module
snippet unverifiable
	unverifiable()
	
# update_authenticated() from the urllib.request module
snippet update_authenticated
	update_authenticated(${1:self}, ${2:uri}, ${3:is_authenticated=False})
	
# url2pathname() from the urllib.request module
snippet url2pathname
	url2pathname(${1:path})
	
# urlcleanup() from the urllib.request module
snippet urlcleanup
	urlcleanup(${1:})
	
# urlopen() from the urllib.request module
snippet urlopen
	urlopen(${1:url}, ${2:data=None}, ${3:[timeout}, ${4:]*}, ${5:cafile=None}, ${6:capath=None}, ${7:cadefault=False}, ${8:context=None})
	
# urlretrieve() from the urllib.request module
snippet urlretrieve
	urlretrieve(${1:url,})
	
# AbstractBasicAuthHandler from the urllib.response module
snippet AbstractBasicAuthHandler
	AbstractBasicAuthHandler(${1:password_mgr=None})
	
# AbstractDigestAuthHandler from the urllib.response module
snippet AbstractDigestAuthHandler
	AbstractDigestAuthHandler(${1:password_mgr=None})
	
# BaseHandler from the urllib.response module
snippet BaseHandler
	BaseHandler
	
# CacheFTPHandler from the urllib.response module
snippet CacheFTPHandler
	CacheFTPHandler
	
# DataHandler from the urllib.response module
snippet DataHandler
	DataHandler
	
# FTPHandler from the urllib.response module
snippet FTPHandler
	FTPHandler
	
# FancyURLopener from the urllib.response module
snippet FancyURLopener
	FancyURLopener(${1:...})
	
# FileHandler from the urllib.response module
snippet FileHandler
	FileHandler
	
# HTTPBasicAuthHandler from the urllib.response module
snippet HTTPBasicAuthHandler
	HTTPBasicAuthHandler(${1:password_mgr=None})
	
# HTTPCookieProcessor from the urllib.response module
snippet HTTPCookieProcessor
	HTTPCookieProcessor(${1:cookiejar=None})
	
# HTTPDefaultErrorHandler from the urllib.response module
snippet HTTPDefaultErrorHandler
	HTTPDefaultErrorHandler
	
# HTTPDigestAuthHandler from the urllib.response module
snippet HTTPDigestAuthHandler
	HTTPDigestAuthHandler(${1:password_mgr=None})
	
# HTTPErrorProcessor from the urllib.response module
snippet HTTPErrorProcessor
	HTTPErrorProcessor
	
# HTTPHandler from the urllib.response module
snippet HTTPHandler
	HTTPHandler
	
# HTTPPasswordMgr from the urllib.response module
snippet HTTPPasswordMgr
	HTTPPasswordMgr
	
# HTTPPasswordMgrWithDefaultRealm from the urllib.response module
snippet HTTPPasswordMgrWithDefaultRealm
	HTTPPasswordMgrWithDefaultRealm
	
# HTTPPasswordMgrWithPriorAuth from the urllib.response module
snippet HTTPPasswordMgrWithPriorAuth
	HTTPPasswordMgrWithPriorAuth
	
# HTTPRedirectHandler from the urllib.response module
snippet HTTPRedirectHandler
	HTTPRedirectHandler
	
# HTTPSHandler from the urllib.response module
snippet HTTPSHandler
	HTTPSHandler(${1:debuglevel=0}, ${2:context=None}, ${3:check_hostname=None})
	
# OpenerDirector from the urllib.response module
snippet OpenerDirector
	OpenerDirector
	
# ProxyBasicAuthHandler from the urllib.response module
snippet ProxyBasicAuthHandler
	ProxyBasicAuthHandler(${1:password_mgr=None})
	
# ProxyDigestAuthHandler from the urllib.response module
snippet ProxyDigestAuthHandler
	ProxyDigestAuthHandler(${1:password_mgr=None})
	
# ProxyHandler from the urllib.response module
snippet ProxyHandler
	ProxyHandler(${1:proxies=None})
	
# Request from the urllib.response module
snippet Request
	Request(${1:url}, ${2:data=None}, ${3:headers={}}, ${4:origin_req_host=None}, ${5:unverifiable=False}, ${6:method=None})
	
# URLopener from the urllib.response module
snippet URLopener
	URLopener(${1:proxies=None}, ${2:**x509})
	
# UnknownHandler from the urllib.response module
snippet UnknownHandler
	UnknownHandler
	
# add_handler() from the urllib.response module
snippet add_handler
	add_handler(${1:handler})
	
# add_header() from the urllib.response module
snippet add_header
	add_header(${1:key}, ${2:val})
	
# add_parent() from the urllib.response module
snippet add_parent
	add_parent(${1:director})
	
# add_password() from the urllib.response module
snippet add_password
	add_password(${1:realm}, ${2:uri}, ${3:user}, ${4:passwd})
	
# add_unredirected_header() from the urllib.response module
snippet add_unredirected_header
	add_unredirected_header(${1:key}, ${2:header})
	
# build_opener() from the urllib.response module
snippet build_opener
	build_opener(${1:[handler}, ${2:...]})
	
# close() from the urllib.response module
snippet close
	close(${1:})
	
# cookiejar() from the urllib.response module
snippet cookiejar
	cookiejar()
	
# data() from the urllib.response module
snippet data
	data()
	
# data_open() from the urllib.response module
snippet data_open
	data_open(${1:req})
	
# default_open() from the urllib.response module
snippet default_open
	default_open(${1:req})
	
# error() from the urllib.response module
snippet error
	error(${1:proto}, ${2:*args})
	
# file_open() from the urllib.response module
snippet file_open
	file_open(${1:req})
	
# find_user_password() from the urllib.response module
snippet find_user_password
	find_user_password(${1:realm}, ${2:authuri})
	
# ftp_open() from the urllib.response module
snippet ftp_open
	ftp_open(${1:req})
	
# full_url() from the urllib.response module
snippet full_url
	full_url()
	
# get_full_url() from the urllib.response module
snippet get_full_url
	get_full_url(${1:})
	
# get_header() from the urllib.response module
snippet get_header
	get_header(${1:header_name}, ${2:default=None})
	
# get_method() from the urllib.response module
snippet get_method
	get_method(${1:})
	
# getproxies() from the urllib.response module
snippet getproxies
	getproxies(${1:})
	
# has_header() from the urllib.response module
snippet has_header
	has_header(${1:header})
	
# header_items() from the urllib.response module
snippet header_items
	header_items(${1:})
	
# host() from the urllib.response module
snippet host
	host()
	
# http_error_301() from the urllib.response module
snippet http_error_301
	http_error_301(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_302() from the urllib.response module
snippet http_error_302
	http_error_302(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_303() from the urllib.response module
snippet http_error_303
	http_error_303(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_307() from the urllib.response module
snippet http_error_307
	http_error_307(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_401() from the urllib.response module
snippet http_error_401
	http_error_401(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_407() from the urllib.response module
snippet http_error_407
	http_error_407(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_auth_reqed() from the urllib.response module
snippet http_error_auth_reqed
	http_error_auth_reqed(${1:authreq}, ${2:host}, ${3:req}, ${4:headers})
	
# http_error_default() from the urllib.response module
snippet http_error_default
	http_error_default(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_error_nnn() from the urllib.response module
snippet http_error_nnn
	http_error_nnn(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})
	
# http_open() from the urllib.response module
snippet http_open
	http_open(${1:req})
	
# http_response() from the urllib.response module
snippet http_response
	http_response(${1:})
	
# https_open() from the urllib.response module
snippet https_open
	https_open(${1:req})
	
# https_response() from the urllib.response module
snippet https_response
	https_response(${1:})
	
# install_opener() from the urllib.response module
snippet install_opener
	install_opener(${1:opener})
	
# is_authenticated() from the urllib.response module
snippet is_authenticated
	is_authenticated(${1:self}, ${2:authuri})
	
# method() from the urllib.response module
snippet method
	method()
	
# open() from the urllib.response module
snippet open
	open(${1:url}, ${2:data=None[}, ${3:timeout]})
	
# origin_req_host() from the urllib.response module
snippet origin_req_host
	origin_req_host()
	
# parent() from the urllib.response module
snippet parent
	parent()
	
# pathname2url() from the urllib.response module
snippet pathname2url
	pathname2url(${1:path})
	
# protocol_open() from the urllib.response module
snippet protocol_open
	protocol_open(${1:request})
	
# protocol_request() from the urllib.response module
snippet protocol_request
	protocol_request(${1:req})
	
# protocol_response() from the urllib.response module
snippet protocol_response
	protocol_response(${1:req}, ${2:response})
	
# redirect_request() from the urllib.response module
snippet redirect_request
	redirect_request(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs}, ${6:newurl})
	
# remove_header() from the urllib.response module
snippet remove_header
	remove_header(${1:header})
	
# selector() from the urllib.response module
snippet selector
	selector()
	
# setMaxConns() from the urllib.response module
snippet setMaxConns
	setMaxConns(${1:m})
	
# setTimeout() from the urllib.response module
snippet setTimeout
	setTimeout(${1:t})
	
# set_proxy() from the urllib.response module
snippet set_proxy
	set_proxy(${1:host}, ${2:type})
	
# type() from the urllib.response module
snippet type
	type()
	
# unknown_open() from the urllib.response module
snippet unknown_open
	unknown_open(${1:})
	
# unverifiable() from the urllib.response module
snippet unverifiable
	unverifiable()
	
# update_authenticated() from the urllib.response module
snippet update_authenticated
	update_authenticated(${1:self}, ${2:uri}, ${3:is_authenticated=False})
	
# url2pathname() from the urllib.response module
snippet url2pathname
	url2pathname(${1:path})
	
# urlcleanup() from the urllib.response module
snippet urlcleanup
	urlcleanup(${1:})
	
# urlopen() from the urllib.response module
snippet urlopen
	urlopen(${1:url}, ${2:data=None}, ${3:[timeout}, ${4:]*}, ${5:cafile=None}, ${6:capath=None}, ${7:cadefault=False}, ${8:context=None})
	
# urlretrieve() from the urllib.response module
snippet urlretrieve
	urlretrieve(${1:url,})
	
# RobotFileParser from the urllib.robotparser module
snippet RobotFileParser
	RobotFileParser(${1:url=''})
	
# Error from the uu module
snippet Error
	Error
	
# decode() from the uu module
snippet decode
	decode(${1:in_file}, ${2:out_file=None}, ${3:mode=None}, ${4:quiet=False})
	
# encode() from the uu module
snippet encode
	encode(${1:in_file,})
	
# NAMESPACE_DNS from the uuid module
snippet NAMESPACE_DNS
	NAMESPACE_DNS
	
# NAMESPACE_OID from the uuid module
snippet NAMESPACE_OID
	NAMESPACE_OID
	
# NAMESPACE_URL from the uuid module
snippet NAMESPACE_URL
	NAMESPACE_URL
	
# NAMESPACE_X500 from the uuid module
snippet NAMESPACE_X500
	NAMESPACE_X500
	
# RESERVED_FUTURE from the uuid module
snippet RESERVED_FUTURE
	RESERVED_FUTURE
	
# RESERVED_MICROSOFT from the uuid module
snippet RESERVED_MICROSOFT
	RESERVED_MICROSOFT
	
# RESERVED_NCS from the uuid module
snippet RESERVED_NCS
	RESERVED_NCS
	
# RFC_4122 from the uuid module
snippet RFC_4122
	RFC_4122
	
# UUID from the uuid module
snippet UUID
	UUID(${1:hex=None}, ${2:bytes=None}, ${3:bytes_le=None}, ${4:fields=None}, ${5:int=None}, ${6:version=None})
	
# bytes() from the uuid module
snippet bytes
	bytes()
	
# bytes_le() from the uuid module
snippet bytes_le
	bytes_le()
	
# fields() from the uuid module
snippet fields
	fields()
	
# getnode() from the uuid module
snippet getnode
	getnode(${1:})
	
# hex() from the uuid module
snippet hex
	hex()
	
# int() from the uuid module
snippet int
	int()
	
# urn() from the uuid module
snippet urn
	urn()
	
# uuid1() from the uuid module
snippet uuid1
	uuid1(${1:node=None}, ${2:clock_seq=None})
	
# uuid3() from the uuid module
snippet uuid3
	uuid3(${1:namespace}, ${2:name})
	
# uuid4() from the uuid module
snippet uuid4
	uuid4(${1:})
	
# uuid5() from the uuid module
snippet uuid5
	uuid5(${1:namespace}, ${2:name})
	
# variant() from the uuid module
snippet variant
	variant()
	
# version() from the uuid module
snippet version
	version()
	
# EnvBuilder from the venv module
snippet EnvBuilder
	EnvBuilder(${1:system_site_packages=False}, ${2:clear=False}, ${3:symlinks=False}, ${4:upgrade=False}, ${5:with_pip=False})
	
# create() from the venv module
snippet create
	create(${1:env_dir,})
	
# catch_warnings() from the warnings module
snippet catch_warnings
	catch_warnings(${1:*}, ${2:record=False}, ${3:module=None})
	
# filterwarnings() from the warnings module
snippet filterwarnings
	filterwarnings(${1:action}, ${2:message=''}, ${3:category=Warning}, ${4:module=''}, ${5:lineno=0}, ${6:append=False})
	
# formatwarning() from the warnings module
snippet formatwarning
	formatwarning(${1:message}, ${2:category}, ${3:filename}, ${4:lineno}, ${5:line=None})
	
# resetwarnings() from the warnings module
snippet resetwarnings
	resetwarnings(${1:})
	
# showwarning() from the warnings module
snippet showwarning
	showwarning(${1:message}, ${2:category}, ${3:filename}, ${4:lineno}, ${5:file=None}, ${6:line=None})
	
# simplefilter() from the warnings module
snippet simplefilter
	simplefilter(${1:action}, ${2:category=Warning}, ${3:lineno=0}, ${4:append=False})
	
# warn() from the warnings module
snippet warn
	warn(${1:message}, ${2:category=None}, ${3:stacklevel=1})
	
# warn_explicit() from the warnings module
snippet warn_explicit
	warn_explicit(${1:message,})
	
# Error from the wave module
snippet Error
	Error
	
# close() from the wave module
snippet close
	close(${1:})
	
# getcompname() from the wave module
snippet getcompname
	getcompname(${1:})
	
# getcomptype() from the wave module
snippet getcomptype
	getcomptype(${1:})
	
# getframerate() from the wave module
snippet getframerate
	getframerate(${1:})
	
# getmark() from the wave module
snippet getmark
	getmark(${1:id})
	
# getmarkers() from the wave module
snippet getmarkers
	getmarkers(${1:})
	
# getnchannels() from the wave module
snippet getnchannels
	getnchannels(${1:})
	
# getnframes() from the wave module
snippet getnframes
	getnframes(${1:})
	
# getparams() from the wave module
snippet getparams
	getparams(${1:})
	
# getsampwidth() from the wave module
snippet getsampwidth
	getsampwidth(${1:})
	
# open() from the wave module
snippet open
	open(${1:file}, ${2:mode=None})
	
# openfp() from the wave module
snippet openfp
	openfp(${1:file}, ${2:mode})
	
# readframes() from the wave module
snippet readframes
	readframes(${1:n})
	
# rewind() from the wave module
snippet rewind
	rewind(${1:})
	
# setcomptype() from the wave module
snippet setcomptype
	setcomptype(${1:type}, ${2:name})
	
# setframerate() from the wave module
snippet setframerate
	setframerate(${1:n})
	
# setnchannels() from the wave module
snippet setnchannels
	setnchannels(${1:n})
	
# setnframes() from the wave module
snippet setnframes
	setnframes(${1:n})
	
# setparams() from the wave module
snippet setparams
	setparams(${1:tuple})
	
# setpos() from the wave module
snippet setpos
	setpos(${1:pos})
	
# setsampwidth() from the wave module
snippet setsampwidth
	setsampwidth(${1:n})
	
# tell() from the wave module
snippet tell
	tell(${1:})
	
# writeframes() from the wave module
snippet writeframes
	writeframes(${1:data})
	
# writeframesraw() from the wave module
snippet writeframesraw
	writeframesraw(${1:data})
	
# CallableProxyType from the weakref module
snippet CallableProxyType
	CallableProxyType
	
# ProxyType from the weakref module
snippet ProxyType
	ProxyType
	
# ProxyTypes from the weakref module
snippet ProxyTypes
	ProxyTypes
	
# ReferenceError from the weakref module
snippet ReferenceError
	ReferenceError
	
# ReferenceType from the weakref module
snippet ReferenceType
	ReferenceType
	
# WeakKeyDictionary from the weakref module
snippet WeakKeyDictionary
	WeakKeyDictionary(${1:[dict]})
	
# WeakMethod from the weakref module
snippet WeakMethod
	WeakMethod(${1:method})
	
# WeakSet from the weakref module
snippet WeakSet
	WeakSet(${1:[elements]})
	
# WeakValueDictionary from the weakref module
snippet WeakValueDictionary
	WeakValueDictionary(${1:[dict]})
	
# finalize() from the weakref module
snippet finalize
	finalize(${1:obj}, ${2:func}, ${3:*args}, ${4:**kwargs})
	
# getweakrefcount() from the weakref module
snippet getweakrefcount
	getweakrefcount(${1:object})
	
# getweakrefs() from the weakref module
snippet getweakrefs
	getweakrefs(${1:object})
	
# keyrefs() from the weakref module
snippet keyrefs
	keyrefs(${1:})
	
# proxy() from the weakref module
snippet proxy
	proxy(${1:object[}, ${2:callback]})
	
# ref() from the weakref module
snippet ref
	ref(${1:object[}, ${2:callback]})
	
# valuerefs() from the weakref module
snippet valuerefs
	valuerefs(${1:})
	
# Error from the webbrowser module
snippet Error
	Error
	
# get() from the webbrowser module
snippet get
	get(${1:using=None})
	
# open() from the webbrowser module
snippet open
	open(${1:url}, ${2:new=0}, ${3:autoraise=True})
	
# open_new() from the webbrowser module
snippet open_new
	open_new(${1:url})
	
# open_new_tab() from the webbrowser module
snippet open_new_tab
	open_new_tab(${1:url})
	
# register() from the webbrowser module
snippet register
	register(${1:name,})
	
# Close from the winreg module
snippet Close
	Close(${1:})
	
# CloseKey from the winreg module
snippet CloseKey
	CloseKey(${1:hkey})
	
# ConnectRegistry from the winreg module
snippet ConnectRegistry
	ConnectRegistry(${1:computer_name}, ${2:key})
	
# CreateKey from the winreg module
snippet CreateKey
	CreateKey(${1:key}, ${2:sub_key})
	
# CreateKeyEx from the winreg module
snippet CreateKeyEx
	CreateKeyEx(${1:key}, ${2:sub_key}, ${3:reserved=0}, ${4:access=KEY_WRITE})
	
# DeleteKey from the winreg module
snippet DeleteKey
	DeleteKey(${1:key}, ${2:sub_key})
	
# DeleteKeyEx from the winreg module
snippet DeleteKeyEx
	DeleteKeyEx(${1:key}, ${2:sub_key}, ${3:access=KEY_WOW64_64KEY}, ${4:reserved=0})
	
# DeleteValue from the winreg module
snippet DeleteValue
	DeleteValue(${1:key}, ${2:value})
	
# Detach from the winreg module
snippet Detach
	Detach(${1:})
	
# DisableReflectionKey from the winreg module
snippet DisableReflectionKey
	DisableReflectionKey(${1:key})
	
# EnableReflectionKey from the winreg module
snippet EnableReflectionKey
	EnableReflectionKey(${1:key})
	
# EnumKey from the winreg module
snippet EnumKey
	EnumKey(${1:key}, ${2:index})
	
# EnumValue from the winreg module
snippet EnumValue
	EnumValue(${1:key}, ${2:index})
	
# ExpandEnvironmentStrings from the winreg module
snippet ExpandEnvironmentStrings
	ExpandEnvironmentStrings(${1:str})
	
# FlushKey from the winreg module
snippet FlushKey
	FlushKey(${1:key})
	
# HKEY_CLASSES_ROOT from the winreg module
snippet HKEY_CLASSES_ROOT
	HKEY_CLASSES_ROOT
	
# HKEY_CURRENT_CONFIG from the winreg module
snippet HKEY_CURRENT_CONFIG
	HKEY_CURRENT_CONFIG
	
# HKEY_CURRENT_USER from the winreg module
snippet HKEY_CURRENT_USER
	HKEY_CURRENT_USER
	
# HKEY_DYN_DATA from the winreg module
snippet HKEY_DYN_DATA
	HKEY_DYN_DATA
	
# HKEY_LOCAL_MACHINE from the winreg module
snippet HKEY_LOCAL_MACHINE
	HKEY_LOCAL_MACHINE
	
# HKEY_PERFORMANCE_DATA from the winreg module
snippet HKEY_PERFORMANCE_DATA
	HKEY_PERFORMANCE_DATA
	
# HKEY_USERS from the winreg module
snippet HKEY_USERS
	HKEY_USERS
	
# KEY_ALL_ACCESS from the winreg module
snippet KEY_ALL_ACCESS
	KEY_ALL_ACCESS
	
# KEY_CREATE_LINK from the winreg module
snippet KEY_CREATE_LINK
	KEY_CREATE_LINK
	
# KEY_CREATE_SUB_KEY from the winreg module
snippet KEY_CREATE_SUB_KEY
	KEY_CREATE_SUB_KEY
	
# KEY_ENUMERATE_SUB_KEYS from the winreg module
snippet KEY_ENUMERATE_SUB_KEYS
	KEY_ENUMERATE_SUB_KEYS
	
# KEY_EXECUTE from the winreg module
snippet KEY_EXECUTE
	KEY_EXECUTE
	
# KEY_NOTIFY from the winreg module
snippet KEY_NOTIFY
	KEY_NOTIFY
	
# KEY_QUERY_VALUE from the winreg module
snippet KEY_QUERY_VALUE
	KEY_QUERY_VALUE
	
# KEY_READ from the winreg module
snippet KEY_READ
	KEY_READ
	
# KEY_SET_VALUE from the winreg module
snippet KEY_SET_VALUE
	KEY_SET_VALUE
	
# KEY_WOW64_32KEY from the winreg module
snippet KEY_WOW64_32KEY
	KEY_WOW64_32KEY
	
# KEY_WOW64_64KEY from the winreg module
snippet KEY_WOW64_64KEY
	KEY_WOW64_64KEY
	
# KEY_WRITE from the winreg module
snippet KEY_WRITE
	KEY_WRITE
	
# LoadKey from the winreg module
snippet LoadKey
	LoadKey(${1:key}, ${2:sub_key}, ${3:file_name})
	
# OpenKey from the winreg module
snippet OpenKey
	OpenKey(${1:key}, ${2:sub_key}, ${3:reserved=0}, ${4:access=KEY_READ})
	
# OpenKeyEx from the winreg module
snippet OpenKeyEx
	OpenKeyEx(${1:key}, ${2:sub_key}, ${3:reserved=0}, ${4:access=KEY_READ})
	
# QueryInfoKey from the winreg module
snippet QueryInfoKey
	QueryInfoKey(${1:key})
	
# QueryReflectionKey from the winreg module
snippet QueryReflectionKey
	QueryReflectionKey(${1:key})
	
# QueryValue from the winreg module
snippet QueryValue
	QueryValue(${1:key}, ${2:sub_key})
	
# QueryValueEx from the winreg module
snippet QueryValueEx
	QueryValueEx(${1:key}, ${2:value_name})
	
# REG_BINARY from the winreg module
snippet REG_BINARY
	REG_BINARY
	
# REG_DWORD from the winreg module
snippet REG_DWORD
	REG_DWORD
	
# REG_DWORD_BIG_ENDIAN from the winreg module
snippet REG_DWORD_BIG_ENDIAN
	REG_DWORD_BIG_ENDIAN
	
# REG_DWORD_LITTLE_ENDIAN from the winreg module
snippet REG_DWORD_LITTLE_ENDIAN
	REG_DWORD_LITTLE_ENDIAN
	
# REG_EXPAND_SZ from the winreg module
snippet REG_EXPAND_SZ
	REG_EXPAND_SZ
	
# REG_FULL_RESOURCE_DESCRIPTOR from the winreg module
snippet REG_FULL_RESOURCE_DESCRIPTOR
	REG_FULL_RESOURCE_DESCRIPTOR
	
# REG_LINK from the winreg module
snippet REG_LINK
	REG_LINK
	
# REG_MULTI_SZ from the winreg module
snippet REG_MULTI_SZ
	REG_MULTI_SZ
	
# REG_NONE from the winreg module
snippet REG_NONE
	REG_NONE
	
# REG_RESOURCE_LIST from the winreg module
snippet REG_RESOURCE_LIST
	REG_RESOURCE_LIST
	
# REG_RESOURCE_REQUIREMENTS_LIST from the winreg module
snippet REG_RESOURCE_REQUIREMENTS_LIST
	REG_RESOURCE_REQUIREMENTS_LIST
	
# REG_SZ from the winreg module
snippet REG_SZ
	REG_SZ
	
# SaveKey from the winreg module
snippet SaveKey
	SaveKey(${1:key}, ${2:file_name})
	
# SetValue from the winreg module
snippet SetValue
	SetValue(${1:key}, ${2:sub_key}, ${3:type}, ${4:value})
	
# SetValueEx from the winreg module
snippet SetValueEx
	SetValueEx(${1:key}, ${2:value_name}, ${3:reserved}, ${4:type}, ${5:value})
	
# __enter__() from the winreg module
snippet __enter__
	__enter__(${1:})
	
# __exit__() from the winreg module
snippet __exit__
	__exit__(${1:*exc_info})
	
# Beep from the winsound module
snippet Beep
	Beep(${1:frequency}, ${2:duration})
	
# MB_ICONASTERISK from the winsound module
snippet MB_ICONASTERISK
	MB_ICONASTERISK
	
# MB_ICONEXCLAMATION from the winsound module
snippet MB_ICONEXCLAMATION
	MB_ICONEXCLAMATION
	
# MB_ICONHAND from the winsound module
snippet MB_ICONHAND
	MB_ICONHAND
	
# MB_ICONQUESTION from the winsound module
snippet MB_ICONQUESTION
	MB_ICONQUESTION
	
# MB_OK from the winsound module
snippet MB_OK
	MB_OK
	
# MessageBeep from the winsound module
snippet MessageBeep
	MessageBeep(${1:type=MB_OK})
	
# PlaySound from the winsound module
snippet PlaySound
	PlaySound(${1:sound}, ${2:flags})
	
# SND_ALIAS from the winsound module
snippet SND_ALIAS
	SND_ALIAS
	
# SND_ASYNC from the winsound module
snippet SND_ASYNC
	SND_ASYNC
	
# SND_FILENAME from the winsound module
snippet SND_FILENAME
	SND_FILENAME
	
# SND_LOOP from the winsound module
snippet SND_LOOP
	SND_LOOP
	
# SND_MEMORY from the winsound module
snippet SND_MEMORY
	SND_MEMORY
	
# SND_NODEFAULT from the winsound module
snippet SND_NODEFAULT
	SND_NODEFAULT
	
# SND_NOSTOP from the winsound module
snippet SND_NOSTOP
	SND_NOSTOP
	
# SND_NOWAIT from the winsound module
snippet SND_NOWAIT
	SND_NOWAIT
	
# SND_PURGE from the winsound module
snippet SND_PURGE
	SND_PURGE
	
# BaseCGIHandler from the wsgiref module
snippet BaseCGIHandler
	BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# BaseHandler from the wsgiref module
snippet BaseHandler
	BaseHandler
	
# CGIHandler from the wsgiref module
snippet CGIHandler
	CGIHandler
	
# FileWrapper from the wsgiref module
snippet FileWrapper
	FileWrapper(${1:filelike}, ${2:blksize=8192})
	
# Headers from the wsgiref module
snippet Headers
	Headers(${1:[headers]})
	
# IISCGIHandler from the wsgiref module
snippet IISCGIHandler
	IISCGIHandler
	
# SimpleHandler from the wsgiref module
snippet SimpleHandler
	SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# WSGIRequestHandler from the wsgiref module
snippet WSGIRequestHandler
	WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})
	
# WSGIServer from the wsgiref module
snippet WSGIServer
	WSGIServer(${1:server_address}, ${2:RequestHandlerClass})
	
# application_uri() from the wsgiref module
snippet application_uri
	application_uri(${1:environ})
	
# demo_app() from the wsgiref module
snippet demo_app
	demo_app(${1:environ}, ${2:start_response})
	
# guess_scheme() from the wsgiref module
snippet guess_scheme
	guess_scheme(${1:environ})
	
# is_hop_by_hop() from the wsgiref module
snippet is_hop_by_hop
	is_hop_by_hop(${1:header_name})
	
# make_server() from the wsgiref module
snippet make_server
	make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})
	
# read_environ() from the wsgiref module
snippet read_environ
	read_environ(${1:})
	
# request_uri() from the wsgiref module
snippet request_uri
	request_uri(${1:environ}, ${2:include_query=True})
	
# setup_testing_defaults() from the wsgiref module
snippet setup_testing_defaults
	setup_testing_defaults(${1:environ})
	
# shift_path_info() from the wsgiref module
snippet shift_path_info
	shift_path_info(${1:environ})
	
# validator() from the wsgiref module
snippet validator
	validator(${1:application})
	
# BaseCGIHandler from the wsgiref.handlers module
snippet BaseCGIHandler
	BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# BaseHandler from the wsgiref.handlers module
snippet BaseHandler
	BaseHandler
	
# CGIHandler from the wsgiref.handlers module
snippet CGIHandler
	CGIHandler
	
# FileWrapper from the wsgiref.handlers module
snippet FileWrapper
	FileWrapper(${1:filelike}, ${2:blksize=8192})
	
# Headers from the wsgiref.handlers module
snippet Headers
	Headers(${1:[headers]})
	
# IISCGIHandler from the wsgiref.handlers module
snippet IISCGIHandler
	IISCGIHandler
	
# SimpleHandler from the wsgiref.handlers module
snippet SimpleHandler
	SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# WSGIRequestHandler from the wsgiref.handlers module
snippet WSGIRequestHandler
	WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})
	
# WSGIServer from the wsgiref.handlers module
snippet WSGIServer
	WSGIServer(${1:server_address}, ${2:RequestHandlerClass})
	
# application_uri() from the wsgiref.handlers module
snippet application_uri
	application_uri(${1:environ})
	
# demo_app() from the wsgiref.handlers module
snippet demo_app
	demo_app(${1:environ}, ${2:start_response})
	
# guess_scheme() from the wsgiref.handlers module
snippet guess_scheme
	guess_scheme(${1:environ})
	
# is_hop_by_hop() from the wsgiref.handlers module
snippet is_hop_by_hop
	is_hop_by_hop(${1:header_name})
	
# make_server() from the wsgiref.handlers module
snippet make_server
	make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})
	
# read_environ() from the wsgiref.handlers module
snippet read_environ
	read_environ(${1:})
	
# request_uri() from the wsgiref.handlers module
snippet request_uri
	request_uri(${1:environ}, ${2:include_query=True})
	
# setup_testing_defaults() from the wsgiref.handlers module
snippet setup_testing_defaults
	setup_testing_defaults(${1:environ})
	
# shift_path_info() from the wsgiref.handlers module
snippet shift_path_info
	shift_path_info(${1:environ})
	
# validator() from the wsgiref.handlers module
snippet validator
	validator(${1:application})
	
# BaseCGIHandler from the wsgiref.headers module
snippet BaseCGIHandler
	BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# BaseHandler from the wsgiref.headers module
snippet BaseHandler
	BaseHandler
	
# CGIHandler from the wsgiref.headers module
snippet CGIHandler
	CGIHandler
	
# FileWrapper from the wsgiref.headers module
snippet FileWrapper
	FileWrapper(${1:filelike}, ${2:blksize=8192})
	
# Headers from the wsgiref.headers module
snippet Headers
	Headers(${1:[headers]})
	
# IISCGIHandler from the wsgiref.headers module
snippet IISCGIHandler
	IISCGIHandler
	
# SimpleHandler from the wsgiref.headers module
snippet SimpleHandler
	SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# WSGIRequestHandler from the wsgiref.headers module
snippet WSGIRequestHandler
	WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})
	
# WSGIServer from the wsgiref.headers module
snippet WSGIServer
	WSGIServer(${1:server_address}, ${2:RequestHandlerClass})
	
# application_uri() from the wsgiref.headers module
snippet application_uri
	application_uri(${1:environ})
	
# demo_app() from the wsgiref.headers module
snippet demo_app
	demo_app(${1:environ}, ${2:start_response})
	
# guess_scheme() from the wsgiref.headers module
snippet guess_scheme
	guess_scheme(${1:environ})
	
# is_hop_by_hop() from the wsgiref.headers module
snippet is_hop_by_hop
	is_hop_by_hop(${1:header_name})
	
# make_server() from the wsgiref.headers module
snippet make_server
	make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})
	
# read_environ() from the wsgiref.headers module
snippet read_environ
	read_environ(${1:})
	
# request_uri() from the wsgiref.headers module
snippet request_uri
	request_uri(${1:environ}, ${2:include_query=True})
	
# setup_testing_defaults() from the wsgiref.headers module
snippet setup_testing_defaults
	setup_testing_defaults(${1:environ})
	
# shift_path_info() from the wsgiref.headers module
snippet shift_path_info
	shift_path_info(${1:environ})
	
# validator() from the wsgiref.headers module
snippet validator
	validator(${1:application})
	
# BaseCGIHandler from the wsgiref.simple_server module
snippet BaseCGIHandler
	BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# BaseHandler from the wsgiref.simple_server module
snippet BaseHandler
	BaseHandler
	
# CGIHandler from the wsgiref.simple_server module
snippet CGIHandler
	CGIHandler
	
# FileWrapper from the wsgiref.simple_server module
snippet FileWrapper
	FileWrapper(${1:filelike}, ${2:blksize=8192})
	
# Headers from the wsgiref.simple_server module
snippet Headers
	Headers(${1:[headers]})
	
# IISCGIHandler from the wsgiref.simple_server module
snippet IISCGIHandler
	IISCGIHandler
	
# SimpleHandler from the wsgiref.simple_server module
snippet SimpleHandler
	SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# WSGIRequestHandler from the wsgiref.simple_server module
snippet WSGIRequestHandler
	WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})
	
# WSGIServer from the wsgiref.simple_server module
snippet WSGIServer
	WSGIServer(${1:server_address}, ${2:RequestHandlerClass})
	
# application_uri() from the wsgiref.simple_server module
snippet application_uri
	application_uri(${1:environ})
	
# demo_app() from the wsgiref.simple_server module
snippet demo_app
	demo_app(${1:environ}, ${2:start_response})
	
# guess_scheme() from the wsgiref.simple_server module
snippet guess_scheme
	guess_scheme(${1:environ})
	
# is_hop_by_hop() from the wsgiref.simple_server module
snippet is_hop_by_hop
	is_hop_by_hop(${1:header_name})
	
# make_server() from the wsgiref.simple_server module
snippet make_server
	make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})
	
# read_environ() from the wsgiref.simple_server module
snippet read_environ
	read_environ(${1:})
	
# request_uri() from the wsgiref.simple_server module
snippet request_uri
	request_uri(${1:environ}, ${2:include_query=True})
	
# setup_testing_defaults() from the wsgiref.simple_server module
snippet setup_testing_defaults
	setup_testing_defaults(${1:environ})
	
# shift_path_info() from the wsgiref.simple_server module
snippet shift_path_info
	shift_path_info(${1:environ})
	
# validator() from the wsgiref.simple_server module
snippet validator
	validator(${1:application})
	
# BaseCGIHandler from the wsgiref.util module
snippet BaseCGIHandler
	BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# BaseHandler from the wsgiref.util module
snippet BaseHandler
	BaseHandler
	
# CGIHandler from the wsgiref.util module
snippet CGIHandler
	CGIHandler
	
# FileWrapper from the wsgiref.util module
snippet FileWrapper
	FileWrapper(${1:filelike}, ${2:blksize=8192})
	
# Headers from the wsgiref.util module
snippet Headers
	Headers(${1:[headers]})
	
# IISCGIHandler from the wsgiref.util module
snippet IISCGIHandler
	IISCGIHandler
	
# SimpleHandler from the wsgiref.util module
snippet SimpleHandler
	SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# WSGIRequestHandler from the wsgiref.util module
snippet WSGIRequestHandler
	WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})
	
# WSGIServer from the wsgiref.util module
snippet WSGIServer
	WSGIServer(${1:server_address}, ${2:RequestHandlerClass})
	
# application_uri() from the wsgiref.util module
snippet application_uri
	application_uri(${1:environ})
	
# demo_app() from the wsgiref.util module
snippet demo_app
	demo_app(${1:environ}, ${2:start_response})
	
# guess_scheme() from the wsgiref.util module
snippet guess_scheme
	guess_scheme(${1:environ})
	
# is_hop_by_hop() from the wsgiref.util module
snippet is_hop_by_hop
	is_hop_by_hop(${1:header_name})
	
# make_server() from the wsgiref.util module
snippet make_server
	make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})
	
# read_environ() from the wsgiref.util module
snippet read_environ
	read_environ(${1:})
	
# request_uri() from the wsgiref.util module
snippet request_uri
	request_uri(${1:environ}, ${2:include_query=True})
	
# setup_testing_defaults() from the wsgiref.util module
snippet setup_testing_defaults
	setup_testing_defaults(${1:environ})
	
# shift_path_info() from the wsgiref.util module
snippet shift_path_info
	shift_path_info(${1:environ})
	
# validator() from the wsgiref.util module
snippet validator
	validator(${1:application})
	
# BaseCGIHandler from the wsgiref.validate module
snippet BaseCGIHandler
	BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# BaseHandler from the wsgiref.validate module
snippet BaseHandler
	BaseHandler
	
# CGIHandler from the wsgiref.validate module
snippet CGIHandler
	CGIHandler
	
# FileWrapper from the wsgiref.validate module
snippet FileWrapper
	FileWrapper(${1:filelike}, ${2:blksize=8192})
	
# Headers from the wsgiref.validate module
snippet Headers
	Headers(${1:[headers]})
	
# IISCGIHandler from the wsgiref.validate module
snippet IISCGIHandler
	IISCGIHandler
	
# SimpleHandler from the wsgiref.validate module
snippet SimpleHandler
	SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})
	
# WSGIRequestHandler from the wsgiref.validate module
snippet WSGIRequestHandler
	WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})
	
# WSGIServer from the wsgiref.validate module
snippet WSGIServer
	WSGIServer(${1:server_address}, ${2:RequestHandlerClass})
	
# application_uri() from the wsgiref.validate module
snippet application_uri
	application_uri(${1:environ})
	
# demo_app() from the wsgiref.validate module
snippet demo_app
	demo_app(${1:environ}, ${2:start_response})
	
# guess_scheme() from the wsgiref.validate module
snippet guess_scheme
	guess_scheme(${1:environ})
	
# is_hop_by_hop() from the wsgiref.validate module
snippet is_hop_by_hop
	is_hop_by_hop(${1:header_name})
	
# make_server() from the wsgiref.validate module
snippet make_server
	make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})
	
# read_environ() from the wsgiref.validate module
snippet read_environ
	read_environ(${1:})
	
# request_uri() from the wsgiref.validate module
snippet request_uri
	request_uri(${1:environ}, ${2:include_query=True})
	
# setup_testing_defaults() from the wsgiref.validate module
snippet setup_testing_defaults
	setup_testing_defaults(${1:environ})
	
# shift_path_info() from the wsgiref.validate module
snippet shift_path_info
	shift_path_info(${1:environ})
	
# validator() from the wsgiref.validate module
snippet validator
	validator(${1:application})
	
# ConversionError from the xdrlib module
snippet ConversionError
	ConversionError
	
# Error from the xdrlib module
snippet Error
	Error
	
# Packer from the xdrlib module
snippet Packer
	Packer
	
# Unpacker from the xdrlib module
snippet Unpacker
	Unpacker(${1:data})
	
# done() from the xdrlib module
snippet done
	done(${1:})
	
# get_buffer() from the xdrlib module
snippet get_buffer
	get_buffer(${1:})
	
# get_position() from the xdrlib module
snippet get_position
	get_position(${1:})
	
# pack_array() from the xdrlib module
snippet pack_array
	pack_array(${1:list}, ${2:pack_item})
	
# pack_bytes() from the xdrlib module
snippet pack_bytes
	pack_bytes(${1:bytes})
	
# pack_double() from the xdrlib module
snippet pack_double
	pack_double(${1:value})
	
# pack_farray() from the xdrlib module
snippet pack_farray
	pack_farray(${1:n}, ${2:array}, ${3:pack_item})
	
# pack_float() from the xdrlib module
snippet pack_float
	pack_float(${1:value})
	
# pack_fopaque() from the xdrlib module
snippet pack_fopaque
	pack_fopaque(${1:n}, ${2:data})
	
# pack_fstring() from the xdrlib module
snippet pack_fstring
	pack_fstring(${1:n}, ${2:s})
	
# pack_list() from the xdrlib module
snippet pack_list
	pack_list(${1:list}, ${2:pack_item})
	
# pack_opaque() from the xdrlib module
snippet pack_opaque
	pack_opaque(${1:data})
	
# pack_string() from the xdrlib module
snippet pack_string
	pack_string(${1:s})
	
# reset() from the xdrlib module
snippet reset
	reset(${1:})
	
# set_position() from the xdrlib module
snippet set_position
	set_position(${1:position})
	
# unpack_array() from the xdrlib module
snippet unpack_array
	unpack_array(${1:unpack_item})
	
# unpack_bytes() from the xdrlib module
snippet unpack_bytes
	unpack_bytes(${1:})
	
# unpack_double() from the xdrlib module
snippet unpack_double
	unpack_double(${1:})
	
# unpack_farray() from the xdrlib module
snippet unpack_farray
	unpack_farray(${1:n}, ${2:unpack_item})
	
# unpack_float() from the xdrlib module
snippet unpack_float
	unpack_float(${1:})
	
# unpack_fopaque() from the xdrlib module
snippet unpack_fopaque
	unpack_fopaque(${1:n})
	
# unpack_fstring() from the xdrlib module
snippet unpack_fstring
	unpack_fstring(${1:n})
	
# unpack_list() from the xdrlib module
snippet unpack_list
	unpack_list(${1:unpack_item})
	
# unpack_opaque() from the xdrlib module
snippet unpack_opaque
	unpack_opaque(${1:})
	
# unpack_string() from the xdrlib module
snippet unpack_string
	unpack_string(${1:})
	
# DOMException from the xml.dom module
snippet DOMException
	DOMException
	
# DomstringSizeErr from the xml.dom module
snippet DomstringSizeErr
	DomstringSizeErr
	
# EMPTY_NAMESPACE from the xml.dom module
snippet EMPTY_NAMESPACE
	EMPTY_NAMESPACE
	
# HierarchyRequestErr from the xml.dom module
snippet HierarchyRequestErr
	HierarchyRequestErr
	
# IndexSizeErr from the xml.dom module
snippet IndexSizeErr
	IndexSizeErr
	
# InuseAttributeErr from the xml.dom module
snippet InuseAttributeErr
	InuseAttributeErr
	
# InvalidAccessErr from the xml.dom module
snippet InvalidAccessErr
	InvalidAccessErr
	
# InvalidCharacterErr from the xml.dom module
snippet InvalidCharacterErr
	InvalidCharacterErr
	
# InvalidModificationErr from the xml.dom module
snippet InvalidModificationErr
	InvalidModificationErr
	
# InvalidStateErr from the xml.dom module
snippet InvalidStateErr
	InvalidStateErr
	
# NamespaceErr from the xml.dom module
snippet NamespaceErr
	NamespaceErr
	
# NoDataAllowedErr from the xml.dom module
snippet NoDataAllowedErr
	NoDataAllowedErr
	
# NoModificationAllowedErr from the xml.dom module
snippet NoModificationAllowedErr
	NoModificationAllowedErr
	
# NotFoundErr from the xml.dom module
snippet NotFoundErr
	NotFoundErr
	
# NotSupportedErr from the xml.dom module
snippet NotSupportedErr
	NotSupportedErr
	
# SyntaxErr from the xml.dom module
snippet SyntaxErr
	SyntaxErr
	
# WrongDocumentErr from the xml.dom module
snippet WrongDocumentErr
	WrongDocumentErr
	
# XHTML_NAMESPACE from the xml.dom module
snippet XHTML_NAMESPACE
	XHTML_NAMESPACE
	
# XMLNS_NAMESPACE from the xml.dom module
snippet XMLNS_NAMESPACE
	XMLNS_NAMESPACE
	
# XML_NAMESPACE from the xml.dom module
snippet XML_NAMESPACE
	XML_NAMESPACE
	
# appendChild() from the xml.dom module
snippet appendChild
	appendChild(${1:newChild})
	
# attributes() from the xml.dom module
snippet attributes
	attributes()
	
# childNodes() from the xml.dom module
snippet childNodes
	childNodes()
	
# cloneNode() from the xml.dom module
snippet cloneNode
	cloneNode(${1:deep})
	
# createAttribute() from the xml.dom module
snippet createAttribute
	createAttribute(${1:name})
	
# createAttributeNS() from the xml.dom module
snippet createAttributeNS
	createAttributeNS(${1:namespaceURI}, ${2:qualifiedName})
	
# createComment() from the xml.dom module
snippet createComment
	createComment(${1:data})
	
# createDocument() from the xml.dom module
snippet createDocument
	createDocument(${1:namespaceUri}, ${2:qualifiedName}, ${3:doctype})
	
# createDocumentType() from the xml.dom module
snippet createDocumentType
	createDocumentType(${1:qualifiedName}, ${2:publicId}, ${3:systemId})
	
# createElement() from the xml.dom module
snippet createElement
	createElement(${1:tagName})
	
# createElementNS() from the xml.dom module
snippet createElementNS
	createElementNS(${1:namespaceURI}, ${2:tagName})
	
# createProcessingInstruction() from the xml.dom module
snippet createProcessingInstruction
	createProcessingInstruction(${1:target}, ${2:data})
	
# createTextNode() from the xml.dom module
snippet createTextNode
	createTextNode(${1:data})
	
# data() from the xml.dom module
snippet data
	data()
	
# documentElement() from the xml.dom module
snippet documentElement
	documentElement()
	
# entities() from the xml.dom module
snippet entities
	entities()
	
# firstChild() from the xml.dom module
snippet firstChild
	firstChild()
	
# getAttribute() from the xml.dom module
snippet getAttribute
	getAttribute(${1:name})
	
# getAttributeNS() from the xml.dom module
snippet getAttributeNS
	getAttributeNS(${1:namespaceURI}, ${2:localName})
	
# getAttributeNode() from the xml.dom module
snippet getAttributeNode
	getAttributeNode(${1:attrname})
	
# getAttributeNodeNS() from the xml.dom module
snippet getAttributeNodeNS
	getAttributeNodeNS(${1:namespaceURI}, ${2:localName})
	
# getDOMImplementation() from the xml.dom module
snippet getDOMImplementation
	getDOMImplementation(${1:name=None}, ${2:features=}, ${3:})
	
# getElementsByTagName() from the xml.dom module
snippet getElementsByTagName
	getElementsByTagName(${1:tagName})
	
# getElementsByTagNameNS() from the xml.dom module
snippet getElementsByTagNameNS
	getElementsByTagNameNS(${1:namespaceURI}, ${2:localName})
	
# hasAttribute() from the xml.dom module
snippet hasAttribute
	hasAttribute(${1:name})
	
# hasAttributeNS() from the xml.dom module
snippet hasAttributeNS
	hasAttributeNS(${1:namespaceURI}, ${2:localName})
	
# hasAttributes() from the xml.dom module
snippet hasAttributes
	hasAttributes(${1:})
	
# hasChildNodes() from the xml.dom module
snippet hasChildNodes
	hasChildNodes(${1:})
	
# hasFeature() from the xml.dom module
snippet hasFeature
	hasFeature(${1:feature}, ${2:version})
	
# insertBefore() from the xml.dom module
snippet insertBefore
	insertBefore(${1:newChild}, ${2:refChild})
	
# internalSubset() from the xml.dom module
snippet internalSubset
	internalSubset()
	
# isSameNode() from the xml.dom module
snippet isSameNode
	isSameNode(${1:other})
	
# item() from the xml.dom module
snippet item
	item(${1:index})
	
# lastChild() from the xml.dom module
snippet lastChild
	lastChild()
	
# length() from the xml.dom module
snippet length
	length()
	
# localName() from the xml.dom module
snippet localName
	localName()
	
# name() from the xml.dom module
snippet name
	name()
	
# namespaceURI() from the xml.dom module
snippet namespaceURI
	namespaceURI()
	
# nextSibling() from the xml.dom module
snippet nextSibling
	nextSibling()
	
# nodeName() from the xml.dom module
snippet nodeName
	nodeName()
	
# nodeType() from the xml.dom module
snippet nodeType
	nodeType()
	
# nodeValue() from the xml.dom module
snippet nodeValue
	nodeValue()
	
# normalize() from the xml.dom module
snippet normalize
	normalize(${1:})
	
# notations() from the xml.dom module
snippet notations
	notations()
	
# parentNode() from the xml.dom module
snippet parentNode
	parentNode()
	
# prefix() from the xml.dom module
snippet prefix
	prefix()
	
# previousSibling() from the xml.dom module
snippet previousSibling
	previousSibling()
	
# publicId() from the xml.dom module
snippet publicId
	publicId()
	
# registerDOMImplementation() from the xml.dom module
snippet registerDOMImplementation
	registerDOMImplementation(${1:name}, ${2:factory})
	
# removeAttribute() from the xml.dom module
snippet removeAttribute
	removeAttribute(${1:name})
	
# removeAttributeNS() from the xml.dom module
snippet removeAttributeNS
	removeAttributeNS(${1:namespaceURI}, ${2:localName})
	
# removeAttributeNode() from the xml.dom module
snippet removeAttributeNode
	removeAttributeNode(${1:oldAttr})
	
# removeChild() from the xml.dom module
snippet removeChild
	removeChild(${1:oldChild})
	
# replaceChild() from the xml.dom module
snippet replaceChild
	replaceChild(${1:newChild}, ${2:oldChild})
	
# setAttribute() from the xml.dom module
snippet setAttribute
	setAttribute(${1:name}, ${2:value})
	
# setAttributeNS() from the xml.dom module
snippet setAttributeNS
	setAttributeNS(${1:namespaceURI}, ${2:qname}, ${3:value})
	
# setAttributeNode() from the xml.dom module
snippet setAttributeNode
	setAttributeNode(${1:newAttr})
	
# setAttributeNodeNS() from the xml.dom module
snippet setAttributeNodeNS
	setAttributeNodeNS(${1:newAttr})
	
# systemId() from the xml.dom module
snippet systemId
	systemId()
	
# tagName() from the xml.dom module
snippet tagName
	tagName()
	
# target() from the xml.dom module
snippet target
	target()
	
# value() from the xml.dom module
snippet value
	value()
	
# parse() from the xml.dom.minidom module
snippet parse
	parse(${1:filename_or_file}, ${2:parser=None}, ${3:bufsize=None})
	
# parseString() from the xml.dom.minidom module
snippet parseString
	parseString(${1:string}, ${2:parser=None})
	
# toprettyxml() from the xml.dom.minidom module
snippet toprettyxml
	toprettyxml(${1:indent=""}, ${2:newl=""}, ${3:encoding=""})
	
# toxml() from the xml.dom.minidom module
snippet toxml
	toxml(${1:encoding=None})
	
# unlink() from the xml.dom.minidom module
snippet unlink
	unlink(${1:})
	
# writexml() from the xml.dom.minidom module
snippet writexml
	writexml(${1:writer,})
	
# DOMEventStream from the xml.dom.pulldom module
snippet DOMEventStream
	DOMEventStream(${1:stream}, ${2:parser}, ${3:bufsize})
	
# PullDom from the xml.dom.pulldom module
snippet PullDom
	PullDom(${1:documentFactory=None})
	
# SAX2DOM from the xml.dom.pulldom module
snippet SAX2DOM
	SAX2DOM(${1:documentFactory=None})
	
# default_bufsize() from the xml.dom.pulldom module
snippet default_bufsize
	default_bufsize()
	
# parse() from the xml.dom.pulldom module
snippet parse
	parse(${1:stream_or_string}, ${2:parser=None}, ${3:bufsize=None})
	
# parseString() from the xml.dom.pulldom module
snippet parseString
	parseString(${1:string,})
	
# Comment from the xml.etree.ElementTree module
snippet Comment
	Comment(${1:text=None})
	
# Element from the xml.etree.ElementTree module
snippet Element
	Element(${1:tag}, ${2:attrib={}}, ${3:**extra})
	
# ElementTree from the xml.etree.ElementTree module
snippet ElementTree
	ElementTree(${1:element=None}, ${2:file=None})
	
# ParseError from the xml.etree.ElementTree module
snippet ParseError
	ParseError
	
# ProcessingInstruction from the xml.etree.ElementTree module
snippet ProcessingInstruction
	ProcessingInstruction(${1:target}, ${2:text=None})
	
# QName from the xml.etree.ElementTree module
snippet QName
	QName(${1:text_or_uri}, ${2:tag=None})
	
# SubElement from the xml.etree.ElementTree module
snippet SubElement
	SubElement(${1:parent}, ${2:tag}, ${3:attrib={}}, ${4:**extra})
	
# TreeBuilder from the xml.etree.ElementTree module
snippet TreeBuilder
	TreeBuilder(${1:element_factory=None})
	
# XML from the xml.etree.ElementTree module
snippet XML
	XML(${1:text}, ${2:parser=None})
	
# XMLID from the xml.etree.ElementTree module
snippet XMLID
	XMLID(${1:text}, ${2:parser=None})
	
# XMLParser from the xml.etree.ElementTree module
snippet XMLParser
	XMLParser(${1:html=0}, ${2:target=None}, ${3:encoding=None})
	
# XMLPullParser from the xml.etree.ElementTree module
snippet XMLPullParser
	XMLPullParser(${1:events=None})
	
# dump() from the xml.etree.ElementTree module
snippet dump
	dump(${1:elem})
	
# fromstring() from the xml.etree.ElementTree module
snippet fromstring
	fromstring(${1:text})
	
# fromstringlist() from the xml.etree.ElementTree module
snippet fromstringlist
	fromstringlist(${1:sequence}, ${2:parser=None})
	
# iselement() from the xml.etree.ElementTree module
snippet iselement
	iselement(${1:element})
	
# iterparse() from the xml.etree.ElementTree module
snippet iterparse
	iterparse(${1:source}, ${2:events=None}, ${3:parser=None})
	
# parse() from the xml.etree.ElementTree module
snippet parse
	parse(${1:source}, ${2:parser=None})
	
# register_namespace() from the xml.etree.ElementTree module
snippet register_namespace
	register_namespace(${1:prefix}, ${2:uri})
	
# tostring() from the xml.etree.ElementTree module
snippet tostring
	tostring(${1:element}, ${2:encoding="us-ascii"}, ${3:method="xml"}, ${4:*}, ${5:short_empty_elements=True})
	
# tostringlist() from the xml.etree.ElementTree module
snippet tostringlist
	tostringlist(${1:element,})
	
# Comment from the xml.parsers.expat module
snippet Comment
	Comment(${1:text=None})
	
# Element from the xml.parsers.expat module
snippet Element
	Element(${1:tag}, ${2:attrib={}}, ${3:**extra})
	
# ElementTree from the xml.parsers.expat module
snippet ElementTree
	ElementTree(${1:element=None}, ${2:file=None})
	
# ParseError from the xml.parsers.expat module
snippet ParseError
	ParseError
	
# ProcessingInstruction from the xml.parsers.expat module
snippet ProcessingInstruction
	ProcessingInstruction(${1:target}, ${2:text=None})
	
# QName from the xml.parsers.expat module
snippet QName
	QName(${1:text_or_uri}, ${2:tag=None})
	
# SubElement from the xml.parsers.expat module
snippet SubElement
	SubElement(${1:parent}, ${2:tag}, ${3:attrib={}}, ${4:**extra})
	
# TreeBuilder from the xml.parsers.expat module
snippet TreeBuilder
	TreeBuilder(${1:element_factory=None})
	
# XML from the xml.parsers.expat module
snippet XML
	XML(${1:text}, ${2:parser=None})
	
# XMLID from the xml.parsers.expat module
snippet XMLID
	XMLID(${1:text}, ${2:parser=None})
	
# XMLParser from the xml.parsers.expat module
snippet XMLParser
	XMLParser(${1:html=0}, ${2:target=None}, ${3:encoding=None})
	
# XMLPullParser from the xml.parsers.expat module
snippet XMLPullParser
	XMLPullParser(${1:events=None})
	
# dump() from the xml.parsers.expat module
snippet dump
	dump(${1:elem})
	
# fromstring() from the xml.parsers.expat module
snippet fromstring
	fromstring(${1:text})
	
# fromstringlist() from the xml.parsers.expat module
snippet fromstringlist
	fromstringlist(${1:sequence}, ${2:parser=None})
	
# iselement() from the xml.parsers.expat module
snippet iselement
	iselement(${1:element})
	
# iterparse() from the xml.parsers.expat module
snippet iterparse
	iterparse(${1:source}, ${2:events=None}, ${3:parser=None})
	
# parse() from the xml.parsers.expat module
snippet parse
	parse(${1:source}, ${2:parser=None})
	
# register_namespace() from the xml.parsers.expat module
snippet register_namespace
	register_namespace(${1:prefix}, ${2:uri})
	
# tostring() from the xml.parsers.expat module
snippet tostring
	tostring(${1:element}, ${2:encoding="us-ascii"}, ${3:method="xml"}, ${4:*}, ${5:short_empty_elements=True})
	
# tostringlist() from the xml.parsers.expat module
snippet tostringlist
	tostringlist(${1:element,})
	
# Comment from the xml.parsers.expat.errors module
snippet Comment
	Comment(${1:text=None})
	
# Element from the xml.parsers.expat.errors module
snippet Element
	Element(${1:tag}, ${2:attrib={}}, ${3:**extra})
	
# ElementTree from the xml.parsers.expat.errors module
snippet ElementTree
	ElementTree(${1:element=None}, ${2:file=None})
	
# ParseError from the xml.parsers.expat.errors module
snippet ParseError
	ParseError
	
# ProcessingInstruction from the xml.parsers.expat.errors module
snippet ProcessingInstruction
	ProcessingInstruction(${1:target}, ${2:text=None})
	
# QName from the xml.parsers.expat.errors module
snippet QName
	QName(${1:text_or_uri}, ${2:tag=None})
	
# SubElement from the xml.parsers.expat.errors module
snippet SubElement
	SubElement(${1:parent}, ${2:tag}, ${3:attrib={}}, ${4:**extra})
	
# TreeBuilder from the xml.parsers.expat.errors module
snippet TreeBuilder
	TreeBuilder(${1:element_factory=None})
	
# XML from the xml.parsers.expat.errors module
snippet XML
	XML(${1:text}, ${2:parser=None})
	
# XMLID from the xml.parsers.expat.errors module
snippet XMLID
	XMLID(${1:text}, ${2:parser=None})
	
# XMLParser from the xml.parsers.expat.errors module
snippet XMLParser
	XMLParser(${1:html=0}, ${2:target=None}, ${3:encoding=None})
	
# XMLPullParser from the xml.parsers.expat.errors module
snippet XMLPullParser
	XMLPullParser(${1:events=None})
	
# dump() from the xml.parsers.expat.errors module
snippet dump
	dump(${1:elem})
	
# fromstring() from the xml.parsers.expat.errors module
snippet fromstring
	fromstring(${1:text})
	
# fromstringlist() from the xml.parsers.expat.errors module
snippet fromstringlist
	fromstringlist(${1:sequence}, ${2:parser=None})
	
# iselement() from the xml.parsers.expat.errors module
snippet iselement
	iselement(${1:element})
	
# iterparse() from the xml.parsers.expat.errors module
snippet iterparse
	iterparse(${1:source}, ${2:events=None}, ${3:parser=None})
	
# parse() from the xml.parsers.expat.errors module
snippet parse
	parse(${1:source}, ${2:parser=None})
	
# register_namespace() from the xml.parsers.expat.errors module
snippet register_namespace
	register_namespace(${1:prefix}, ${2:uri})
	
# tostring() from the xml.parsers.expat.errors module
snippet tostring
	tostring(${1:element}, ${2:encoding="us-ascii"}, ${3:method="xml"}, ${4:*}, ${5:short_empty_elements=True})
	
# tostringlist() from the xml.parsers.expat.errors module
snippet tostringlist
	tostringlist(${1:element,})
	
# Comment from the xml.parsers.expat.model module
snippet Comment
	Comment(${1:text=None})
	
# Element from the xml.parsers.expat.model module
snippet Element
	Element(${1:tag}, ${2:attrib={}}, ${3:**extra})
	
# ElementTree from the xml.parsers.expat.model module
snippet ElementTree
	ElementTree(${1:element=None}, ${2:file=None})
	
# ParseError from the xml.parsers.expat.model module
snippet ParseError
	ParseError
	
# ProcessingInstruction from the xml.parsers.expat.model module
snippet ProcessingInstruction
	ProcessingInstruction(${1:target}, ${2:text=None})
	
# QName from the xml.parsers.expat.model module
snippet QName
	QName(${1:text_or_uri}, ${2:tag=None})
	
# SubElement from the xml.parsers.expat.model module
snippet SubElement
	SubElement(${1:parent}, ${2:tag}, ${3:attrib={}}, ${4:**extra})
	
# TreeBuilder from the xml.parsers.expat.model module
snippet TreeBuilder
	TreeBuilder(${1:element_factory=None})
	
# XML from the xml.parsers.expat.model module
snippet XML
	XML(${1:text}, ${2:parser=None})
	
# XMLID from the xml.parsers.expat.model module
snippet XMLID
	XMLID(${1:text}, ${2:parser=None})
	
# XMLParser from the xml.parsers.expat.model module
snippet XMLParser
	XMLParser(${1:html=0}, ${2:target=None}, ${3:encoding=None})
	
# XMLPullParser from the xml.parsers.expat.model module
snippet XMLPullParser
	XMLPullParser(${1:events=None})
	
# dump() from the xml.parsers.expat.model module
snippet dump
	dump(${1:elem})
	
# fromstring() from the xml.parsers.expat.model module
snippet fromstring
	fromstring(${1:text})
	
# fromstringlist() from the xml.parsers.expat.model module
snippet fromstringlist
	fromstringlist(${1:sequence}, ${2:parser=None})
	
# iselement() from the xml.parsers.expat.model module
snippet iselement
	iselement(${1:element})
	
# iterparse() from the xml.parsers.expat.model module
snippet iterparse
	iterparse(${1:source}, ${2:events=None}, ${3:parser=None})
	
# parse() from the xml.parsers.expat.model module
snippet parse
	parse(${1:source}, ${2:parser=None})
	
# register_namespace() from the xml.parsers.expat.model module
snippet register_namespace
	register_namespace(${1:prefix}, ${2:uri})
	
# tostring() from the xml.parsers.expat.model module
snippet tostring
	tostring(${1:element}, ${2:encoding="us-ascii"}, ${3:method="xml"}, ${4:*}, ${5:short_empty_elements=True})
	
# tostringlist() from the xml.parsers.expat.model module
snippet tostringlist
	tostringlist(${1:element,})
	
# SAXException from the xml.sax module
snippet SAXException
	SAXException(${1:msg}, ${2:exception=None})
	
# SAXNotRecognizedException from the xml.sax module
snippet SAXNotRecognizedException
	SAXNotRecognizedException(${1:msg}, ${2:exception=None})
	
# SAXNotSupportedException from the xml.sax module
snippet SAXNotSupportedException
	SAXNotSupportedException(${1:msg}, ${2:exception=None})
	
# SAXParseException from the xml.sax module
snippet SAXParseException
	SAXParseException(${1:msg}, ${2:exception}, ${3:locator})
	
# getException() from the xml.sax module
snippet getException
	getException(${1:})
	
# getMessage() from the xml.sax module
snippet getMessage
	getMessage(${1:})
	
# make_parser() from the xml.sax module
snippet make_parser
	make_parser(${1:parser_list=[]})
	
# parse() from the xml.sax module
snippet parse
	parse(${1:filename_or_stream}, ${2:handler}, ${3:error_handler=handler.ErrorHandler}, ${4:})
	
# parseString() from the xml.sax module
snippet parseString
	parseString(${1:string,})
	
# ContentHandler from the xml.sax.handler module
snippet ContentHandler
	ContentHandler
	
# DTDHandler from the xml.sax.handler module
snippet DTDHandler
	DTDHandler
	
# EntityResolver from the xml.sax.handler module
snippet EntityResolver
	EntityResolver
	
# ErrorHandler from the xml.sax.handler module
snippet ErrorHandler
	ErrorHandler
	
# all_features() from the xml.sax.handler module
snippet all_features
	all_features()
	
# all_properties() from the xml.sax.handler module
snippet all_properties
	all_properties()
	
# characters() from the xml.sax.handler module
snippet characters
	characters(${1:content})
	
# endDocument() from the xml.sax.handler module
snippet endDocument
	endDocument(${1:})
	
# endElement() from the xml.sax.handler module
snippet endElement
	endElement(${1:name})
	
# endElementNS() from the xml.sax.handler module
snippet endElementNS
	endElementNS(${1:name}, ${2:qname})
	
# endPrefixMapping() from the xml.sax.handler module
snippet endPrefixMapping
	endPrefixMapping(${1:prefix})
	
# error() from the xml.sax.handler module
snippet error
	error(${1:exception})
	
# fatalError() from the xml.sax.handler module
snippet fatalError
	fatalError(${1:exception})
	
# feature_external_ges() from the xml.sax.handler module
snippet feature_external_ges
	feature_external_ges()
	
# feature_external_pes() from the xml.sax.handler module
snippet feature_external_pes
	feature_external_pes()
	
# feature_namespace_prefixes() from the xml.sax.handler module
snippet feature_namespace_prefixes
	feature_namespace_prefixes()
	
# feature_namespaces() from the xml.sax.handler module
snippet feature_namespaces
	feature_namespaces()
	
# feature_string_interning() from the xml.sax.handler module
snippet feature_string_interning
	feature_string_interning()
	
# feature_validation() from the xml.sax.handler module
snippet feature_validation
	feature_validation()
	
# ignorableWhitespace() from the xml.sax.handler module
snippet ignorableWhitespace
	ignorableWhitespace(${1:whitespace})
	
# notationDecl() from the xml.sax.handler module
snippet notationDecl
	notationDecl(${1:name}, ${2:publicId}, ${3:systemId})
	
# processingInstruction() from the xml.sax.handler module
snippet processingInstruction
	processingInstruction(${1:target}, ${2:data})
	
# property_declaration_handler() from the xml.sax.handler module
snippet property_declaration_handler
	property_declaration_handler()
	
# property_dom_node() from the xml.sax.handler module
snippet property_dom_node
	property_dom_node()
	
# property_lexical_handler() from the xml.sax.handler module
snippet property_lexical_handler
	property_lexical_handler()
	
# property_xml_string() from the xml.sax.handler module
snippet property_xml_string
	property_xml_string()
	
# resolveEntity() from the xml.sax.handler module
snippet resolveEntity
	resolveEntity(${1:publicId}, ${2:systemId})
	
# setDocumentLocator() from the xml.sax.handler module
snippet setDocumentLocator
	setDocumentLocator(${1:locator})
	
# skippedEntity() from the xml.sax.handler module
snippet skippedEntity
	skippedEntity(${1:name})
	
# startDocument() from the xml.sax.handler module
snippet startDocument
	startDocument(${1:})
	
# startElement() from the xml.sax.handler module
snippet startElement
	startElement(${1:name}, ${2:attrs})
	
# startElementNS() from the xml.sax.handler module
snippet startElementNS
	startElementNS(${1:name}, ${2:qname}, ${3:attrs})
	
# startPrefixMapping() from the xml.sax.handler module
snippet startPrefixMapping
	startPrefixMapping(${1:prefix}, ${2:uri})
	
# unparsedEntityDecl() from the xml.sax.handler module
snippet unparsedEntityDecl
	unparsedEntityDecl(${1:name}, ${2:publicId}, ${3:systemId}, ${4:ndata})
	
# warning() from the xml.sax.handler module
snippet warning
	warning(${1:exception})
	
# ContentHandler from the xml.sax.saxutils module
snippet ContentHandler
	ContentHandler
	
# DTDHandler from the xml.sax.saxutils module
snippet DTDHandler
	DTDHandler
	
# EntityResolver from the xml.sax.saxutils module
snippet EntityResolver
	EntityResolver
	
# ErrorHandler from the xml.sax.saxutils module
snippet ErrorHandler
	ErrorHandler
	
# all_features() from the xml.sax.saxutils module
snippet all_features
	all_features()
	
# all_properties() from the xml.sax.saxutils module
snippet all_properties
	all_properties()
	
# characters() from the xml.sax.saxutils module
snippet characters
	characters(${1:content})
	
# endDocument() from the xml.sax.saxutils module
snippet endDocument
	endDocument(${1:})
	
# endElement() from the xml.sax.saxutils module
snippet endElement
	endElement(${1:name})
	
# endElementNS() from the xml.sax.saxutils module
snippet endElementNS
	endElementNS(${1:name}, ${2:qname})
	
# endPrefixMapping() from the xml.sax.saxutils module
snippet endPrefixMapping
	endPrefixMapping(${1:prefix})
	
# error() from the xml.sax.saxutils module
snippet error
	error(${1:exception})
	
# fatalError() from the xml.sax.saxutils module
snippet fatalError
	fatalError(${1:exception})
	
# feature_external_ges() from the xml.sax.saxutils module
snippet feature_external_ges
	feature_external_ges()
	
# feature_external_pes() from the xml.sax.saxutils module
snippet feature_external_pes
	feature_external_pes()
	
# feature_namespace_prefixes() from the xml.sax.saxutils module
snippet feature_namespace_prefixes
	feature_namespace_prefixes()
	
# feature_namespaces() from the xml.sax.saxutils module
snippet feature_namespaces
	feature_namespaces()
	
# feature_string_interning() from the xml.sax.saxutils module
snippet feature_string_interning
	feature_string_interning()
	
# feature_validation() from the xml.sax.saxutils module
snippet feature_validation
	feature_validation()
	
# ignorableWhitespace() from the xml.sax.saxutils module
snippet ignorableWhitespace
	ignorableWhitespace(${1:whitespace})
	
# notationDecl() from the xml.sax.saxutils module
snippet notationDecl
	notationDecl(${1:name}, ${2:publicId}, ${3:systemId})
	
# processingInstruction() from the xml.sax.saxutils module
snippet processingInstruction
	processingInstruction(${1:target}, ${2:data})
	
# property_declaration_handler() from the xml.sax.saxutils module
snippet property_declaration_handler
	property_declaration_handler()
	
# property_dom_node() from the xml.sax.saxutils module
snippet property_dom_node
	property_dom_node()
	
# property_lexical_handler() from the xml.sax.saxutils module
snippet property_lexical_handler
	property_lexical_handler()
	
# property_xml_string() from the xml.sax.saxutils module
snippet property_xml_string
	property_xml_string()
	
# resolveEntity() from the xml.sax.saxutils module
snippet resolveEntity
	resolveEntity(${1:publicId}, ${2:systemId})
	
# setDocumentLocator() from the xml.sax.saxutils module
snippet setDocumentLocator
	setDocumentLocator(${1:locator})
	
# skippedEntity() from the xml.sax.saxutils module
snippet skippedEntity
	skippedEntity(${1:name})
	
# startDocument() from the xml.sax.saxutils module
snippet startDocument
	startDocument(${1:})
	
# startElement() from the xml.sax.saxutils module
snippet startElement
	startElement(${1:name}, ${2:attrs})
	
# startElementNS() from the xml.sax.saxutils module
snippet startElementNS
	startElementNS(${1:name}, ${2:qname}, ${3:attrs})
	
# startPrefixMapping() from the xml.sax.saxutils module
snippet startPrefixMapping
	startPrefixMapping(${1:prefix}, ${2:uri})
	
# unparsedEntityDecl() from the xml.sax.saxutils module
snippet unparsedEntityDecl
	unparsedEntityDecl(${1:name}, ${2:publicId}, ${3:systemId}, ${4:ndata})
	
# warning() from the xml.sax.saxutils module
snippet warning
	warning(${1:exception})
	
# ContentHandler from the xml.sax.xmlreader module
snippet ContentHandler
	ContentHandler
	
# DTDHandler from the xml.sax.xmlreader module
snippet DTDHandler
	DTDHandler
	
# EntityResolver from the xml.sax.xmlreader module
snippet EntityResolver
	EntityResolver
	
# ErrorHandler from the xml.sax.xmlreader module
snippet ErrorHandler
	ErrorHandler
	
# all_features() from the xml.sax.xmlreader module
snippet all_features
	all_features()
	
# all_properties() from the xml.sax.xmlreader module
snippet all_properties
	all_properties()
	
# characters() from the xml.sax.xmlreader module
snippet characters
	characters(${1:content})
	
# endDocument() from the xml.sax.xmlreader module
snippet endDocument
	endDocument(${1:})
	
# endElement() from the xml.sax.xmlreader module
snippet endElement
	endElement(${1:name})
	
# endElementNS() from the xml.sax.xmlreader module
snippet endElementNS
	endElementNS(${1:name}, ${2:qname})
	
# endPrefixMapping() from the xml.sax.xmlreader module
snippet endPrefixMapping
	endPrefixMapping(${1:prefix})
	
# error() from the xml.sax.xmlreader module
snippet error
	error(${1:exception})
	
# fatalError() from the xml.sax.xmlreader module
snippet fatalError
	fatalError(${1:exception})
	
# feature_external_ges() from the xml.sax.xmlreader module
snippet feature_external_ges
	feature_external_ges()
	
# feature_external_pes() from the xml.sax.xmlreader module
snippet feature_external_pes
	feature_external_pes()
	
# feature_namespace_prefixes() from the xml.sax.xmlreader module
snippet feature_namespace_prefixes
	feature_namespace_prefixes()
	
# feature_namespaces() from the xml.sax.xmlreader module
snippet feature_namespaces
	feature_namespaces()
	
# feature_string_interning() from the xml.sax.xmlreader module
snippet feature_string_interning
	feature_string_interning()
	
# feature_validation() from the xml.sax.xmlreader module
snippet feature_validation
	feature_validation()
	
# ignorableWhitespace() from the xml.sax.xmlreader module
snippet ignorableWhitespace
	ignorableWhitespace(${1:whitespace})
	
# notationDecl() from the xml.sax.xmlreader module
snippet notationDecl
	notationDecl(${1:name}, ${2:publicId}, ${3:systemId})
	
# processingInstruction() from the xml.sax.xmlreader module
snippet processingInstruction
	processingInstruction(${1:target}, ${2:data})
	
# property_declaration_handler() from the xml.sax.xmlreader module
snippet property_declaration_handler
	property_declaration_handler()
	
# property_dom_node() from the xml.sax.xmlreader module
snippet property_dom_node
	property_dom_node()
	
# property_lexical_handler() from the xml.sax.xmlreader module
snippet property_lexical_handler
	property_lexical_handler()
	
# property_xml_string() from the xml.sax.xmlreader module
snippet property_xml_string
	property_xml_string()
	
# resolveEntity() from the xml.sax.xmlreader module
snippet resolveEntity
	resolveEntity(${1:publicId}, ${2:systemId})
	
# setDocumentLocator() from the xml.sax.xmlreader module
snippet setDocumentLocator
	setDocumentLocator(${1:locator})
	
# skippedEntity() from the xml.sax.xmlreader module
snippet skippedEntity
	skippedEntity(${1:name})
	
# startDocument() from the xml.sax.xmlreader module
snippet startDocument
	startDocument(${1:})
	
# startElement() from the xml.sax.xmlreader module
snippet startElement
	startElement(${1:name}, ${2:attrs})
	
# startElementNS() from the xml.sax.xmlreader module
snippet startElementNS
	startElementNS(${1:name}, ${2:qname}, ${3:attrs})
	
# startPrefixMapping() from the xml.sax.xmlreader module
snippet startPrefixMapping
	startPrefixMapping(${1:prefix}, ${2:uri})
	
# unparsedEntityDecl() from the xml.sax.xmlreader module
snippet unparsedEntityDecl
	unparsedEntityDecl(${1:name}, ${2:publicId}, ${3:systemId}, ${4:ndata})
	
# warning() from the xml.sax.xmlreader module
snippet warning
	warning(${1:exception})
	
# MultiCall from the xmlrpc.client module
snippet MultiCall
	MultiCall(${1:server})
	
# ServerProxy from the xmlrpc.client module
snippet ServerProxy
	ServerProxy(${1:uri}, ${2:transport=None}, ${3:encoding=None}, ${4:verbose=False}, ${5:allow_none=False}, ${6:use_datetime=False}, ${7:use_builtin_types=False}, ${8:*}, ${9:context=None})
	
# data() from the xmlrpc.client module
snippet data
	data()
	
# decode() from the xmlrpc.client module
snippet decode
	decode(${1:string})
	
# dumps() from the xmlrpc.client module
snippet dumps
	dumps(${1:params}, ${2:methodname=None}, ${3:methodresponse=None}, ${4:encoding=None}, ${5:allow_none=False})
	
# encode() from the xmlrpc.client module
snippet encode
	encode(${1:out})
	
# errcode() from the xmlrpc.client module
snippet errcode
	errcode()
	
# errmsg() from the xmlrpc.client module
snippet errmsg
	errmsg()
	
# faultCode() from the xmlrpc.client module
snippet faultCode
	faultCode()
	
# faultString() from the xmlrpc.client module
snippet faultString
	faultString()
	
# headers() from the xmlrpc.client module
snippet headers
	headers()
	
# listMethods() from the xmlrpc.client module
snippet listMethods
	listMethods(${1:})
	
# loads() from the xmlrpc.client module
snippet loads
	loads(${1:data}, ${2:use_datetime=False}, ${3:use_builtin_types=False})
	
# methodHelp() from the xmlrpc.client module
snippet methodHelp
	methodHelp(${1:name})
	
# methodSignature() from the xmlrpc.client module
snippet methodSignature
	methodSignature(${1:name})
	
# url() from the xmlrpc.client module
snippet url
	url()
	
# CGIXMLRPCRequestHandler from the xmlrpc.server module
snippet CGIXMLRPCRequestHandler
	CGIXMLRPCRequestHandler(${1:allow_none=False}, ${2:encoding=None}, ${3:use_builtin_types=False})
	
# DocCGIXMLRPCRequestHandler from the xmlrpc.server module
snippet DocCGIXMLRPCRequestHandler
	DocCGIXMLRPCRequestHandler
	
# DocXMLRPCRequestHandler from the xmlrpc.server module
snippet DocXMLRPCRequestHandler
	DocXMLRPCRequestHandler
	
# DocXMLRPCServer from the xmlrpc.server module
snippet DocXMLRPCServer
	DocXMLRPCServer(${1:addr}, ${2:requestHandler=DocXMLRPCRequestHandler}, ${3:logRequests=True}, ${4:allow_none=False}, ${5:encoding=None}, ${6:bind_and_activate=True}, ${7:use_builtin_types=True})
	
# SimpleXMLRPCRequestHandler from the xmlrpc.server module
snippet SimpleXMLRPCRequestHandler
	SimpleXMLRPCRequestHandler
	
# SimpleXMLRPCServer from the xmlrpc.server module
snippet SimpleXMLRPCServer
	SimpleXMLRPCServer(${1:addr}, ${2:requestHandler=SimpleXMLRPCRequestHandler}, ${3:logRequests=True}, ${4:allow_none=False}, ${5:encoding=None}, ${6:bind_and_activate=True}, ${7:use_builtin_types=False})
	
# handle_request() from the xmlrpc.server module
snippet handle_request
	handle_request(${1:request_text=None})
	
# register_function() from the xmlrpc.server module
snippet register_function
	register_function(${1:function}, ${2:name=None})
	
# register_instance() from the xmlrpc.server module
snippet register_instance
	register_instance(${1:instance})
	
# register_introspection_functions() from the xmlrpc.server module
snippet register_introspection_functions
	register_introspection_functions(${1:})
	
# register_multicall_functions() from the xmlrpc.server module
snippet register_multicall_functions
	register_multicall_functions(${1:})
	
# rpc_paths() from the xmlrpc.server module
snippet rpc_paths
	rpc_paths()
	
# set_server_documentation() from the xmlrpc.server module
snippet set_server_documentation
	set_server_documentation(${1:server_documentation})
	
# set_server_name() from the xmlrpc.server module
snippet set_server_name
	set_server_name(${1:server_name})
	
# set_server_title() from the xmlrpc.server module
snippet set_server_title
	set_server_title(${1:server_title})
	
# create_archive() from the zipapp module
snippet create_archive
	create_archive(${1:source}, ${2:target=None}, ${3:interpreter=None}, ${4:main=None})
	
# get_interpreter() from the zipapp module
snippet get_interpreter
	get_interpreter(${1:archive})
	
# BadZipFile from the zipfile module
snippet BadZipFile
	BadZipFile
	
# BadZipfile from the zipfile module
snippet BadZipfile
	BadZipfile
	
# CRC from the zipfile module
snippet CRC
	CRC
	
# LargeZipFile from the zipfile module
snippet LargeZipFile
	LargeZipFile
	
# PyZipFile Class for creating ZIP archives containing Python libraries.     class zipfile.ZipInfo from the zipfile module
snippet PyZipFile Class for creating ZIP archives containing Python libraries.     class zipfile.ZipInfo
	PyZipFile Class for creating ZIP archives containing Python libraries.     class zipfile.ZipInfo(${1:filename='NoName'}, ${2:date_time=}, ${3:1980}, ${4:1}, ${4:1}, ${6:0}, ${6:0}, ${8:0})
	
# PyZipFile from the zipfile module
snippet PyZipFile
	PyZipFile(${1:file}, ${2:mode='r'}, ${3:compression=ZIP_STORED}, ${4:allowZip64=True}, ${5:optimize=-1})
	
# ZIP_BZIP2 from the zipfile module
snippet ZIP_BZIP2
	ZIP_BZIP2
	
# ZIP_DEFLATED from the zipfile module
snippet ZIP_DEFLATED
	ZIP_DEFLATED
	
# ZIP_LZMA from the zipfile module
snippet ZIP_LZMA
	ZIP_LZMA
	
# ZIP_STORED from the zipfile module
snippet ZIP_STORED
	ZIP_STORED
	
# ZipFile The class for reading and writing ZIP files.  See section  from the zipfile module
snippet ZipFile The class for reading and writing ZIP files.  See section 
	ZipFile The class for reading and writing ZIP files.  See section 
	
# ZipFile from the zipfile module
snippet ZipFile
	ZipFile(${1:file}, ${2:mode='r'}, ${3:compression=ZIP_STORED}, ${4:allowZip64=True})
	
# close() from the zipfile module
snippet close
	close(${1:})
	
# comment() from the zipfile module
snippet comment
	comment()
	
# compress_size() from the zipfile module
snippet compress_size
	compress_size()
	
# compress_type() from the zipfile module
snippet compress_type
	compress_type()
	
# create_system() from the zipfile module
snippet create_system
	create_system()
	
# create_version() from the zipfile module
snippet create_version
	create_version()
	
# date_time() from the zipfile module
snippet date_time
	date_time()
	
# debug() from the zipfile module
snippet debug
	debug()
	
# external_attr() from the zipfile module
snippet external_attr
	external_attr()
	
# extra() from the zipfile module
snippet extra
	extra()
	
# extract() from the zipfile module
snippet extract
	extract(${1:member}, ${2:path=None}, ${3:pwd=None})
	
# extract_version() from the zipfile module
snippet extract_version
	extract_version()
	
# extractall() from the zipfile module
snippet extractall
	extractall(${1:path=None}, ${2:members=None}, ${3:pwd=None})
	
# file_size() from the zipfile module
snippet file_size
	file_size()
	
# filename() from the zipfile module
snippet filename
	filename()
	
# flag_bits() from the zipfile module
snippet flag_bits
	flag_bits()
	
# getinfo() from the zipfile module
snippet getinfo
	getinfo(${1:name})
	
# header_offset() from the zipfile module
snippet header_offset
	header_offset()
	
# infolist() from the zipfile module
snippet infolist
	infolist(${1:})
	
# internal_attr() from the zipfile module
snippet internal_attr
	internal_attr()
	
# is_zipfile() from the zipfile module
snippet is_zipfile
	is_zipfile(${1:filename})
	
# namelist() from the zipfile module
snippet namelist
	namelist(${1:})
	
# open() from the zipfile module
snippet open
	open(${1:name}, ${2:mode='r'}, ${3:pwd=None})
	
# printdir() from the zipfile module
snippet printdir
	printdir(${1:})
	
# read() from the zipfile module
snippet read
	read(${1:name}, ${2:pwd=None})
	
# reserved() from the zipfile module
snippet reserved
	reserved()
	
# setpassword() from the zipfile module
snippet setpassword
	setpassword(${1:pwd})
	
# testzip() from the zipfile module
snippet testzip
	testzip(${1:})
	
# volume() from the zipfile module
snippet volume
	volume()
	
# write() from the zipfile module
snippet write
	write(${1:filename}, ${2:arcname=None}, ${3:compress_type=None})
	
# writestr() from the zipfile module
snippet writestr
	writestr(${1:zinfo_or_arcname,})
	
# ZipImportError from the zipimport module
snippet ZipImportError
	ZipImportError
	
# zipimporter() from the zipimport module
snippet zipimporter
	zipimporter(${1:archivepath})
	
# ZLIB_RUNTIME_VERSION from the zlib module
snippet ZLIB_RUNTIME_VERSION
	ZLIB_RUNTIME_VERSION
	
# ZLIB_VERSION from the zlib module
snippet ZLIB_VERSION
	ZLIB_VERSION
	
# adler32() from the zlib module
snippet adler32
	adler32(${1:data[}, ${2:value]})
	
# compress() from the zlib module
snippet compress
	compress(${1:data})
	
# compressobj() from the zlib module
snippet compressobj
	compressobj(${1:level=-1}, ${2:method=DEFLATED}, ${3:wbits=15}, ${4:memLevel=8}, ${5:strategy=Z_DEFAULT_STRATEGY[}, ${6:zdict]})
	
# copy() from the zlib module
snippet copy
	copy(${1:})
	
# crc32() from the zlib module
snippet crc32
	crc32(${1:data[}, ${2:value]})
	
# decompress() from the zlib module
snippet decompress
	decompress(${1:data[}, ${2:wbits[}, ${3:bufsize]]})
	
# decompressobj() from the zlib module
snippet decompressobj
	decompressobj(${1:wbits=15[}, ${2:zdict]})
	
# eof() from the zlib module
snippet eof
	eof()
	
# error() from the zlib module
snippet error
	error()
	
# flush() from the zlib module
snippet flush
	flush(${1:[mode]})
	
# unconsumed_tail() from the zlib module
snippet unconsumed_tail
	unconsumed_tail()
	
# unused_data() from the zlib module
snippet unused_data
	unused_data()
	
