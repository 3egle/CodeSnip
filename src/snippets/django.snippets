# Model Class Setup
snippet modclass
	class ${1:ClassName}(models.Model):
	    ${0:Fields}
	
# CharField Model
snippet charfield
	${1:fieldName} = models.CharField(max_length = ${2:150})
	${0}
	
# IntegerField Model
snippet intfield
	${1:fieldName} = models.IntegerField()
	${0}
	
# BooleanField Model
snippet boolfield
	${1:fieldName} = models.BooleanField()
	${0}
	
# DateField Model
snippet datefield
	${1:fieldName} = models.DateField(auto_now=${2:False}, auto_now_add=${3:False})
	${0}
	
# DateTimeField Model
snippet dtfield,datetimefield
	${1:fieldName} = models.DateTimeField(auto_now=${2:False}, auto_now_add=${3:False})
	${0}
	
# DecimalField Model
snippet decimalfield
	${1:fieldName} = models.DecimalField(max_digits=${2:None}, decimal_places=${3:None})
	${0}
	
# EmailField Model
snippet emailfield
	${1:fieldName} = models.EmailField(max_length=%{2:254})
	${0}
	
# FileField Model
snippet filefield
	${1:fieldName} = models.FileField(upload_to=${2:None}, max_length = ${3:100})
	${0}
	
# ImageField Model
snippet imagefield
	${1:fieldName} = models.ImageField(upload_to=${2:None}, height_field=${3:None}, width_field=${4:None}, max_length=${5:100})
	${0}
	
# FloatField Model
snippet floatfield
	${1:fieldName} = models.FloatField()
	${0}
	
# SlugField Model
snippet slugfield
	${1:fieldName} = models.SlugField(max_length = ${2:50})
	${0}
	
# TextField Model
snippet textfield
	${1:fieldName} = models.TextField()
	${0}
	
# TimeField Model
snippet timefield
	${1:fieldName} = models.TimeField(auto_now=${2:False}, auto_now_add=${3:False})
	${0}
	
# URLField Model
snippet urlfield
	${1:fieldName} = models.URLField(max_length = ${2:200})
	${0}
	
# ForeignKeyField Model
snippet foreignkeyfield,fkfield
	${1:fieldName} = models.ForeignKey(${2:RelatedModel}, on_delete=${3:models.CASCADE})
	${0}
	
# ManyToManyField Model
snippet manytomanyfield,m2mfield,mtmfield
	${1:fieldName} = models.ManyToManyField(${2:RelatedModel})
	${0}
	
# OneToOneField Model
snippet onetoonefield,otofield
	${1:fieldName} = models.OneToOneField(${2:RelatedModel}, on_delete=${3:models.CASCADE})
	${0}
	
# Admin Site Regitser
snippet admreg
	admin.site.register(${1:ModelName})
	${0}
	
# urls.py file setup
snippet paturl,urlpattern,upt
	from django.urls import path, re_path
	from .views import ${1:ViewsToBeImported}
	
	app_name = ${2:AppName}
	
	urlpatterns = [
	    ${0}
	]
	
# Custom Manager Class Setup
snippet dmanagerclass,dmnc,managerclass
	from django.db.models import Manager
	
	class ${1:ManagerName}(Manager):
	    ${0}
	
# Custom Manager In Model
snippet cmmodel,custommanagermodel
	${1:objects} = ${2:CustomManagerName}()
	${0}
	
# Form.py setup
snippet setform,formpy
	from django import forms
	${0}
	
# Form Class Setup
snippet formclass,fclass
	class ${1:FormName}(forms.Form):
	    ${0:Fields}
	
# Override is_valid() method
snippet is_valid(),validcustom
	def is_valid(self):
	    valid = super().is_valid()
	    if not valid:
	        return False
	    ${1:# Custom Logic}
	    return True
	${0}
	
# ModelForm Setup
snippet modform,modelform
	class ${1:FormName}(forms.ModelForm):
	    class Meta:
	        model = ${2:ModelName}
	        fields = [${0:Model Fields}]
	
# BoolField Form
snippet fboolfield
	${1:fieldName} = forms.BooleanField(${2})
	${0}
	
# CharField Form
snippet fcharfield
	${1:fieldName} = forms.CharField(${2})
	${0}
	
# ChoiceField Form
snippet fchoicefield
	${1:fieldName} = forms.ChoiceField(${2})
	${0}
	
# DateField Form
snippet fdatefield
	${1:fieldName} = forms.DateField(${2})
	${0}
	
# DateTimeField Form
snippet fdatetimefield,fdtfield
	${1:fieldName} = forms.DateTimeField(${2})
	${0}
	
# DecimalField Form
snippet fdecimalfield
	${1:fieldName} = forms.DecimalField(${2})
	${0}
	
# EmailField Form
snippet femailfield
	${1:fieldName} = forms.EmailField(${2})
	${0}
	
# FileField Form
snippet ffilefield
	${1:fieldName} = forms.FileField(${2})
	${0}
	
# FloatField Form
snippet ffloatfield
	${1:fieldName} = forms.FloatField(${2})
	${0}
	
# ImageField Form
snippet fimagefield
	${1:fieldName} = forms.ImageField(${2})
	${0}
	
# IntegerField Form
snippet fintegerfield,fintfield
	${1:fieldName} = forms.IntegerField(${2})
	${0}
	
# MultipleChoiceField Form
snippet fmultiplechoicefiled,fmcfield
	${1:fieldName} = forms.MultipleChoiceField(${2})
	${0}
	
# SlugField Form
snippet fslugfield
	${1:fieldName} = forms.SlugField(${2})
	${0}
	
# TimeField Form
snippet ftimefield
	${1:fieldName} = forms.TimeField(${2})
	${0}
	
# URLField Form
snippet furlfield
	${1:fieldName} = forms.URLField(${2})
	${0}
	
# Django Base View
snippet gencbv,basecbv
	class ${1:ViewName}(View):
	
	    def post(self, request):
	        ${2:pass}
	
	    def get(self,request):
	        ${0:pass}
	
# Render shortcut
snippet render,rshort
	return render(request, ${1:template_name}, {${2}})
	${0}
	
# HttpResponseRedirect Shortcut
snippet httpresponseredirect,httpred,htrd
	return HttpResponseRedirect(reverse('${1:App_Name}:${2:Name}', ${3}))
	${0}
	
# Form data access
snippet cleaneddata,formdata,cltd
	${1:VariableName} = ${2:formName}.cleaned_data.get('${3:${1}}')
	${0}
	
# Custom Filter
snippet customfilter,custfilt
	from django import template
	
	register = template.Library()
	
	@register.filter(name=${1:FilterName})
	def ${2:${1}}(value, arg=None):
	    ${0}
	
# Create API
snippet create
	${1:Variable} = ${2:ModelName}.objects.create(${3:PassArguments})
	${0}
	
# All API
snippet all
	${1:Variable} = ${2:ModelName}.objects.all()
	${0}
	
# Filter API
snippet filter
	${1:Variable} = ${2:ModelName}.objects.filter(${3:PassArguments})
	${0}
	
# Get API
snippet get
	${1:Variable} = ${2:ModelName}.objects.get(${3:PassArguments})
	${0}
	
# Exclude API
snippet exclude
	${1:Variable} = ${2:ModelName}.objects.exclude(${3:PassArguments})
	${0}
	
# Get Or Create API
snippet get_or_create,goc
	${1:Variable}, ${2:Created} = ${3:ModelName}.objects.get_or_create(${4:PassArguments})
	${0}
	
# Update Or Create API
snippet update_or_create,uoc
	${1:Variable}, ${2:Created} = ${3:ModelName}.objects.update_or_create(${4:PassArguments})
	${0}
	
# Count API
snippet count
	${1:Variable} = ${2:ModelName}.objects.count(${3:PassArguments})
	${0}
	
# Latest API
snippet latest
	${1:Variable} = ${2:ModelName}.objects.latest(${3:PassArguments})
	${0}
	
# Earliest API
snippet earliest
	${1:Variable} = ${2:ModelName}.objects.earliest(${3:PassArguments})
	${0}
	
# Function View Generic
snippet fbvbase,genfunc
	def ${1:FunctionName}(request):
	
	    if request.method == 'POST':
	        ${2:pass}
	
	    if request.method == 'GET':
	        ${3:pass}
	
	${0}
	
# Create new user instance
snippet usercreate,createuser
	user = Users.objects.create_user(username=${1:username}, password=${2:password}${3})
	${0}
	
# Validate Password
snippet validatepassword
	validate_password(${1:password}, user=${2:None})
	${0}
	
# Set Password
snippet setpassword
	${1:user}.set_password(${2:password})
	${0}
	
# Authenticate User
snippet authuser,authenticateuser
	${1:user} = authenticate(username=${2:username}, password=${3:password})
	if ${1}:
	    ${0:# User is authenticated}
	
# Check Authentication
snippet checkauth
	if ${1:user}.is_authenticated():
	    ${0:# User is authenticated}
	
